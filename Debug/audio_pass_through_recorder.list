
audio_pass_through_recorder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcc0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800be90  0800be90  0000ce90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf70  0800bf70  0000d160  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf70  0800bf70  0000cf70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf78  0800bf78  0000d160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf78  0800bf78  0000cf78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bf7c  0800bf7c  0000cf7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000160  20000000  0800bf80  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006694  20000160  0800c0e0  0000d160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200067f4  0800c0e0  0000d7f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025026  00000000  00000000  0000d190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005127  00000000  00000000  000321b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001be8  00000000  00000000  000372e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001585  00000000  00000000  00038ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006dbe  00000000  00000000  0003a44d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022a37  00000000  00000000  0004120b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe340  00000000  00000000  00063c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00161f82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077d0  00000000  00000000  00161fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00169798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000160 	.word	0x20000160
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800be78 	.word	0x0800be78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000164 	.word	0x20000164
 800020c:	0800be78 	.word	0x0800be78

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000514:	f3bf 8f4f 	dsb	sy
}
 8000518:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800051a:	f3bf 8f6f 	isb	sy
}
 800051e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000520:	4b0d      	ldr	r3, [pc, #52]	@ (8000558 <SCB_EnableICache+0x48>)
 8000522:	2200      	movs	r2, #0
 8000524:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000528:	f3bf 8f4f 	dsb	sy
}
 800052c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800052e:	f3bf 8f6f 	isb	sy
}
 8000532:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000534:	4b08      	ldr	r3, [pc, #32]	@ (8000558 <SCB_EnableICache+0x48>)
 8000536:	695b      	ldr	r3, [r3, #20]
 8000538:	4a07      	ldr	r2, [pc, #28]	@ (8000558 <SCB_EnableICache+0x48>)
 800053a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800053e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000540:	f3bf 8f4f 	dsb	sy
}
 8000544:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000546:	f3bf 8f6f 	isb	sy
}
 800054a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000562:	4b1f      	ldr	r3, [pc, #124]	@ (80005e0 <SCB_EnableDCache+0x84>)
 8000564:	2200      	movs	r2, #0
 8000566:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800056a:	f3bf 8f4f 	dsb	sy
}
 800056e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000570:	4b1b      	ldr	r3, [pc, #108]	@ (80005e0 <SCB_EnableDCache+0x84>)
 8000572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000576:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	0b5b      	lsrs	r3, r3, #13
 800057c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000580:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	08db      	lsrs	r3, r3, #3
 8000586:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800058a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	015a      	lsls	r2, r3, #5
 8000590:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000594:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800059a:	4911      	ldr	r1, [pc, #68]	@ (80005e0 <SCB_EnableDCache+0x84>)
 800059c:	4313      	orrs	r3, r2
 800059e:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	1e5a      	subs	r2, r3, #1
 80005a6:	60ba      	str	r2, [r7, #8]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d1ef      	bne.n	800058c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	1e5a      	subs	r2, r3, #1
 80005b0:	60fa      	str	r2, [r7, #12]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d1e5      	bne.n	8000582 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005b6:	f3bf 8f4f 	dsb	sy
}
 80005ba:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005bc:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <SCB_EnableDCache+0x84>)
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	4a07      	ldr	r2, [pc, #28]	@ (80005e0 <SCB_EnableDCache+0x84>)
 80005c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80005c6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005c8:	f3bf 8f4f 	dsb	sy
}
 80005cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ce:	f3bf 8f6f 	isb	sy
}
 80005d2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80005d4:	bf00      	nop
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80005e8:	f7ff ff92 	bl	8000510 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80005ec:	f7ff ffb6 	bl	800055c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fc02 	bl	8000df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f81a 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f8e6 	bl	80007c8 <MX_GPIO_Init>
  MX_UART4_Init();
 80005fc:	f000 f884 	bl	8000708 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000600:	f000 f8b2 	bl	8000768 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000604:	f007 fec2 	bl	800838c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000608:	4a05      	ldr	r2, [pc, #20]	@ (8000620 <main+0x3c>)
 800060a:	2100      	movs	r1, #0
 800060c:	4805      	ldr	r0, [pc, #20]	@ (8000624 <main+0x40>)
 800060e:	f007 ff27 	bl	8008460 <osThreadNew>
 8000612:	4603      	mov	r3, r0
 8000614:	4a04      	ldr	r2, [pc, #16]	@ (8000628 <main+0x44>)
 8000616:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000618:	f007 feec 	bl	80083f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <main+0x38>
 8000620:	0800bf34 	.word	0x0800bf34
 8000624:	0800088d 	.word	0x0800088d
 8000628:	2000028c 	.word	0x2000028c

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	@ 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	@ 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f00b fb2a 	bl	800bc94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	4b2b      	ldr	r3, [pc, #172]	@ (8000700 <SystemClock_Config+0xd4>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000654:	4a2a      	ldr	r2, [pc, #168]	@ (8000700 <SystemClock_Config+0xd4>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	@ 0x40
 800065c:	4b28      	ldr	r3, [pc, #160]	@ (8000700 <SystemClock_Config+0xd4>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	4b26      	ldr	r3, [pc, #152]	@ (8000704 <SystemClock_Config+0xd8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a25      	ldr	r2, [pc, #148]	@ (8000704 <SystemClock_Config+0xd8>)
 800066e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b23      	ldr	r3, [pc, #140]	@ (8000704 <SystemClock_Config+0xd8>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000680:	2301      	movs	r3, #1
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000684:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000688:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000692:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000694:	2319      	movs	r3, #25
 8000696:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000698:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 800069c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006a2:	2309      	movs	r3, #9
 80006a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	4618      	mov	r0, r3
 80006ac:	f002 f9ce 	bl	8002a4c <HAL_RCC_OscConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006b6:	f000 f911 	bl	80008dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006ba:	f002 f977 	bl	80029ac <HAL_PWREx_EnableOverDrive>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006c4:	f000 f90a 	bl	80008dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2302      	movs	r3, #2
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2107      	movs	r1, #7
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 fc54 	bl	8002f94 <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006f2:	f000 f8f3 	bl	80008dc <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	@ 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800070c:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_UART4_Init+0x58>)
 800070e:	4a15      	ldr	r2, [pc, #84]	@ (8000764 <MX_UART4_Init+0x5c>)
 8000710:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000712:	4b13      	ldr	r3, [pc, #76]	@ (8000760 <MX_UART4_Init+0x58>)
 8000714:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000718:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <MX_UART4_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <MX_UART4_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <MX_UART4_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <MX_UART4_Init+0x58>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	@ (8000760 <MX_UART4_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000738:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <MX_UART4_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073e:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <MX_UART4_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000744:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <MX_UART4_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	@ (8000760 <MX_UART4_Init+0x58>)
 800074c:	f003 fd0a 	bl	8004164 <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000756:	f000 f8c1 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000017c 	.word	0x2000017c
 8000764:	40004c00 	.word	0x40004c00

08000768 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800076c:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <MX_USART1_UART_Init+0x58>)
 800076e:	4a15      	ldr	r2, [pc, #84]	@ (80007c4 <MX_USART1_UART_Init+0x5c>)
 8000770:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000772:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <MX_USART1_UART_Init+0x58>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_USART1_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <MX_USART1_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <MX_USART1_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_USART1_UART_Init+0x58>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	@ (80007c0 <MX_USART1_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_USART1_UART_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079e:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <MX_USART1_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <MX_USART1_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_USART1_UART_Init+0x58>)
 80007ac:	f003 fcda 	bl	8004164 <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007b6:	f000 f891 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000204 	.word	0x20000204
 80007c4:	40011000 	.word	0x40011000

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	@ 0x28
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b29      	ldr	r3, [pc, #164]	@ (8000884 <MX_GPIO_Init+0xbc>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a28      	ldr	r2, [pc, #160]	@ (8000884 <MX_GPIO_Init+0xbc>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b26      	ldr	r3, [pc, #152]	@ (8000884 <MX_GPIO_Init+0xbc>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	4b23      	ldr	r3, [pc, #140]	@ (8000884 <MX_GPIO_Init+0xbc>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a22      	ldr	r2, [pc, #136]	@ (8000884 <MX_GPIO_Init+0xbc>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b20      	ldr	r3, [pc, #128]	@ (8000884 <MX_GPIO_Init+0xbc>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	4b1d      	ldr	r3, [pc, #116]	@ (8000884 <MX_GPIO_Init+0xbc>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a1c      	ldr	r2, [pc, #112]	@ (8000884 <MX_GPIO_Init+0xbc>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <MX_GPIO_Init+0xbc>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000826:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <MX_GPIO_Init+0xbc>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a16      	ldr	r2, [pc, #88]	@ (8000884 <MX_GPIO_Init+0xbc>)
 800082c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_GPIO_Init+0xbc>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_GPIO_Init+0xbc>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a10      	ldr	r2, [pc, #64]	@ (8000884 <MX_GPIO_Init+0xbc>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_GPIO_Init+0xbc>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2102      	movs	r1, #2
 800085a:	480b      	ldr	r0, [pc, #44]	@ (8000888 <MX_GPIO_Init+0xc0>)
 800085c:	f000 fdba 	bl	80013d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000860:	2302      	movs	r3, #2
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	4804      	ldr	r0, [pc, #16]	@ (8000888 <MX_GPIO_Init+0xc0>)
 8000878:	f000 fc00 	bl	800107c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087c:	bf00      	nop
 800087e:	3728      	adds	r7, #40	@ 0x28
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800
 8000888:	40022000 	.word	0x40022000

0800088c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000894:	f00a fbaa 	bl	800afec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  mod_toggle_led1();
 8000898:	f000 f9c6 	bl	8000c28 <mod_toggle_led1>
  for(;;)
  {
    osDelay(2000);
 800089c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008a0:	f007 fe84 	bl	80085ac <osDelay>
    mod_send_usb_test_data();
 80008a4:	f000 f9e4 	bl	8000c70 <mod_send_usb_test_data>
    mod_send_uart_test_logs(&huart1);
 80008a8:	4802      	ldr	r0, [pc, #8]	@ (80008b4 <StartDefaultTask+0x28>)
 80008aa:	f000 fa07 	bl	8000cbc <mod_send_uart_test_logs>
  {
 80008ae:	bf00      	nop
 80008b0:	e7f4      	b.n	800089c <StartDefaultTask+0x10>
 80008b2:	bf00      	nop
 80008b4:	20000204 	.word	0x20000204

080008b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a04      	ldr	r2, [pc, #16]	@ (80008d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d101      	bne.n	80008ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ca:	f000 fab1 	bl	8000e30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40010000 	.word	0x40010000

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008e0:	b672      	cpsid	i
}
 80008e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <Error_Handler+0x8>

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <HAL_MspInit+0x5c>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f2:	4a14      	ldr	r2, [pc, #80]	@ (8000944 <HAL_MspInit+0x5c>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008fa:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <HAL_MspInit+0x5c>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <HAL_MspInit+0x5c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090a:	4a0e      	ldr	r2, [pc, #56]	@ (8000944 <HAL_MspInit+0x5c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000910:	6453      	str	r3, [r2, #68]	@ 0x44
 8000912:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <HAL_MspInit+0x5c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	210f      	movs	r1, #15
 8000922:	f06f 0001 	mvn.w	r0, #1
 8000926:	f000 fb7f 	bl	8001028 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2105      	movs	r1, #5
 800092e:	2005      	movs	r0, #5
 8000930:	f000 fb7a 	bl	8001028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000934:	2005      	movs	r0, #5
 8000936:	f000 fb93 	bl	8001060 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800

08000948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b0ae      	sub	sp, #184	@ 0xb8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000960:	f107 0320 	add.w	r3, r7, #32
 8000964:	2284      	movs	r2, #132	@ 0x84
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f00b f993 	bl	800bc94 <memset>
  if(huart->Instance==UART4)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a53      	ldr	r2, [pc, #332]	@ (8000ac0 <HAL_UART_MspInit+0x178>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d13d      	bne.n	80009f4 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000978:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800097c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800097e:	2300      	movs	r3, #0
 8000980:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000982:	f107 0320 	add.w	r3, r7, #32
 8000986:	4618      	mov	r0, r3
 8000988:	f002 fd1c 	bl	80033c4 <HAL_RCCEx_PeriphCLKConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000992:	f7ff ffa3 	bl	80008dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000996:	4b4b      	ldr	r3, [pc, #300]	@ (8000ac4 <HAL_UART_MspInit+0x17c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099a:	4a4a      	ldr	r2, [pc, #296]	@ (8000ac4 <HAL_UART_MspInit+0x17c>)
 800099c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80009a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a2:	4b48      	ldr	r3, [pc, #288]	@ (8000ac4 <HAL_UART_MspInit+0x17c>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80009aa:	61fb      	str	r3, [r7, #28]
 80009ac:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	4b45      	ldr	r3, [pc, #276]	@ (8000ac4 <HAL_UART_MspInit+0x17c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a44      	ldr	r2, [pc, #272]	@ (8000ac4 <HAL_UART_MspInit+0x17c>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b42      	ldr	r3, [pc, #264]	@ (8000ac4 <HAL_UART_MspInit+0x17c>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	61bb      	str	r3, [r7, #24]
 80009c4:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80009c6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80009ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80009e0:	2308      	movs	r3, #8
 80009e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80009ea:	4619      	mov	r1, r3
 80009ec:	4836      	ldr	r0, [pc, #216]	@ (8000ac8 <HAL_UART_MspInit+0x180>)
 80009ee:	f000 fb45 	bl	800107c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009f2:	e061      	b.n	8000ab8 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a34      	ldr	r2, [pc, #208]	@ (8000acc <HAL_UART_MspInit+0x184>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d15c      	bne.n	8000ab8 <HAL_UART_MspInit+0x170>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009fe:	2340      	movs	r3, #64	@ 0x40
 8000a00:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a02:	2300      	movs	r3, #0
 8000a04:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a06:	f107 0320 	add.w	r3, r7, #32
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f002 fcda 	bl	80033c4 <HAL_RCCEx_PeriphCLKConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8000a16:	f7ff ff61 	bl	80008dc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac4 <HAL_UART_MspInit+0x17c>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1e:	4a29      	ldr	r2, [pc, #164]	@ (8000ac4 <HAL_UART_MspInit+0x17c>)
 8000a20:	f043 0310 	orr.w	r3, r3, #16
 8000a24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a26:	4b27      	ldr	r3, [pc, #156]	@ (8000ac4 <HAL_UART_MspInit+0x17c>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a2a:	f003 0310 	and.w	r3, r3, #16
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	4b24      	ldr	r3, [pc, #144]	@ (8000ac4 <HAL_UART_MspInit+0x17c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	4a23      	ldr	r2, [pc, #140]	@ (8000ac4 <HAL_UART_MspInit+0x17c>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3e:	4b21      	ldr	r3, [pc, #132]	@ (8000ac4 <HAL_UART_MspInit+0x17c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac4 <HAL_UART_MspInit+0x17c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ac4 <HAL_UART_MspInit+0x17c>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a56:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac4 <HAL_UART_MspInit+0x17c>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a62:	2380      	movs	r3, #128	@ 0x80
 8000a64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a7a:	2307      	movs	r3, #7
 8000a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a80:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a84:	4619      	mov	r1, r3
 8000a86:	4812      	ldr	r0, [pc, #72]	@ (8000ad0 <HAL_UART_MspInit+0x188>)
 8000a88:	f000 faf8 	bl	800107c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000aa6:	2307      	movs	r3, #7
 8000aa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4808      	ldr	r0, [pc, #32]	@ (8000ad4 <HAL_UART_MspInit+0x18c>)
 8000ab4:	f000 fae2 	bl	800107c <HAL_GPIO_Init>
}
 8000ab8:	bf00      	nop
 8000aba:	37b8      	adds	r7, #184	@ 0xb8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40004c00 	.word	0x40004c00
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020800 	.word	0x40020800
 8000acc:	40011000 	.word	0x40011000
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40020000 	.word	0x40020000

08000ad8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08c      	sub	sp, #48	@ 0x30
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ae8:	4b2f      	ldr	r3, [pc, #188]	@ (8000ba8 <HAL_InitTick+0xd0>)
 8000aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aec:	4a2e      	ldr	r2, [pc, #184]	@ (8000ba8 <HAL_InitTick+0xd0>)
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000af4:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba8 <HAL_InitTick+0xd0>)
 8000af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af8:	f003 0301 	and.w	r3, r3, #1
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b00:	f107 020c 	add.w	r2, r7, #12
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	4611      	mov	r1, r2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f002 fc28 	bl	8003360 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b10:	f002 fc12 	bl	8003338 <HAL_RCC_GetPCLK2Freq>
 8000b14:	4603      	mov	r3, r0
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b1c:	4a23      	ldr	r2, [pc, #140]	@ (8000bac <HAL_InitTick+0xd4>)
 8000b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b22:	0c9b      	lsrs	r3, r3, #18
 8000b24:	3b01      	subs	r3, #1
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b28:	4b21      	ldr	r3, [pc, #132]	@ (8000bb0 <HAL_InitTick+0xd8>)
 8000b2a:	4a22      	ldr	r2, [pc, #136]	@ (8000bb4 <HAL_InitTick+0xdc>)
 8000b2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b2e:	4b20      	ldr	r3, [pc, #128]	@ (8000bb0 <HAL_InitTick+0xd8>)
 8000b30:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b34:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b36:	4a1e      	ldr	r2, [pc, #120]	@ (8000bb0 <HAL_InitTick+0xd8>)
 8000b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb0 <HAL_InitTick+0xd8>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b42:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb0 <HAL_InitTick+0xd8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b48:	4b19      	ldr	r3, [pc, #100]	@ (8000bb0 <HAL_InitTick+0xd8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b4e:	4818      	ldr	r0, [pc, #96]	@ (8000bb0 <HAL_InitTick+0xd8>)
 8000b50:	f003 f828 	bl	8003ba4 <HAL_TIM_Base_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d11b      	bne.n	8000b9a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b62:	4813      	ldr	r0, [pc, #76]	@ (8000bb0 <HAL_InitTick+0xd8>)
 8000b64:	f003 f880 	bl	8003c68 <HAL_TIM_Base_Start_IT>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d111      	bne.n	8000b9a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b76:	2019      	movs	r0, #25
 8000b78:	f000 fa72 	bl	8001060 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b0f      	cmp	r3, #15
 8000b80:	d808      	bhi.n	8000b94 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b82:	2200      	movs	r2, #0
 8000b84:	6879      	ldr	r1, [r7, #4]
 8000b86:	2019      	movs	r0, #25
 8000b88:	f000 fa4e 	bl	8001028 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb8 <HAL_InitTick+0xe0>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]
 8000b92:	e002      	b.n	8000b9a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3730      	adds	r7, #48	@ 0x30
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	431bde83 	.word	0x431bde83
 8000bb0:	20000290 	.word	0x20000290
 8000bb4:	40010000 	.word	0x40010000
 8000bb8:	20000004 	.word	0x20000004

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <HardFault_Handler+0x4>

08000bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <MemManage_Handler+0x4>

08000bd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <BusFault_Handler+0x4>

08000bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <UsageFault_Handler+0x4>

08000be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c04:	4802      	ldr	r0, [pc, #8]	@ (8000c10 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c06:	f003 f8a7 	bl	8003d58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000290 	.word	0x20000290

08000c14 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c18:	4802      	ldr	r0, [pc, #8]	@ (8000c24 <OTG_FS_IRQHandler+0x10>)
 8000c1a:	f000 fd54 	bl	80016c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200061a4 	.word	0x200061a4

08000c28 <mod_toggle_led1>:
#include "stm32f7xx_hal.h"

#include "usbd_cdc_if.h"

void mod_toggle_led1(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	4802      	ldr	r0, [pc, #8]	@ (8000c38 <mod_toggle_led1+0x10>)
 8000c30:	f000 fbe9 	bl	8001406 <HAL_GPIO_TogglePin>
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40022000 	.word	0x40022000

08000c3c <_mod_led_quick_toggle>:

void _mod_led_quick_toggle(int count)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < count; i++) {
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	e008      	b.n	8000c5c <_mod_led_quick_toggle+0x20>
    mod_toggle_led1();
 8000c4a:	f7ff ffed 	bl	8000c28 <mod_toggle_led1>
    HAL_Delay(500);
 8000c4e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c52:	f000 f90d 	bl	8000e70 <HAL_Delay>
  for (int i = 0; i < count; i++) {
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	dbf2      	blt.n	8000c4a <_mod_led_quick_toggle+0xe>
  }
}
 8000c64:	bf00      	nop
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <mod_send_usb_test_data>:

void mod_send_usb_test_data(void)
{
 8000c70:	b5b0      	push	{r4, r5, r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
  uint8_t ret;
  char testStr[] = "Test msg from STM32F7 !\n";
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <mod_send_usb_test_data+0x48>)
 8000c78:	1d3c      	adds	r4, r7, #4
 8000c7a:	461d      	mov	r5, r3
 8000c7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c84:	c403      	stmia	r4!, {r0, r1}
 8000c86:	7022      	strb	r2, [r4, #0]

  ret = CDC_Transmit_FS(testStr, strlen(testStr));
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fac0 	bl	8000210 <strlen>
 8000c90:	4603      	mov	r3, r0
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	4611      	mov	r1, r2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f00a fa65 	bl	800b168 <CDC_Transmit_FS>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	77fb      	strb	r3, [r7, #31]
  if (ret != USBD_OK) {
 8000ca2:	7ffb      	ldrb	r3, [r7, #31]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d002      	beq.n	8000cae <mod_send_usb_test_data+0x3e>
    _mod_led_quick_toggle(2);
 8000ca8:	2002      	movs	r0, #2
 8000caa:	f7ff ffc7 	bl	8000c3c <_mod_led_quick_toggle>
  }
}
 8000cae:	bf00      	nop
 8000cb0:	3720      	adds	r7, #32
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bdb0      	pop	{r4, r5, r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	0800be9c 	.word	0x0800be9c

08000cbc <mod_send_uart_test_logs>:

void mod_send_uart_test_logs(UART_HandleTypeDef *uart)
{
 8000cbc:	b5b0      	push	{r4, r5, r7, lr}
 8000cbe:	b08a      	sub	sp, #40	@ 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  char testStr[] = "Test log from STM32F7 !\n";
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <mod_send_uart_test_logs+0x54>)
 8000cc6:	f107 040c 	add.w	r4, r7, #12
 8000cca:	461d      	mov	r5, r3
 8000ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cd4:	c403      	stmia	r4!, {r0, r1}
 8000cd6:	7022      	strb	r2, [r4, #0]

  ret = HAL_UART_Transmit(uart, testStr, strlen(testStr), 300);
 8000cd8:	f107 030c 	add.w	r3, r7, #12
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fa97 	bl	8000210 <strlen>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	f107 010c 	add.w	r1, r7, #12
 8000cea:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f003 fa86 	bl	8004200 <HAL_UART_Transmit>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (ret != HAL_OK) {
 8000cfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d002      	beq.n	8000d08 <mod_send_uart_test_logs+0x4c>
    _mod_led_quick_toggle(4);
 8000d02:	2004      	movs	r0, #4
 8000d04:	f7ff ff9a 	bl	8000c3c <_mod_led_quick_toggle>
  }
}
 8000d08:	bf00      	nop
 8000d0a:	3728      	adds	r7, #40	@ 0x28
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d10:	0800beb8 	.word	0x0800beb8

08000d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d1c:	4a14      	ldr	r2, [pc, #80]	@ (8000d70 <_sbrk+0x5c>)
 8000d1e:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <_sbrk+0x60>)
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d28:	4b13      	ldr	r3, [pc, #76]	@ (8000d78 <_sbrk+0x64>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d102      	bne.n	8000d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d30:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <_sbrk+0x64>)
 8000d32:	4a12      	ldr	r2, [pc, #72]	@ (8000d7c <_sbrk+0x68>)
 8000d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d36:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <_sbrk+0x64>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d207      	bcs.n	8000d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d44:	f00b f814 	bl	800bd70 <__errno>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d52:	e009      	b.n	8000d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d54:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d5a:	4b07      	ldr	r3, [pc, #28]	@ (8000d78 <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	4a05      	ldr	r2, [pc, #20]	@ (8000d78 <_sbrk+0x64>)
 8000d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d66:	68fb      	ldr	r3, [r7, #12]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20050000 	.word	0x20050000
 8000d74:	00000400 	.word	0x00000400
 8000d78:	200002dc 	.word	0x200002dc
 8000d7c:	200067f8 	.word	0x200067f8

08000d80 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <SystemInit+0x20>)
 8000d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d8a:	4a05      	ldr	r2, [pc, #20]	@ (8000da0 <SystemInit+0x20>)
 8000d8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000da4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ddc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000da8:	480d      	ldr	r0, [pc, #52]	@ (8000de0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000daa:	490e      	ldr	r1, [pc, #56]	@ (8000de4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dac:	4a0e      	ldr	r2, [pc, #56]	@ (8000de8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000dec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dc0:	4c0b      	ldr	r4, [pc, #44]	@ (8000df0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dce:	f7ff ffd7 	bl	8000d80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dd2:	f00a ffd3 	bl	800bd7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd6:	f7ff fc05 	bl	80005e4 <main>
  bx  lr    
 8000dda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ddc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de4:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000de8:	0800bf80 	.word	0x0800bf80
  ldr r2, =_sbss
 8000dec:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000df0:	200067f4 	.word	0x200067f4

08000df4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC_IRQHandler>
	...

08000df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000e2c <HAL_Init+0x34>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0a      	ldr	r2, [pc, #40]	@ (8000e2c <HAL_Init+0x34>)
 8000e02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e08:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <HAL_Init+0x34>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	@ (8000e2c <HAL_Init+0x34>)
 8000e0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 f8fc 	bl	8001012 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1a:	200f      	movs	r0, #15
 8000e1c:	f7ff fe5c 	bl	8000ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e20:	f7ff fd62 	bl	80008e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023c00 	.word	0x40023c00

08000e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e34:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <HAL_IncTick+0x20>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <HAL_IncTick+0x24>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a04      	ldr	r2, [pc, #16]	@ (8000e54 <HAL_IncTick+0x24>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000008 	.word	0x20000008
 8000e54:	200002e0 	.word	0x200002e0

08000e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b03      	ldr	r3, [pc, #12]	@ (8000e6c <HAL_GetTick+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	200002e0 	.word	0x200002e0

08000e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e78:	f7ff ffee 	bl	8000e58 <HAL_GetTick>
 8000e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e88:	d005      	beq.n	8000e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <HAL_Delay+0x44>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4413      	add	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e96:	bf00      	nop
 8000e98:	f7ff ffde 	bl	8000e58 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d8f7      	bhi.n	8000e98 <HAL_Delay+0x28>
  {
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000008 	.word	0x20000008

08000eb8 <__NVIC_SetPriorityGrouping>:
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <__NVIC_SetPriorityGrouping+0x40>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	@ (8000ef8 <__NVIC_SetPriorityGrouping+0x40>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00
 8000efc:	05fa0000 	.word	0x05fa0000

08000f00 <__NVIC_GetPriorityGrouping>:
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f04:	4b04      	ldr	r3, [pc, #16]	@ (8000f18 <__NVIC_GetPriorityGrouping+0x18>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	0a1b      	lsrs	r3, r3, #8
 8000f0a:	f003 0307 	and.w	r3, r3, #7
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_EnableIRQ>:
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	db0b      	blt.n	8000f46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	f003 021f 	and.w	r2, r3, #31
 8000f34:	4907      	ldr	r1, [pc, #28]	@ (8000f54 <__NVIC_EnableIRQ+0x38>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	095b      	lsrs	r3, r3, #5
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000e100 	.word	0xe000e100

08000f58 <__NVIC_SetPriority>:
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	db0a      	blt.n	8000f82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	490c      	ldr	r1, [pc, #48]	@ (8000fa4 <__NVIC_SetPriority+0x4c>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	0112      	lsls	r2, r2, #4
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000f80:	e00a      	b.n	8000f98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4908      	ldr	r1, [pc, #32]	@ (8000fa8 <__NVIC_SetPriority+0x50>)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	3b04      	subs	r3, #4
 8000f90:	0112      	lsls	r2, r2, #4
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	440b      	add	r3, r1
 8000f96:	761a      	strb	r2, [r3, #24]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000e100 	.word	0xe000e100
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <NVIC_EncodePriority>:
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	@ 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f1c3 0307 	rsb	r3, r3, #7
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	bf28      	it	cs
 8000fca:	2304      	movcs	r3, #4
 8000fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d902      	bls.n	8000fdc <NVIC_EncodePriority+0x30>
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3b03      	subs	r3, #3
 8000fda:	e000      	b.n	8000fde <NVIC_EncodePriority+0x32>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43da      	mvns	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	401a      	ands	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffe:	43d9      	mvns	r1, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	4313      	orrs	r3, r2
}
 8001006:	4618      	mov	r0, r3
 8001008:	3724      	adds	r7, #36	@ 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ff4c 	bl	8000eb8 <__NVIC_SetPriorityGrouping>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800103a:	f7ff ff61 	bl	8000f00 <__NVIC_GetPriorityGrouping>
 800103e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	68b9      	ldr	r1, [r7, #8]
 8001044:	6978      	ldr	r0, [r7, #20]
 8001046:	f7ff ffb1 	bl	8000fac <NVIC_EncodePriority>
 800104a:	4602      	mov	r2, r0
 800104c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001050:	4611      	mov	r1, r2
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff80 	bl	8000f58 <__NVIC_SetPriority>
}
 8001058:	bf00      	nop
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ff54 	bl	8000f1c <__NVIC_EnableIRQ>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	@ 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
 800109a:	e175      	b.n	8001388 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800109c:	2201      	movs	r2, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	f040 8164 	bne.w	8001382 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d005      	beq.n	80010d2 <HAL_GPIO_Init+0x56>
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d130      	bne.n	8001134 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68da      	ldr	r2, [r3, #12]
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001108:	2201      	movs	r2, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	091b      	lsrs	r3, r3, #4
 800111e:	f003 0201 	and.w	r2, r3, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b03      	cmp	r3, #3
 800113e:	d017      	beq.n	8001170 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d123      	bne.n	80011c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	08da      	lsrs	r2, r3, #3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3208      	adds	r2, #8
 8001184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	220f      	movs	r2, #15
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	691a      	ldr	r2, [r3, #16]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	08da      	lsrs	r2, r3, #3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3208      	adds	r2, #8
 80011be:	69b9      	ldr	r1, [r7, #24]
 80011c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 0203 	and.w	r2, r3, #3
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 80be 	beq.w	8001382 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	4b66      	ldr	r3, [pc, #408]	@ (80013a0 <HAL_GPIO_Init+0x324>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120a:	4a65      	ldr	r2, [pc, #404]	@ (80013a0 <HAL_GPIO_Init+0x324>)
 800120c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001210:	6453      	str	r3, [r2, #68]	@ 0x44
 8001212:	4b63      	ldr	r3, [pc, #396]	@ (80013a0 <HAL_GPIO_Init+0x324>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800121e:	4a61      	ldr	r2, [pc, #388]	@ (80013a4 <HAL_GPIO_Init+0x328>)
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	3302      	adds	r3, #2
 8001226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	220f      	movs	r2, #15
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a58      	ldr	r2, [pc, #352]	@ (80013a8 <HAL_GPIO_Init+0x32c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d037      	beq.n	80012ba <HAL_GPIO_Init+0x23e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a57      	ldr	r2, [pc, #348]	@ (80013ac <HAL_GPIO_Init+0x330>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d031      	beq.n	80012b6 <HAL_GPIO_Init+0x23a>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a56      	ldr	r2, [pc, #344]	@ (80013b0 <HAL_GPIO_Init+0x334>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d02b      	beq.n	80012b2 <HAL_GPIO_Init+0x236>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a55      	ldr	r2, [pc, #340]	@ (80013b4 <HAL_GPIO_Init+0x338>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d025      	beq.n	80012ae <HAL_GPIO_Init+0x232>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a54      	ldr	r2, [pc, #336]	@ (80013b8 <HAL_GPIO_Init+0x33c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d01f      	beq.n	80012aa <HAL_GPIO_Init+0x22e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a53      	ldr	r2, [pc, #332]	@ (80013bc <HAL_GPIO_Init+0x340>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d019      	beq.n	80012a6 <HAL_GPIO_Init+0x22a>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a52      	ldr	r2, [pc, #328]	@ (80013c0 <HAL_GPIO_Init+0x344>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d013      	beq.n	80012a2 <HAL_GPIO_Init+0x226>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a51      	ldr	r2, [pc, #324]	@ (80013c4 <HAL_GPIO_Init+0x348>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d00d      	beq.n	800129e <HAL_GPIO_Init+0x222>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a50      	ldr	r2, [pc, #320]	@ (80013c8 <HAL_GPIO_Init+0x34c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d007      	beq.n	800129a <HAL_GPIO_Init+0x21e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4f      	ldr	r2, [pc, #316]	@ (80013cc <HAL_GPIO_Init+0x350>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d101      	bne.n	8001296 <HAL_GPIO_Init+0x21a>
 8001292:	2309      	movs	r3, #9
 8001294:	e012      	b.n	80012bc <HAL_GPIO_Init+0x240>
 8001296:	230a      	movs	r3, #10
 8001298:	e010      	b.n	80012bc <HAL_GPIO_Init+0x240>
 800129a:	2308      	movs	r3, #8
 800129c:	e00e      	b.n	80012bc <HAL_GPIO_Init+0x240>
 800129e:	2307      	movs	r3, #7
 80012a0:	e00c      	b.n	80012bc <HAL_GPIO_Init+0x240>
 80012a2:	2306      	movs	r3, #6
 80012a4:	e00a      	b.n	80012bc <HAL_GPIO_Init+0x240>
 80012a6:	2305      	movs	r3, #5
 80012a8:	e008      	b.n	80012bc <HAL_GPIO_Init+0x240>
 80012aa:	2304      	movs	r3, #4
 80012ac:	e006      	b.n	80012bc <HAL_GPIO_Init+0x240>
 80012ae:	2303      	movs	r3, #3
 80012b0:	e004      	b.n	80012bc <HAL_GPIO_Init+0x240>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e002      	b.n	80012bc <HAL_GPIO_Init+0x240>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <HAL_GPIO_Init+0x240>
 80012ba:	2300      	movs	r3, #0
 80012bc:	69fa      	ldr	r2, [r7, #28]
 80012be:	f002 0203 	and.w	r2, r2, #3
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	4093      	lsls	r3, r2
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012cc:	4935      	ldr	r1, [pc, #212]	@ (80013a4 <HAL_GPIO_Init+0x328>)
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012da:	4b3d      	ldr	r3, [pc, #244]	@ (80013d0 <HAL_GPIO_Init+0x354>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012fe:	4a34      	ldr	r2, [pc, #208]	@ (80013d0 <HAL_GPIO_Init+0x354>)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001304:	4b32      	ldr	r3, [pc, #200]	@ (80013d0 <HAL_GPIO_Init+0x354>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001328:	4a29      	ldr	r2, [pc, #164]	@ (80013d0 <HAL_GPIO_Init+0x354>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800132e:	4b28      	ldr	r3, [pc, #160]	@ (80013d0 <HAL_GPIO_Init+0x354>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001352:	4a1f      	ldr	r2, [pc, #124]	@ (80013d0 <HAL_GPIO_Init+0x354>)
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001358:	4b1d      	ldr	r3, [pc, #116]	@ (80013d0 <HAL_GPIO_Init+0x354>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800137c:	4a14      	ldr	r2, [pc, #80]	@ (80013d0 <HAL_GPIO_Init+0x354>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3301      	adds	r3, #1
 8001386:	61fb      	str	r3, [r7, #28]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	2b0f      	cmp	r3, #15
 800138c:	f67f ae86 	bls.w	800109c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	3724      	adds	r7, #36	@ 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40013800 	.word	0x40013800
 80013a8:	40020000 	.word	0x40020000
 80013ac:	40020400 	.word	0x40020400
 80013b0:	40020800 	.word	0x40020800
 80013b4:	40020c00 	.word	0x40020c00
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40021400 	.word	0x40021400
 80013c0:	40021800 	.word	0x40021800
 80013c4:	40021c00 	.word	0x40021c00
 80013c8:	40022000 	.word	0x40022000
 80013cc:	40022400 	.word	0x40022400
 80013d0:	40013c00 	.word	0x40013c00

080013d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	807b      	strh	r3, [r7, #2]
 80013e0:	4613      	mov	r3, r2
 80013e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e4:	787b      	ldrb	r3, [r7, #1]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ea:	887a      	ldrh	r2, [r7, #2]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80013f0:	e003      	b.n	80013fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80013f2:	887b      	ldrh	r3, [r7, #2]
 80013f4:	041a      	lsls	r2, r3, #16
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	619a      	str	r2, [r3, #24]
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001406:	b480      	push	{r7}
 8001408:	b085      	sub	sp, #20
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	460b      	mov	r3, r1
 8001410:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001418:	887a      	ldrh	r2, [r7, #2]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4013      	ands	r3, r2
 800141e:	041a      	lsls	r2, r3, #16
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	43d9      	mvns	r1, r3
 8001424:	887b      	ldrh	r3, [r7, #2]
 8001426:	400b      	ands	r3, r1
 8001428:	431a      	orrs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	619a      	str	r2, [r3, #24]
}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800143a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143c:	b08f      	sub	sp, #60	@ 0x3c
 800143e:	af0a      	add	r7, sp, #40	@ 0x28
 8001440:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d101      	bne.n	800144c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e116      	b.n	800167a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d106      	bne.n	800146c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f009 ffd8 	bl	800b41c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2203      	movs	r2, #3
 8001470:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800147c:	2b00      	cmp	r3, #0
 800147e:	d102      	bne.n	8001486 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f003 fc4b 	bl	8004d26 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	687e      	ldr	r6, [r7, #4]
 8001498:	466d      	mov	r5, sp
 800149a:	f106 0410 	add.w	r4, r6, #16
 800149e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80014ae:	1d33      	adds	r3, r6, #4
 80014b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014b2:	6838      	ldr	r0, [r7, #0]
 80014b4:	f003 fb2c 	bl	8004b10 <USB_CoreInit>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d005      	beq.n	80014ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2202      	movs	r2, #2
 80014c2:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e0d7      	b.n	800167a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f003 fc39 	bl	8004d48 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	73fb      	strb	r3, [r7, #15]
 80014da:	e04a      	b.n	8001572 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	4413      	add	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	333d      	adds	r3, #61	@ 0x3d
 80014ec:	2201      	movs	r2, #1
 80014ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4413      	add	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	333c      	adds	r3, #60	@ 0x3c
 8001500:	7bfa      	ldrb	r2, [r7, #15]
 8001502:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	b298      	uxth	r0, r3
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	4413      	add	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	3344      	adds	r3, #68	@ 0x44
 8001518:	4602      	mov	r2, r0
 800151a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800151c:	7bfa      	ldrb	r2, [r7, #15]
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	4613      	mov	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	4413      	add	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	3340      	adds	r3, #64	@ 0x40
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	4413      	add	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	3348      	adds	r3, #72	@ 0x48
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001544:	7bfa      	ldrb	r2, [r7, #15]
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	334c      	adds	r3, #76	@ 0x4c
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	3354      	adds	r3, #84	@ 0x54
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	3301      	adds	r3, #1
 8001570:	73fb      	strb	r3, [r7, #15]
 8001572:	7bfa      	ldrb	r2, [r7, #15]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	429a      	cmp	r2, r3
 800157a:	d3af      	bcc.n	80014dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800157c:	2300      	movs	r3, #0
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	e044      	b.n	800160c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	4413      	add	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	4413      	add	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80015aa:	7bfa      	ldrb	r2, [r7, #15]
 80015ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015ae:	7bfa      	ldrb	r2, [r7, #15]
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	4413      	add	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	440b      	add	r3, r1
 80015bc:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015c4:	7bfa      	ldrb	r2, [r7, #15]
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	4413      	add	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	4413      	add	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	440b      	add	r3, r1
 80015e8:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	4413      	add	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	3301      	adds	r3, #1
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	429a      	cmp	r2, r3
 8001614:	d3b5      	bcc.n	8001582 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	687e      	ldr	r6, [r7, #4]
 800161e:	466d      	mov	r5, sp
 8001620:	f106 0410 	add.w	r4, r6, #16
 8001624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800162a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800162c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001630:	e885 0003 	stmia.w	r5, {r0, r1}
 8001634:	1d33      	adds	r3, r6, #4
 8001636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001638:	6838      	ldr	r0, [r7, #0]
 800163a:	f003 fbd1 	bl	8004de0 <USB_DevInit>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2202      	movs	r2, #2
 8001648:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e014      	b.n	800167a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001664:	2b01      	cmp	r3, #1
 8001666:	d102      	bne.n	800166e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f001 f97b 	bl	8002964 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f004 fd1f 	bl	80060b6 <USB_DevDisconnect>

  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001682 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8001690:	2b01      	cmp	r3, #1
 8001692:	d101      	bne.n	8001698 <HAL_PCD_Start+0x16>
 8001694:	2302      	movs	r3, #2
 8001696:	e012      	b.n	80016be <HAL_PCD_Start+0x3c>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f003 fb2d 	bl	8004d04 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f004 fce0 	bl	8006074 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016c6:	b590      	push	{r4, r7, lr}
 80016c8:	b08d      	sub	sp, #52	@ 0x34
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016d4:	6a3b      	ldr	r3, [r7, #32]
 80016d6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f004 fd9e 	bl	800621e <USB_GetMode>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f040 84b7 	bne.w	8002058 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f004 fd02 	bl	80060f8 <USB_ReadInterrupts>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 84ad 	beq.w	8002056 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f004 fcef 	bl	80060f8 <USB_ReadInterrupts>
 800171a:	4603      	mov	r3, r0
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b02      	cmp	r3, #2
 8001722:	d107      	bne.n	8001734 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	695a      	ldr	r2, [r3, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f002 0202 	and.w	r2, r2, #2
 8001732:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f004 fcdd 	bl	80060f8 <USB_ReadInterrupts>
 800173e:	4603      	mov	r3, r0
 8001740:	f003 0310 	and.w	r3, r3, #16
 8001744:	2b10      	cmp	r3, #16
 8001746:	d161      	bne.n	800180c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	699a      	ldr	r2, [r3, #24]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0210 	bic.w	r2, r2, #16
 8001756:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001758:	6a3b      	ldr	r3, [r7, #32]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	f003 020f 	and.w	r2, r3, #15
 8001764:	4613      	mov	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	4413      	add	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	4413      	add	r3, r2
 8001774:	3304      	adds	r3, #4
 8001776:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	0c5b      	lsrs	r3, r3, #17
 800177c:	f003 030f 	and.w	r3, r3, #15
 8001780:	2b02      	cmp	r3, #2
 8001782:	d124      	bne.n	80017ce <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800178a:	4013      	ands	r3, r2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d035      	beq.n	80017fc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	091b      	lsrs	r3, r3, #4
 8001798:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800179a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800179e:	b29b      	uxth	r3, r3
 80017a0:	461a      	mov	r2, r3
 80017a2:	6a38      	ldr	r0, [r7, #32]
 80017a4:	f004 fb14 	bl	8005dd0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	691a      	ldr	r2, [r3, #16]
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	091b      	lsrs	r3, r3, #4
 80017b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017b4:	441a      	add	r2, r3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	6a1a      	ldr	r2, [r3, #32]
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017c6:	441a      	add	r2, r3
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	621a      	str	r2, [r3, #32]
 80017cc:	e016      	b.n	80017fc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	0c5b      	lsrs	r3, r3, #17
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	2b06      	cmp	r3, #6
 80017d8:	d110      	bne.n	80017fc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80017e0:	2208      	movs	r2, #8
 80017e2:	4619      	mov	r1, r3
 80017e4:	6a38      	ldr	r0, [r7, #32]
 80017e6:	f004 faf3 	bl	8005dd0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	6a1a      	ldr	r2, [r3, #32]
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017f6:	441a      	add	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	699a      	ldr	r2, [r3, #24]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 0210 	orr.w	r2, r2, #16
 800180a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f004 fc71 	bl	80060f8 <USB_ReadInterrupts>
 8001816:	4603      	mov	r3, r0
 8001818:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800181c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001820:	f040 80a7 	bne.w	8001972 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001824:	2300      	movs	r3, #0
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f004 fc76 	bl	800611e <USB_ReadDevAllOutEpInterrupt>
 8001832:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001834:	e099      	b.n	800196a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 808e 	beq.w	800195e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f004 fc9a 	bl	8006186 <USB_ReadDevOutEPInterrupt>
 8001852:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00c      	beq.n	8001878 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800185e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001860:	015a      	lsls	r2, r3, #5
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	4413      	add	r3, r2
 8001866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800186a:	461a      	mov	r2, r3
 800186c:	2301      	movs	r3, #1
 800186e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001870:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 fef0 	bl	8002658 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00c      	beq.n	800189c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001884:	015a      	lsls	r2, r3, #5
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	4413      	add	r3, r2
 800188a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800188e:	461a      	mov	r2, r3
 8001890:	2308      	movs	r3, #8
 8001892:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001894:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 ffc6 	bl	8002828 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	f003 0310 	and.w	r3, r3, #16
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d008      	beq.n	80018b8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	015a      	lsls	r2, r3, #5
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	4413      	add	r3, r2
 80018ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018b2:	461a      	mov	r2, r3
 80018b4:	2310      	movs	r3, #16
 80018b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d030      	beq.n	8001924 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ca:	2b80      	cmp	r3, #128	@ 0x80
 80018cc:	d109      	bne.n	80018e2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018e0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80018e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018e4:	4613      	mov	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4413      	add	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	4413      	add	r3, r2
 80018f4:	3304      	adds	r3, #4
 80018f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	78db      	ldrb	r3, [r3, #3]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d108      	bne.n	8001912 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	2200      	movs	r2, #0
 8001904:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001908:	b2db      	uxtb	r3, r3
 800190a:	4619      	mov	r1, r3
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f009 feb9 	bl	800b684 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001914:	015a      	lsls	r2, r3, #5
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	4413      	add	r3, r2
 800191a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800191e:	461a      	mov	r2, r3
 8001920:	2302      	movs	r3, #2
 8001922:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	f003 0320 	and.w	r3, r3, #32
 800192a:	2b00      	cmp	r3, #0
 800192c:	d008      	beq.n	8001940 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800192e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001930:	015a      	lsls	r2, r3, #5
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	4413      	add	r3, r2
 8001936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800193a:	461a      	mov	r2, r3
 800193c:	2320      	movs	r3, #32
 800193e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d009      	beq.n	800195e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800194a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194c:	015a      	lsls	r2, r3, #5
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	4413      	add	r3, r2
 8001952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001956:	461a      	mov	r2, r3
 8001958:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800195c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	3301      	adds	r3, #1
 8001962:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001966:	085b      	lsrs	r3, r3, #1
 8001968:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800196a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800196c:	2b00      	cmp	r3, #0
 800196e:	f47f af62 	bne.w	8001836 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f004 fbbe 	bl	80060f8 <USB_ReadInterrupts>
 800197c:	4603      	mov	r3, r0
 800197e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001982:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001986:	f040 80db 	bne.w	8001b40 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f004 fbdf 	bl	8006152 <USB_ReadDevAllInEpInterrupt>
 8001994:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001996:	2300      	movs	r3, #0
 8001998:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800199a:	e0cd      	b.n	8001b38 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800199c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 80c2 	beq.w	8001b2c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	4611      	mov	r1, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f004 fc05 	bl	80061c2 <USB_ReadDevInEPInterrupt>
 80019b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d057      	beq.n	8001a74 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80019c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	2201      	movs	r2, #1
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	43db      	mvns	r3, r3
 80019de:	69f9      	ldr	r1, [r7, #28]
 80019e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80019e4:	4013      	ands	r3, r2
 80019e6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ea:	015a      	lsls	r2, r3, #5
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	4413      	add	r3, r2
 80019f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019f4:	461a      	mov	r2, r3
 80019f6:	2301      	movs	r3, #1
 80019f8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d132      	bne.n	8001a68 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a06:	4613      	mov	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	334c      	adds	r3, #76	@ 0x4c
 8001a12:	6819      	ldr	r1, [r3, #0]
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a18:	4613      	mov	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4403      	add	r3, r0
 8001a22:	3348      	adds	r3, #72	@ 0x48
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4419      	add	r1, r3
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4403      	add	r3, r0
 8001a36:	334c      	adds	r3, #76	@ 0x4c
 8001a38:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d113      	bne.n	8001a68 <HAL_PCD_IRQHandler+0x3a2>
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a44:	4613      	mov	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	4413      	add	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	3354      	adds	r3, #84	@ 0x54
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d108      	bne.n	8001a68 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6818      	ldr	r0, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8001a60:	461a      	mov	r2, r3
 8001a62:	2101      	movs	r1, #1
 8001a64:	f004 fc0e 	bl	8006284 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f009 fd83 	bl	800b57a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d008      	beq.n	8001a90 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a80:	015a      	lsls	r2, r3, #5
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	4413      	add	r3, r2
 8001a86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	2308      	movs	r3, #8
 8001a8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f003 0310 	and.w	r3, r3, #16
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d008      	beq.n	8001aac <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9c:	015a      	lsls	r2, r3, #5
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	2310      	movs	r3, #16
 8001aaa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d008      	beq.n	8001ac8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab8:	015a      	lsls	r2, r3, #5
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	4413      	add	r3, r2
 8001abe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	2340      	movs	r3, #64	@ 0x40
 8001ac6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d023      	beq.n	8001b1a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001ad2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ad4:	6a38      	ldr	r0, [r7, #32]
 8001ad6:	f003 fae1 	bl	800509c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001adc:	4613      	mov	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	3338      	adds	r3, #56	@ 0x38
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	3304      	adds	r3, #4
 8001aec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	78db      	ldrb	r3, [r3, #3]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d108      	bne.n	8001b08 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	2200      	movs	r2, #0
 8001afa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	4619      	mov	r1, r3
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f009 fdd0 	bl	800b6a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0a:	015a      	lsls	r2, r3, #5
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	4413      	add	r3, r2
 8001b10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b14:	461a      	mov	r2, r3
 8001b16:	2302      	movs	r3, #2
 8001b18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001b24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 fd08 	bl	800253c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2e:	3301      	adds	r3, #1
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b34:	085b      	lsrs	r3, r3, #1
 8001b36:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f47f af2e 	bne.w	800199c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f004 fad7 	bl	80060f8 <USB_ReadInterrupts>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001b50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b54:	d122      	bne.n	8001b9c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b64:	f023 0301 	bic.w	r3, r3, #1
 8001b68:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d108      	bne.n	8001b86 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f009 ff4a 	bl	800ba18 <HAL_PCDEx_LPM_Callback>
 8001b84:	e002      	b.n	8001b8c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f009 fd6e 	bl	800b668 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695a      	ldr	r2, [r3, #20]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001b9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f004 faa9 	bl	80060f8 <USB_ReadInterrupts>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001bb0:	d112      	bne.n	8001bd8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d102      	bne.n	8001bc8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f009 fd2a 	bl	800b61c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	695a      	ldr	r2, [r3, #20]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001bd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f004 fa8b 	bl	80060f8 <USB_ReadInterrupts>
 8001be2:	4603      	mov	r3, r0
 8001be4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001be8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001bec:	d121      	bne.n	8001c32 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	695a      	ldr	r2, [r3, #20]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8001bfc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d111      	bne.n	8001c2c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	f003 020f 	and.w	r2, r3, #15
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001c22:	2101      	movs	r1, #1
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f009 fef7 	bl	800ba18 <HAL_PCDEx_LPM_Callback>
 8001c2a:	e002      	b.n	8001c32 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f009 fcf5 	bl	800b61c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f004 fa5e 	bl	80060f8 <USB_ReadInterrupts>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c46:	f040 80b7 	bne.w	8001db8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	69fa      	ldr	r2, [r7, #28]
 8001c54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c58:	f023 0301 	bic.w	r3, r3, #1
 8001c5c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2110      	movs	r1, #16
 8001c64:	4618      	mov	r0, r3
 8001c66:	f003 fa19 	bl	800509c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c6e:	e046      	b.n	8001cfe <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c72:	015a      	lsls	r2, r3, #5
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	4413      	add	r3, r2
 8001c78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001c82:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c86:	015a      	lsls	r2, r3, #5
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c94:	0151      	lsls	r1, r2, #5
 8001c96:	69fa      	ldr	r2, [r7, #28]
 8001c98:	440a      	add	r2, r1
 8001c9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001c9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001ca2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ca6:	015a      	lsls	r2, r3, #5
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	4413      	add	r3, r2
 8001cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001cb6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cba:	015a      	lsls	r2, r3, #5
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001cc8:	0151      	lsls	r1, r2, #5
 8001cca:	69fa      	ldr	r2, [r7, #28]
 8001ccc:	440a      	add	r2, r1
 8001cce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001cd2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001cd6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cda:	015a      	lsls	r2, r3, #5
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	4413      	add	r3, r2
 8001ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ce8:	0151      	lsls	r1, r2, #5
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	440a      	add	r2, r1
 8001cee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001cf2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001cf6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d3b3      	bcc.n	8001c70 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	69fa      	ldr	r2, [r7, #28]
 8001d12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d16:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001d1a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d016      	beq.n	8001d52 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d2e:	69fa      	ldr	r2, [r7, #28]
 8001d30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d34:	f043 030b 	orr.w	r3, r3, #11
 8001d38:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d44:	69fa      	ldr	r2, [r7, #28]
 8001d46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d4a:	f043 030b 	orr.w	r3, r3, #11
 8001d4e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d50:	e015      	b.n	8001d7e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d60:	4619      	mov	r1, r3
 8001d62:	f242 032b 	movw	r3, #8235	@ 0x202b
 8001d66:	4313      	orrs	r3, r2
 8001d68:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	69fa      	ldr	r2, [r7, #28]
 8001d74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d78:	f043 030b 	orr.w	r3, r3, #11
 8001d7c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	69fa      	ldr	r2, [r7, #28]
 8001d88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d8c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001d90:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6818      	ldr	r0, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001da2:	461a      	mov	r2, r3
 8001da4:	f004 fa6e 	bl	8006284 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695a      	ldr	r2, [r3, #20]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001db6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f004 f99b 	bl	80060f8 <USB_ReadInterrupts>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dcc:	d124      	bne.n	8001e18 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f004 fa32 	bl	800623c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f003 f9da 	bl	8005196 <USB_GetDevSpeed>
 8001de2:	4603      	mov	r3, r0
 8001de4:	461a      	mov	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681c      	ldr	r4, [r3, #0]
 8001dee:	f001 fa83 	bl	80032f8 <HAL_RCC_GetHCLKFreq>
 8001df2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f002 fedf 	bl	8004bc0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f009 fbe1 	bl	800b5ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695a      	ldr	r2, [r3, #20]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001e16:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f004 f96b 	bl	80060f8 <USB_ReadInterrupts>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d10a      	bne.n	8001e42 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f009 fbbe 	bl	800b5ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	695a      	ldr	r2, [r3, #20]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f002 0208 	and.w	r2, r2, #8
 8001e40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f004 f956 	bl	80060f8 <USB_ReadInterrupts>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e52:	2b80      	cmp	r3, #128	@ 0x80
 8001e54:	d122      	bne.n	8001e9c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e62:	2301      	movs	r3, #1
 8001e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e66:	e014      	b.n	8001e92 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4413      	add	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d105      	bne.n	8001e8c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	4619      	mov	r1, r3
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 fb27 	bl	80024da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8e:	3301      	adds	r3, #1
 8001e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d3e5      	bcc.n	8001e68 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f004 f929 	bl	80060f8 <USB_ReadInterrupts>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001eb0:	d13b      	bne.n	8001f2a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eb6:	e02b      	b.n	8001f10 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ecc:	4613      	mov	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	3340      	adds	r3, #64	@ 0x40
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d115      	bne.n	8001f0a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001ede:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	da12      	bge.n	8001f0a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ee8:	4613      	mov	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	333f      	adds	r3, #63	@ 0x3f
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	4619      	mov	r1, r3
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 fae8 	bl	80024da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d3ce      	bcc.n	8001eb8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	695a      	ldr	r2, [r3, #20]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001f28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f004 f8e2 	bl	80060f8 <USB_ReadInterrupts>
 8001f34:	4603      	mov	r3, r0
 8001f36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001f3e:	d155      	bne.n	8001fec <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f40:	2301      	movs	r3, #1
 8001f42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f44:	e045      	b.n	8001fd2 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	4413      	add	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	440b      	add	r3, r1
 8001f64:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d12e      	bne.n	8001fcc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f6e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	da2b      	bge.n	8001fcc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8001f80:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d121      	bne.n	8001fcc <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4413      	add	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	440b      	add	r3, r1
 8001f96:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10a      	bne.n	8001fcc <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	69fa      	ldr	r2, [r7, #28]
 8001fc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fc4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fc8:	6053      	str	r3, [r2, #4]
            break;
 8001fca:	e007      	b.n	8001fdc <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fce:	3301      	adds	r3, #1
 8001fd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d3b4      	bcc.n	8001f46 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	695a      	ldr	r2, [r3, #20]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001fea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f004 f881 	bl	80060f8 <USB_ReadInterrupts>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002000:	d10a      	bne.n	8002018 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f009 fb62 	bl	800b6cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695a      	ldr	r2, [r3, #20]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002016:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f004 f86b 	bl	80060f8 <USB_ReadInterrupts>
 8002022:	4603      	mov	r3, r0
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b04      	cmp	r3, #4
 800202a:	d115      	bne.n	8002058 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	2b00      	cmp	r3, #0
 800203c:	d002      	beq.n	8002044 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f009 fb52 	bl	800b6e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6859      	ldr	r1, [r3, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	430a      	orrs	r2, r1
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	e000      	b.n	8002058 <HAL_PCD_IRQHandler+0x992>
      return;
 8002056:	bf00      	nop
    }
  }
}
 8002058:	3734      	adds	r7, #52	@ 0x34
 800205a:	46bd      	mov	sp, r7
 800205c:	bd90      	pop	{r4, r7, pc}

0800205e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	460b      	mov	r3, r1
 8002068:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_PCD_SetAddress+0x1a>
 8002074:	2302      	movs	r3, #2
 8002076:	e013      	b.n	80020a0 <HAL_PCD_SetAddress+0x42>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	78fa      	ldrb	r2, [r7, #3]
 8002084:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	78fa      	ldrb	r2, [r7, #3]
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f003 ffc9 	bl	8006028 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	4608      	mov	r0, r1
 80020b2:	4611      	mov	r1, r2
 80020b4:	461a      	mov	r2, r3
 80020b6:	4603      	mov	r3, r0
 80020b8:	70fb      	strb	r3, [r7, #3]
 80020ba:	460b      	mov	r3, r1
 80020bc:	803b      	strh	r3, [r7, #0]
 80020be:	4613      	mov	r3, r2
 80020c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	da0f      	bge.n	80020ee <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ce:	78fb      	ldrb	r3, [r7, #3]
 80020d0:	f003 020f 	and.w	r2, r3, #15
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	3338      	adds	r3, #56	@ 0x38
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	3304      	adds	r3, #4
 80020e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2201      	movs	r2, #1
 80020ea:	705a      	strb	r2, [r3, #1]
 80020ec:	e00f      	b.n	800210e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	f003 020f 	and.w	r2, r3, #15
 80020f4:	4613      	mov	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4413      	add	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	4413      	add	r3, r2
 8002104:	3304      	adds	r3, #4
 8002106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	f003 030f 	and.w	r3, r3, #15
 8002114:	b2da      	uxtb	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800211a:	883a      	ldrh	r2, [r7, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	78ba      	ldrb	r2, [r7, #2]
 8002124:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	785b      	ldrb	r3, [r3, #1]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d004      	beq.n	8002138 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002138:	78bb      	ldrb	r3, [r7, #2]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d102      	bne.n	8002144 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_PCD_EP_Open+0xaa>
 800214e:	2302      	movs	r3, #2
 8002150:	e00e      	b.n	8002170 <HAL_PCD_EP_Open+0xc8>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68f9      	ldr	r1, [r7, #12]
 8002160:	4618      	mov	r0, r3
 8002162:	f003 f83d 	bl	80051e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 800216e:	7afb      	ldrb	r3, [r7, #11]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002184:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002188:	2b00      	cmp	r3, #0
 800218a:	da0f      	bge.n	80021ac <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	f003 020f 	and.w	r2, r3, #15
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	3338      	adds	r3, #56	@ 0x38
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	4413      	add	r3, r2
 80021a0:	3304      	adds	r3, #4
 80021a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2201      	movs	r2, #1
 80021a8:	705a      	strb	r2, [r3, #1]
 80021aa:	e00f      	b.n	80021cc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	f003 020f 	and.w	r2, r3, #15
 80021b2:	4613      	mov	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4413      	add	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	3304      	adds	r3, #4
 80021c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d101      	bne.n	80021e6 <HAL_PCD_EP_Close+0x6e>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e00e      	b.n	8002204 <HAL_PCD_EP_Close+0x8c>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68f9      	ldr	r1, [r7, #12]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f003 f87b 	bl	80052f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	607a      	str	r2, [r7, #4]
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	460b      	mov	r3, r1
 800221a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800221c:	7afb      	ldrb	r3, [r7, #11]
 800221e:	f003 020f 	and.w	r2, r3, #15
 8002222:	4613      	mov	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	4413      	add	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4413      	add	r3, r2
 8002232:	3304      	adds	r3, #4
 8002234:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2200      	movs	r2, #0
 8002246:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2200      	movs	r2, #0
 800224c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800224e:	7afb      	ldrb	r3, [r7, #11]
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	b2da      	uxtb	r2, r3
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d102      	bne.n	8002268 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002268:	7afb      	ldrb	r3, [r7, #11]
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	2b00      	cmp	r3, #0
 8002270:	d109      	bne.n	8002286 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	6979      	ldr	r1, [r7, #20]
 8002280:	f003 fb62 	bl	8005948 <USB_EP0StartXfer>
 8002284:	e008      	b.n	8002298 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6818      	ldr	r0, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	6979      	ldr	r1, [r7, #20]
 8002294:	f003 f908 	bl	80054a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80022ae:	78fb      	ldrb	r3, [r7, #3]
 80022b0:	f003 020f 	and.w	r2, r3, #15
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4413      	add	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 80022c4:	681b      	ldr	r3, [r3, #0]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b086      	sub	sp, #24
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	603b      	str	r3, [r7, #0]
 80022de:	460b      	mov	r3, r1
 80022e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022e2:	7afb      	ldrb	r3, [r7, #11]
 80022e4:	f003 020f 	and.w	r2, r3, #15
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	3338      	adds	r3, #56	@ 0x38
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4413      	add	r3, r2
 80022f6:	3304      	adds	r3, #4
 80022f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2200      	movs	r2, #0
 800230a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	2201      	movs	r2, #1
 8002310:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002312:	7afb      	ldrb	r3, [r7, #11]
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	b2da      	uxtb	r2, r3
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d102      	bne.n	800232c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800232c:	7afb      	ldrb	r3, [r7, #11]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	2b00      	cmp	r3, #0
 8002334:	d109      	bne.n	800234a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	461a      	mov	r2, r3
 8002342:	6979      	ldr	r1, [r7, #20]
 8002344:	f003 fb00 	bl	8005948 <USB_EP0StartXfer>
 8002348:	e008      	b.n	800235c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	6979      	ldr	r1, [r7, #20]
 8002358:	f003 f8a6 	bl	80054a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	460b      	mov	r3, r1
 8002370:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002372:	78fb      	ldrb	r3, [r7, #3]
 8002374:	f003 020f 	and.w	r2, r3, #15
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	429a      	cmp	r2, r3
 800237e:	d901      	bls.n	8002384 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e050      	b.n	8002426 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002384:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002388:	2b00      	cmp	r3, #0
 800238a:	da0f      	bge.n	80023ac <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	f003 020f 	and.w	r2, r3, #15
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	3338      	adds	r3, #56	@ 0x38
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	3304      	adds	r3, #4
 80023a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2201      	movs	r2, #1
 80023a8:	705a      	strb	r2, [r3, #1]
 80023aa:	e00d      	b.n	80023c8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	4613      	mov	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	3304      	adds	r3, #4
 80023c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2201      	movs	r2, #1
 80023cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ce:	78fb      	ldrb	r3, [r7, #3]
 80023d0:	f003 030f 	and.w	r3, r3, #15
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d101      	bne.n	80023e8 <HAL_PCD_EP_SetStall+0x82>
 80023e4:	2302      	movs	r3, #2
 80023e6:	e01e      	b.n	8002426 <HAL_PCD_EP_SetStall+0xc0>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68f9      	ldr	r1, [r7, #12]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f003 fd42 	bl	8005e80 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10a      	bne.n	800241c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	b2d9      	uxtb	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002416:	461a      	mov	r2, r3
 8002418:	f003 ff34 	bl	8006284 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b084      	sub	sp, #16
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	460b      	mov	r3, r1
 8002438:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	f003 020f 	and.w	r2, r3, #15
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	429a      	cmp	r2, r3
 8002446:	d901      	bls.n	800244c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e042      	b.n	80024d2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800244c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002450:	2b00      	cmp	r3, #0
 8002452:	da0f      	bge.n	8002474 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	f003 020f 	and.w	r2, r3, #15
 800245a:	4613      	mov	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	3338      	adds	r3, #56	@ 0x38
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	4413      	add	r3, r2
 8002468:	3304      	adds	r3, #4
 800246a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2201      	movs	r2, #1
 8002470:	705a      	strb	r2, [r3, #1]
 8002472:	e00f      	b.n	8002494 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	f003 020f 	and.w	r2, r3, #15
 800247a:	4613      	mov	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4413      	add	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	3304      	adds	r3, #4
 800248c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800249a:	78fb      	ldrb	r3, [r7, #3]
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_PCD_EP_ClrStall+0x86>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e00e      	b.n	80024d2 <HAL_PCD_EP_ClrStall+0xa4>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68f9      	ldr	r1, [r7, #12]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f003 fd4a 	bl	8005f5c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	460b      	mov	r3, r1
 80024e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80024e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	da0c      	bge.n	8002508 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ee:	78fb      	ldrb	r3, [r7, #3]
 80024f0:	f003 020f 	and.w	r2, r3, #15
 80024f4:	4613      	mov	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4413      	add	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	3338      	adds	r3, #56	@ 0x38
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	3304      	adds	r3, #4
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	e00c      	b.n	8002522 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	f003 020f 	and.w	r2, r3, #15
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	3304      	adds	r3, #4
 8002520:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68f9      	ldr	r1, [r7, #12]
 8002528:	4618      	mov	r0, r3
 800252a:	f003 fb69 	bl	8005c00 <USB_EPStopXfer>
 800252e:	4603      	mov	r3, r0
 8002530:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002532:	7afb      	ldrb	r3, [r7, #11]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08a      	sub	sp, #40	@ 0x28
 8002540:	af02      	add	r7, sp, #8
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	3338      	adds	r3, #56	@ 0x38
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	4413      	add	r3, r2
 8002560:	3304      	adds	r3, #4
 8002562:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a1a      	ldr	r2, [r3, #32]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	429a      	cmp	r2, r3
 800256e:	d901      	bls.n	8002574 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e06c      	b.n	800264e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	699a      	ldr	r2, [r3, #24]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	429a      	cmp	r2, r3
 8002588:	d902      	bls.n	8002590 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	3303      	adds	r3, #3
 8002594:	089b      	lsrs	r3, r3, #2
 8002596:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002598:	e02b      	b.n	80025f2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	699a      	ldr	r2, [r3, #24]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d902      	bls.n	80025b6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	3303      	adds	r3, #3
 80025ba:	089b      	lsrs	r3, r3, #2
 80025bc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6919      	ldr	r1, [r3, #16]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	4603      	mov	r3, r0
 80025d4:	6978      	ldr	r0, [r7, #20]
 80025d6:	f003 fbbd 	bl	8005d54 <USB_WritePacket>

    ep->xfer_buff  += len;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	691a      	ldr	r2, [r3, #16]
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	441a      	add	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6a1a      	ldr	r2, [r3, #32]
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	441a      	add	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	015a      	lsls	r2, r3, #5
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4413      	add	r3, r2
 80025fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	429a      	cmp	r2, r3
 8002606:	d809      	bhi.n	800261c <PCD_WriteEmptyTxFifo+0xe0>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a1a      	ldr	r2, [r3, #32]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002610:	429a      	cmp	r2, r3
 8002612:	d203      	bcs.n	800261c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1be      	bne.n	800259a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	699a      	ldr	r2, [r3, #24]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	429a      	cmp	r2, r3
 8002626:	d811      	bhi.n	800264c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	2201      	movs	r2, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800263c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	43db      	mvns	r3, r3
 8002642:	6939      	ldr	r1, [r7, #16]
 8002644:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002648:	4013      	ands	r3, r2
 800264a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3720      	adds	r7, #32
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	333c      	adds	r3, #60	@ 0x3c
 8002670:	3304      	adds	r3, #4
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	4413      	add	r3, r2
 800267e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d17b      	bne.n	8002786 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d015      	beq.n	80026c4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	4a61      	ldr	r2, [pc, #388]	@ (8002820 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	f240 80b9 	bls.w	8002814 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80b3 	beq.w	8002814 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026ba:	461a      	mov	r2, r3
 80026bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026c0:	6093      	str	r3, [r2, #8]
 80026c2:	e0a7      	b.n	8002814 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	f003 0320 	and.w	r3, r3, #32
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	015a      	lsls	r2, r3, #5
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	4413      	add	r3, r2
 80026d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026da:	461a      	mov	r2, r3
 80026dc:	2320      	movs	r3, #32
 80026de:	6093      	str	r3, [r2, #8]
 80026e0:	e098      	b.n	8002814 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f040 8093 	bne.w	8002814 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002820 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d90f      	bls.n	8002716 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00a      	beq.n	8002716 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	4413      	add	r3, r2
 8002708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800270c:	461a      	mov	r2, r3
 800270e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002712:	6093      	str	r3, [r2, #8]
 8002714:	e07e      	b.n	8002814 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	4613      	mov	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	4413      	add	r3, r2
 8002728:	3304      	adds	r3, #4
 800272a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	69da      	ldr	r2, [r3, #28]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	0159      	lsls	r1, r3, #5
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	440b      	add	r3, r1
 8002738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002742:	1ad2      	subs	r2, r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d114      	bne.n	8002778 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d109      	bne.n	800276a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002760:	461a      	mov	r2, r3
 8002762:	2101      	movs	r1, #1
 8002764:	f003 fd8e 	bl	8006284 <USB_EP0_OutStart>
 8002768:	e006      	b.n	8002778 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	691a      	ldr	r2, [r3, #16]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	441a      	add	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	4619      	mov	r1, r3
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f008 fee0 	bl	800b544 <HAL_PCD_DataOutStageCallback>
 8002784:	e046      	b.n	8002814 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	4a26      	ldr	r2, [pc, #152]	@ (8002824 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d124      	bne.n	80027d8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027a4:	461a      	mov	r2, r3
 80027a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027aa:	6093      	str	r3, [r2, #8]
 80027ac:	e032      	b.n	8002814 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027c4:	461a      	mov	r2, r3
 80027c6:	2320      	movs	r3, #32
 80027c8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	4619      	mov	r1, r3
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f008 feb7 	bl	800b544 <HAL_PCD_DataOutStageCallback>
 80027d6:	e01d      	b.n	8002814 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d114      	bne.n	8002808 <PCD_EP_OutXfrComplete_int+0x1b0>
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	4613      	mov	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d108      	bne.n	8002808 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002800:	461a      	mov	r2, r3
 8002802:	2100      	movs	r1, #0
 8002804:	f003 fd3e 	bl	8006284 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	4619      	mov	r1, r3
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f008 fe98 	bl	800b544 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3720      	adds	r7, #32
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	4f54300a 	.word	0x4f54300a
 8002824:	4f54310a 	.word	0x4f54310a

08002828 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	333c      	adds	r3, #60	@ 0x3c
 8002840:	3304      	adds	r3, #4
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	015a      	lsls	r2, r3, #5
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4413      	add	r3, r2
 800284e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4a15      	ldr	r2, [pc, #84]	@ (80028b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d90e      	bls.n	800287c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002864:	2b00      	cmp	r3, #0
 8002866:	d009      	beq.n	800287c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4413      	add	r3, r2
 8002870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002874:	461a      	mov	r2, r3
 8002876:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800287a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f008 fe4f 	bl	800b520 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4a0a      	ldr	r2, [pc, #40]	@ (80028b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d90c      	bls.n	80028a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d108      	bne.n	80028a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800289c:	461a      	mov	r2, r3
 800289e:	2101      	movs	r1, #1
 80028a0:	f003 fcf0 	bl	8006284 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	4f54300a 	.word	0x4f54300a

080028b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	70fb      	strb	r3, [r7, #3]
 80028c0:	4613      	mov	r3, r2
 80028c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d107      	bne.n	80028e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80028d2:	883b      	ldrh	r3, [r7, #0]
 80028d4:	0419      	lsls	r1, r3, #16
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	430a      	orrs	r2, r1
 80028de:	629a      	str	r2, [r3, #40]	@ 0x28
 80028e0:	e028      	b.n	8002934 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e8:	0c1b      	lsrs	r3, r3, #16
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	4413      	add	r3, r2
 80028ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80028f0:	2300      	movs	r3, #0
 80028f2:	73fb      	strb	r3, [r7, #15]
 80028f4:	e00d      	b.n	8002912 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	3340      	adds	r3, #64	@ 0x40
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	0c1b      	lsrs	r3, r3, #16
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	4413      	add	r3, r2
 800290a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	3301      	adds	r3, #1
 8002910:	73fb      	strb	r3, [r7, #15]
 8002912:	7bfa      	ldrb	r2, [r7, #15]
 8002914:	78fb      	ldrb	r3, [r7, #3]
 8002916:	3b01      	subs	r3, #1
 8002918:	429a      	cmp	r2, r3
 800291a:	d3ec      	bcc.n	80028f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800291c:	883b      	ldrh	r3, [r7, #0]
 800291e:	0418      	lsls	r0, r3, #16
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6819      	ldr	r1, [r3, #0]
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	3b01      	subs	r3, #1
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	4302      	orrs	r2, r0
 800292c:	3340      	adds	r3, #64	@ 0x40
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	460b      	mov	r3, r1
 800294c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	887a      	ldrh	r2, [r7, #2]
 8002954:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002992:	4b05      	ldr	r3, [pc, #20]	@ (80029a8 <HAL_PCDEx_ActivateLPM+0x44>)
 8002994:	4313      	orrs	r3, r2
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	10000003 	.word	0x10000003

080029ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80029b6:	4b23      	ldr	r3, [pc, #140]	@ (8002a44 <HAL_PWREx_EnableOverDrive+0x98>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	4a22      	ldr	r2, [pc, #136]	@ (8002a44 <HAL_PWREx_EnableOverDrive+0x98>)
 80029bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029c2:	4b20      	ldr	r3, [pc, #128]	@ (8002a44 <HAL_PWREx_EnableOverDrive+0x98>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ca:	603b      	str	r3, [r7, #0]
 80029cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80029ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029da:	f7fe fa3d 	bl	8000e58 <HAL_GetTick>
 80029de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029e0:	e009      	b.n	80029f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029e2:	f7fe fa39 	bl	8000e58 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029f0:	d901      	bls.n	80029f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e022      	b.n	8002a3c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029f6:	4b14      	ldr	r3, [pc, #80]	@ (8002a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a02:	d1ee      	bne.n	80029e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a04:	4b10      	ldr	r3, [pc, #64]	@ (8002a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a0f      	ldr	r2, [pc, #60]	@ (8002a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a10:	f7fe fa22 	bl	8000e58 <HAL_GetTick>
 8002a14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a16:	e009      	b.n	8002a2c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a18:	f7fe fa1e 	bl	8000e58 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a26:	d901      	bls.n	8002a2c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e007      	b.n	8002a3c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a2c:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a38:	d1ee      	bne.n	8002a18 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40007000 	.word	0x40007000

08002a4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a54:	2300      	movs	r3, #0
 8002a56:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e291      	b.n	8002f86 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 8087 	beq.w	8002b7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a70:	4b96      	ldr	r3, [pc, #600]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 030c 	and.w	r3, r3, #12
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d00c      	beq.n	8002a96 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a7c:	4b93      	ldr	r3, [pc, #588]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 030c 	and.w	r3, r3, #12
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d112      	bne.n	8002aae <HAL_RCC_OscConfig+0x62>
 8002a88:	4b90      	ldr	r3, [pc, #576]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a94:	d10b      	bne.n	8002aae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a96:	4b8d      	ldr	r3, [pc, #564]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d06c      	beq.n	8002b7c <HAL_RCC_OscConfig+0x130>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d168      	bne.n	8002b7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e26b      	b.n	8002f86 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ab6:	d106      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x7a>
 8002ab8:	4b84      	ldr	r3, [pc, #528]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a83      	ldr	r2, [pc, #524]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002abe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ac2:	6013      	str	r3, [r2, #0]
 8002ac4:	e02e      	b.n	8002b24 <HAL_RCC_OscConfig+0xd8>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x9c>
 8002ace:	4b7f      	ldr	r3, [pc, #508]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a7e      	ldr	r2, [pc, #504]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002ad4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b7c      	ldr	r3, [pc, #496]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a7b      	ldr	r2, [pc, #492]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002ae0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e01d      	b.n	8002b24 <HAL_RCC_OscConfig+0xd8>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCC_OscConfig+0xc0>
 8002af2:	4b76      	ldr	r3, [pc, #472]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a75      	ldr	r2, [pc, #468]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002af8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	4b73      	ldr	r3, [pc, #460]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a72      	ldr	r2, [pc, #456]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	e00b      	b.n	8002b24 <HAL_RCC_OscConfig+0xd8>
 8002b0c:	4b6f      	ldr	r3, [pc, #444]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a6e      	ldr	r2, [pc, #440]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002b12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	4b6c      	ldr	r3, [pc, #432]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a6b      	ldr	r2, [pc, #428]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002b1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d013      	beq.n	8002b54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7fe f994 	bl	8000e58 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b34:	f7fe f990 	bl	8000e58 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b64      	cmp	r3, #100	@ 0x64
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e21f      	b.n	8002f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b46:	4b61      	ldr	r3, [pc, #388]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0xe8>
 8002b52:	e014      	b.n	8002b7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7fe f980 	bl	8000e58 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b5c:	f7fe f97c 	bl	8000e58 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b64      	cmp	r3, #100	@ 0x64
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e20b      	b.n	8002f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b6e:	4b57      	ldr	r3, [pc, #348]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCC_OscConfig+0x110>
 8002b7a:	e000      	b.n	8002b7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d069      	beq.n	8002c5e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b8a:	4b50      	ldr	r3, [pc, #320]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00b      	beq.n	8002bae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b96:	4b4d      	ldr	r3, [pc, #308]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d11c      	bne.n	8002bdc <HAL_RCC_OscConfig+0x190>
 8002ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d116      	bne.n	8002bdc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bae:	4b47      	ldr	r3, [pc, #284]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d005      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x17a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d001      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e1df      	b.n	8002f86 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc6:	4b41      	ldr	r3, [pc, #260]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	493d      	ldr	r1, [pc, #244]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bda:	e040      	b.n	8002c5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d023      	beq.n	8002c2c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002be4:	4b39      	ldr	r3, [pc, #228]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a38      	ldr	r2, [pc, #224]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe f932 	bl	8000e58 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf8:	f7fe f92e 	bl	8000e58 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e1bd      	b.n	8002f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0a:	4b30      	ldr	r3, [pc, #192]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c16:	4b2d      	ldr	r3, [pc, #180]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4929      	ldr	r1, [pc, #164]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	600b      	str	r3, [r1, #0]
 8002c2a:	e018      	b.n	8002c5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c2c:	4b27      	ldr	r3, [pc, #156]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a26      	ldr	r2, [pc, #152]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002c32:	f023 0301 	bic.w	r3, r3, #1
 8002c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7fe f90e 	bl	8000e58 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c40:	f7fe f90a 	bl	8000e58 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e199      	b.n	8002f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c52:	4b1e      	ldr	r3, [pc, #120]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d038      	beq.n	8002cdc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d019      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c72:	4b16      	ldr	r3, [pc, #88]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002c74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c76:	4a15      	ldr	r2, [pc, #84]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7e:	f7fe f8eb 	bl	8000e58 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c86:	f7fe f8e7 	bl	8000e58 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e176      	b.n	8002f86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c98:	4b0c      	ldr	r3, [pc, #48]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002c9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0f0      	beq.n	8002c86 <HAL_RCC_OscConfig+0x23a>
 8002ca4:	e01a      	b.n	8002cdc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca6:	4b09      	ldr	r3, [pc, #36]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002ca8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002caa:	4a08      	ldr	r2, [pc, #32]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002cac:	f023 0301 	bic.w	r3, r3, #1
 8002cb0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb2:	f7fe f8d1 	bl	8000e58 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb8:	e00a      	b.n	8002cd0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cba:	f7fe f8cd 	bl	8000e58 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d903      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e15c      	b.n	8002f86 <HAL_RCC_OscConfig+0x53a>
 8002ccc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd0:	4b91      	ldr	r3, [pc, #580]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1ee      	bne.n	8002cba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 80a4 	beq.w	8002e32 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cea:	4b8b      	ldr	r3, [pc, #556]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10d      	bne.n	8002d12 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf6:	4b88      	ldr	r3, [pc, #544]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfa:	4a87      	ldr	r2, [pc, #540]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d02:	4b85      	ldr	r3, [pc, #532]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d12:	4b82      	ldr	r3, [pc, #520]	@ (8002f1c <HAL_RCC_OscConfig+0x4d0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d118      	bne.n	8002d50 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d1e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f1c <HAL_RCC_OscConfig+0x4d0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a7e      	ldr	r2, [pc, #504]	@ (8002f1c <HAL_RCC_OscConfig+0x4d0>)
 8002d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d2a:	f7fe f895 	bl	8000e58 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d32:	f7fe f891 	bl	8000e58 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b64      	cmp	r3, #100	@ 0x64
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e120      	b.n	8002f86 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d44:	4b75      	ldr	r3, [pc, #468]	@ (8002f1c <HAL_RCC_OscConfig+0x4d0>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d106      	bne.n	8002d66 <HAL_RCC_OscConfig+0x31a>
 8002d58:	4b6f      	ldr	r3, [pc, #444]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d5c:	4a6e      	ldr	r2, [pc, #440]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d64:	e02d      	b.n	8002dc2 <HAL_RCC_OscConfig+0x376>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCC_OscConfig+0x33c>
 8002d6e:	4b6a      	ldr	r3, [pc, #424]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d72:	4a69      	ldr	r2, [pc, #420]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002d74:	f023 0301 	bic.w	r3, r3, #1
 8002d78:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d7a:	4b67      	ldr	r3, [pc, #412]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7e:	4a66      	ldr	r2, [pc, #408]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002d80:	f023 0304 	bic.w	r3, r3, #4
 8002d84:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d86:	e01c      	b.n	8002dc2 <HAL_RCC_OscConfig+0x376>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	2b05      	cmp	r3, #5
 8002d8e:	d10c      	bne.n	8002daa <HAL_RCC_OscConfig+0x35e>
 8002d90:	4b61      	ldr	r3, [pc, #388]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d94:	4a60      	ldr	r2, [pc, #384]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002d96:	f043 0304 	orr.w	r3, r3, #4
 8002d9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d9c:	4b5e      	ldr	r3, [pc, #376]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da0:	4a5d      	ldr	r2, [pc, #372]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002da8:	e00b      	b.n	8002dc2 <HAL_RCC_OscConfig+0x376>
 8002daa:	4b5b      	ldr	r3, [pc, #364]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dae:	4a5a      	ldr	r2, [pc, #360]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002db0:	f023 0301 	bic.w	r3, r3, #1
 8002db4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002db6:	4b58      	ldr	r3, [pc, #352]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dba:	4a57      	ldr	r2, [pc, #348]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002dbc:	f023 0304 	bic.w	r3, r3, #4
 8002dc0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d015      	beq.n	8002df6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dca:	f7fe f845 	bl	8000e58 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd0:	e00a      	b.n	8002de8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd2:	f7fe f841 	bl	8000e58 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e0ce      	b.n	8002f86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de8:	4b4b      	ldr	r3, [pc, #300]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0ee      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x386>
 8002df4:	e014      	b.n	8002e20 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df6:	f7fe f82f 	bl	8000e58 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dfc:	e00a      	b.n	8002e14 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfe:	f7fe f82b 	bl	8000e58 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e0b8      	b.n	8002f86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e14:	4b40      	ldr	r3, [pc, #256]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1ee      	bne.n	8002dfe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e20:	7dfb      	ldrb	r3, [r7, #23]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d105      	bne.n	8002e32 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e26:	4b3c      	ldr	r3, [pc, #240]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2a:	4a3b      	ldr	r2, [pc, #236]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002e2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e30:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 80a4 	beq.w	8002f84 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e3c:	4b36      	ldr	r3, [pc, #216]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 030c 	and.w	r3, r3, #12
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d06b      	beq.n	8002f20 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d149      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e50:	4b31      	ldr	r3, [pc, #196]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a30      	ldr	r2, [pc, #192]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002e56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7fd fffc 	bl	8000e58 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e64:	f7fd fff8 	bl	8000e58 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e087      	b.n	8002f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e76:	4b28      	ldr	r3, [pc, #160]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69da      	ldr	r2, [r3, #28]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e90:	019b      	lsls	r3, r3, #6
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e98:	085b      	lsrs	r3, r3, #1
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	041b      	lsls	r3, r3, #16
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea4:	061b      	lsls	r3, r3, #24
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	4a1b      	ldr	r2, [pc, #108]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002eaa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002eae:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb0:	4b19      	ldr	r3, [pc, #100]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a18      	ldr	r2, [pc, #96]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002eb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7fd ffcc 	bl	8000e58 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec4:	f7fd ffc8 	bl	8000e58 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e057      	b.n	8002f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed6:	4b10      	ldr	r3, [pc, #64]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x478>
 8002ee2:	e04f      	b.n	8002f84 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a0b      	ldr	r2, [pc, #44]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002eea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7fd ffb2 	bl	8000e58 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef8:	f7fd ffae 	bl	8000e58 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e03d      	b.n	8002f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0a:	4b03      	ldr	r3, [pc, #12]	@ (8002f18 <HAL_RCC_OscConfig+0x4cc>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x4ac>
 8002f16:	e035      	b.n	8002f84 <HAL_RCC_OscConfig+0x538>
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f20:	4b1b      	ldr	r3, [pc, #108]	@ (8002f90 <HAL_RCC_OscConfig+0x544>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d028      	beq.n	8002f80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d121      	bne.n	8002f80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d11a      	bne.n	8002f80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f50:	4013      	ands	r3, r2
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f56:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d111      	bne.n	8002f80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f66:	085b      	lsrs	r3, r3, #1
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d107      	bne.n	8002f80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40023800 	.word	0x40023800

08002f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e0d0      	b.n	800314e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fac:	4b6a      	ldr	r3, [pc, #424]	@ (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d910      	bls.n	8002fdc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fba:	4b67      	ldr	r3, [pc, #412]	@ (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f023 020f 	bic.w	r2, r3, #15
 8002fc2:	4965      	ldr	r1, [pc, #404]	@ (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fca:	4b63      	ldr	r3, [pc, #396]	@ (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d001      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0b8      	b.n	800314e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d020      	beq.n	800302a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ff4:	4b59      	ldr	r3, [pc, #356]	@ (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4a58      	ldr	r2, [pc, #352]	@ (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8002ffa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ffe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800300c:	4b53      	ldr	r3, [pc, #332]	@ (800315c <HAL_RCC_ClockConfig+0x1c8>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	4a52      	ldr	r2, [pc, #328]	@ (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8003012:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003016:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003018:	4b50      	ldr	r3, [pc, #320]	@ (800315c <HAL_RCC_ClockConfig+0x1c8>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	494d      	ldr	r1, [pc, #308]	@ (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8003026:	4313      	orrs	r3, r2
 8003028:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d040      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d107      	bne.n	800304e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303e:	4b47      	ldr	r3, [pc, #284]	@ (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d115      	bne.n	8003076 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e07f      	b.n	800314e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d107      	bne.n	8003066 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003056:	4b41      	ldr	r3, [pc, #260]	@ (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d109      	bne.n	8003076 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e073      	b.n	800314e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003066:	4b3d      	ldr	r3, [pc, #244]	@ (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e06b      	b.n	800314e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003076:	4b39      	ldr	r3, [pc, #228]	@ (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f023 0203 	bic.w	r2, r3, #3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	4936      	ldr	r1, [pc, #216]	@ (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8003084:	4313      	orrs	r3, r2
 8003086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003088:	f7fd fee6 	bl	8000e58 <HAL_GetTick>
 800308c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003090:	f7fd fee2 	bl	8000e58 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e053      	b.n	800314e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a6:	4b2d      	ldr	r3, [pc, #180]	@ (800315c <HAL_RCC_ClockConfig+0x1c8>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 020c 	and.w	r2, r3, #12
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d1eb      	bne.n	8003090 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030b8:	4b27      	ldr	r3, [pc, #156]	@ (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 030f 	and.w	r3, r3, #15
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d210      	bcs.n	80030e8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c6:	4b24      	ldr	r3, [pc, #144]	@ (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f023 020f 	bic.w	r2, r3, #15
 80030ce:	4922      	ldr	r1, [pc, #136]	@ (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d6:	4b20      	ldr	r3, [pc, #128]	@ (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e032      	b.n	800314e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d008      	beq.n	8003106 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030f4:	4b19      	ldr	r3, [pc, #100]	@ (800315c <HAL_RCC_ClockConfig+0x1c8>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4916      	ldr	r1, [pc, #88]	@ (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8003102:	4313      	orrs	r3, r2
 8003104:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d009      	beq.n	8003126 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003112:	4b12      	ldr	r3, [pc, #72]	@ (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	490e      	ldr	r1, [pc, #56]	@ (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8003122:	4313      	orrs	r3, r2
 8003124:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003126:	f000 f821 	bl	800316c <HAL_RCC_GetSysClockFreq>
 800312a:	4602      	mov	r2, r0
 800312c:	4b0b      	ldr	r3, [pc, #44]	@ (800315c <HAL_RCC_ClockConfig+0x1c8>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	490a      	ldr	r1, [pc, #40]	@ (8003160 <HAL_RCC_ClockConfig+0x1cc>)
 8003138:	5ccb      	ldrb	r3, [r1, r3]
 800313a:	fa22 f303 	lsr.w	r3, r2, r3
 800313e:	4a09      	ldr	r2, [pc, #36]	@ (8003164 <HAL_RCC_ClockConfig+0x1d0>)
 8003140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003142:	4b09      	ldr	r3, [pc, #36]	@ (8003168 <HAL_RCC_ClockConfig+0x1d4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7fd fcc6 	bl	8000ad8 <HAL_InitTick>

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40023c00 	.word	0x40023c00
 800315c:	40023800 	.word	0x40023800
 8003160:	0800bf58 	.word	0x0800bf58
 8003164:	20000000 	.word	0x20000000
 8003168:	20000004 	.word	0x20000004

0800316c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800316c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003170:	b090      	sub	sp, #64	@ 0x40
 8003172:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003174:	2300      	movs	r3, #0
 8003176:	637b      	str	r3, [r7, #52]	@ 0x34
 8003178:	2300      	movs	r3, #0
 800317a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800317c:	2300      	movs	r3, #0
 800317e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003184:	4b59      	ldr	r3, [pc, #356]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x180>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 030c 	and.w	r3, r3, #12
 800318c:	2b08      	cmp	r3, #8
 800318e:	d00d      	beq.n	80031ac <HAL_RCC_GetSysClockFreq+0x40>
 8003190:	2b08      	cmp	r3, #8
 8003192:	f200 80a1 	bhi.w	80032d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0x34>
 800319a:	2b04      	cmp	r3, #4
 800319c:	d003      	beq.n	80031a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800319e:	e09b      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031a0:	4b53      	ldr	r3, [pc, #332]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80031a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031a4:	e09b      	b.n	80032de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031a6:	4b53      	ldr	r3, [pc, #332]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80031a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031aa:	e098      	b.n	80032de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031ac:	4b4f      	ldr	r3, [pc, #316]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x180>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80031b6:	4b4d      	ldr	r3, [pc, #308]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x180>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d028      	beq.n	8003214 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c2:	4b4a      	ldr	r3, [pc, #296]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x180>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	099b      	lsrs	r3, r3, #6
 80031c8:	2200      	movs	r2, #0
 80031ca:	623b      	str	r3, [r7, #32]
 80031cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031d4:	2100      	movs	r1, #0
 80031d6:	4b47      	ldr	r3, [pc, #284]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80031d8:	fb03 f201 	mul.w	r2, r3, r1
 80031dc:	2300      	movs	r3, #0
 80031de:	fb00 f303 	mul.w	r3, r0, r3
 80031e2:	4413      	add	r3, r2
 80031e4:	4a43      	ldr	r2, [pc, #268]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80031e6:	fba0 1202 	umull	r1, r2, r0, r2
 80031ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031ec:	460a      	mov	r2, r1
 80031ee:	62ba      	str	r2, [r7, #40]	@ 0x28
 80031f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031f2:	4413      	add	r3, r2
 80031f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f8:	2200      	movs	r2, #0
 80031fa:	61bb      	str	r3, [r7, #24]
 80031fc:	61fa      	str	r2, [r7, #28]
 80031fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003202:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003206:	f7fd f80b 	bl	8000220 <__aeabi_uldivmod>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4613      	mov	r3, r2
 8003210:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003212:	e053      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003214:	4b35      	ldr	r3, [pc, #212]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x180>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	099b      	lsrs	r3, r3, #6
 800321a:	2200      	movs	r2, #0
 800321c:	613b      	str	r3, [r7, #16]
 800321e:	617a      	str	r2, [r7, #20]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003226:	f04f 0b00 	mov.w	fp, #0
 800322a:	4652      	mov	r2, sl
 800322c:	465b      	mov	r3, fp
 800322e:	f04f 0000 	mov.w	r0, #0
 8003232:	f04f 0100 	mov.w	r1, #0
 8003236:	0159      	lsls	r1, r3, #5
 8003238:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800323c:	0150      	lsls	r0, r2, #5
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	ebb2 080a 	subs.w	r8, r2, sl
 8003246:	eb63 090b 	sbc.w	r9, r3, fp
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003256:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800325a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800325e:	ebb2 0408 	subs.w	r4, r2, r8
 8003262:	eb63 0509 	sbc.w	r5, r3, r9
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	f04f 0300 	mov.w	r3, #0
 800326e:	00eb      	lsls	r3, r5, #3
 8003270:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003274:	00e2      	lsls	r2, r4, #3
 8003276:	4614      	mov	r4, r2
 8003278:	461d      	mov	r5, r3
 800327a:	eb14 030a 	adds.w	r3, r4, sl
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	eb45 030b 	adc.w	r3, r5, fp
 8003284:	607b      	str	r3, [r7, #4]
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003292:	4629      	mov	r1, r5
 8003294:	028b      	lsls	r3, r1, #10
 8003296:	4621      	mov	r1, r4
 8003298:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800329c:	4621      	mov	r1, r4
 800329e:	028a      	lsls	r2, r1, #10
 80032a0:	4610      	mov	r0, r2
 80032a2:	4619      	mov	r1, r3
 80032a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032a6:	2200      	movs	r2, #0
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	60fa      	str	r2, [r7, #12]
 80032ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032b0:	f7fc ffb6 	bl	8000220 <__aeabi_uldivmod>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	4613      	mov	r3, r2
 80032ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80032bc:	4b0b      	ldr	r3, [pc, #44]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x180>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	0c1b      	lsrs	r3, r3, #16
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	3301      	adds	r3, #1
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80032cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80032ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032d6:	e002      	b.n	80032de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032d8:	4b05      	ldr	r3, [pc, #20]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80032da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3740      	adds	r7, #64	@ 0x40
 80032e4:	46bd      	mov	sp, r7
 80032e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ea:	bf00      	nop
 80032ec:	40023800 	.word	0x40023800
 80032f0:	00f42400 	.word	0x00f42400
 80032f4:	017d7840 	.word	0x017d7840

080032f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032fc:	4b03      	ldr	r3, [pc, #12]	@ (800330c <HAL_RCC_GetHCLKFreq+0x14>)
 80032fe:	681b      	ldr	r3, [r3, #0]
}
 8003300:	4618      	mov	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	20000000 	.word	0x20000000

08003310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003314:	f7ff fff0 	bl	80032f8 <HAL_RCC_GetHCLKFreq>
 8003318:	4602      	mov	r2, r0
 800331a:	4b05      	ldr	r3, [pc, #20]	@ (8003330 <HAL_RCC_GetPCLK1Freq+0x20>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	0a9b      	lsrs	r3, r3, #10
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	4903      	ldr	r1, [pc, #12]	@ (8003334 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003326:	5ccb      	ldrb	r3, [r1, r3]
 8003328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800332c:	4618      	mov	r0, r3
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40023800 	.word	0x40023800
 8003334:	0800bf68 	.word	0x0800bf68

08003338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800333c:	f7ff ffdc 	bl	80032f8 <HAL_RCC_GetHCLKFreq>
 8003340:	4602      	mov	r2, r0
 8003342:	4b05      	ldr	r3, [pc, #20]	@ (8003358 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	0b5b      	lsrs	r3, r3, #13
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	4903      	ldr	r1, [pc, #12]	@ (800335c <HAL_RCC_GetPCLK2Freq+0x24>)
 800334e:	5ccb      	ldrb	r3, [r1, r3]
 8003350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003354:	4618      	mov	r0, r3
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40023800 	.word	0x40023800
 800335c:	0800bf68 	.word	0x0800bf68

08003360 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	220f      	movs	r2, #15
 800336e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003370:	4b12      	ldr	r3, [pc, #72]	@ (80033bc <HAL_RCC_GetClockConfig+0x5c>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 0203 	and.w	r2, r3, #3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800337c:	4b0f      	ldr	r3, [pc, #60]	@ (80033bc <HAL_RCC_GetClockConfig+0x5c>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003388:	4b0c      	ldr	r3, [pc, #48]	@ (80033bc <HAL_RCC_GetClockConfig+0x5c>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <HAL_RCC_GetClockConfig+0x5c>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	08db      	lsrs	r3, r3, #3
 800339a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033a2:	4b07      	ldr	r3, [pc, #28]	@ (80033c0 <HAL_RCC_GetClockConfig+0x60>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 020f 	and.w	r2, r3, #15
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	601a      	str	r2, [r3, #0]
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800
 80033c0:	40023c00 	.word	0x40023c00

080033c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80033dc:	2300      	movs	r3, #0
 80033de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d012      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033ec:	4b69      	ldr	r3, [pc, #420]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	4a68      	ldr	r2, [pc, #416]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80033f6:	6093      	str	r3, [r2, #8]
 80033f8:	4b66      	ldr	r3, [pc, #408]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003400:	4964      	ldr	r1, [pc, #400]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003402:	4313      	orrs	r3, r2
 8003404:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800340e:	2301      	movs	r3, #1
 8003410:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d017      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800341e:	4b5d      	ldr	r3, [pc, #372]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003420:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003424:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342c:	4959      	ldr	r1, [pc, #356]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003438:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800343c:	d101      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800343e:	2301      	movs	r3, #1
 8003440:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800344a:	2301      	movs	r3, #1
 800344c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d017      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800345a:	4b4e      	ldr	r3, [pc, #312]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800345c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003460:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	494a      	ldr	r1, [pc, #296]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003474:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003478:	d101      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800347a:	2301      	movs	r3, #1
 800347c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003486:	2301      	movs	r3, #1
 8003488:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003496:	2301      	movs	r3, #1
 8003498:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 808b 	beq.w	80035be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034a8:	4b3a      	ldr	r3, [pc, #232]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ac:	4a39      	ldr	r2, [pc, #228]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80034b4:	4b37      	ldr	r3, [pc, #220]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034c0:	4b35      	ldr	r3, [pc, #212]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a34      	ldr	r2, [pc, #208]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034cc:	f7fd fcc4 	bl	8000e58 <HAL_GetTick>
 80034d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d4:	f7fd fcc0 	bl	8000e58 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b64      	cmp	r3, #100	@ 0x64
 80034e0:	d901      	bls.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e357      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034e6:	4b2c      	ldr	r3, [pc, #176]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034f2:	4b28      	ldr	r3, [pc, #160]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d035      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003506:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	429a      	cmp	r2, r3
 800350e:	d02e      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003510:	4b20      	ldr	r3, [pc, #128]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003514:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003518:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800351a:	4b1e      	ldr	r3, [pc, #120]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800351e:	4a1d      	ldr	r2, [pc, #116]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003524:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003526:	4b1b      	ldr	r3, [pc, #108]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800352a:	4a1a      	ldr	r2, [pc, #104]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003530:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003532:	4a18      	ldr	r2, [pc, #96]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003538:	4b16      	ldr	r3, [pc, #88]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b01      	cmp	r3, #1
 8003542:	d114      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7fd fc88 	bl	8000e58 <HAL_GetTick>
 8003548:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354a:	e00a      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800354c:	f7fd fc84 	bl	8000e58 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800355a:	4293      	cmp	r3, r2
 800355c:	d901      	bls.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e319      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003562:	4b0c      	ldr	r3, [pc, #48]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0ee      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003572:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003576:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800357a:	d111      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800357c:	4b05      	ldr	r3, [pc, #20]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003588:	4b04      	ldr	r3, [pc, #16]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800358a:	400b      	ands	r3, r1
 800358c:	4901      	ldr	r1, [pc, #4]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
 8003592:	e00b      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003594:	40023800 	.word	0x40023800
 8003598:	40007000 	.word	0x40007000
 800359c:	0ffffcff 	.word	0x0ffffcff
 80035a0:	4baa      	ldr	r3, [pc, #680]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	4aa9      	ldr	r2, [pc, #676]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80035aa:	6093      	str	r3, [r2, #8]
 80035ac:	4ba7      	ldr	r3, [pc, #668]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b8:	49a4      	ldr	r1, [pc, #656]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0310 	and.w	r3, r3, #16
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d010      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035ca:	4ba0      	ldr	r3, [pc, #640]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035d0:	4a9e      	ldr	r2, [pc, #632]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80035da:	4b9c      	ldr	r3, [pc, #624]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e4:	4999      	ldr	r1, [pc, #612]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035f8:	4b94      	ldr	r3, [pc, #592]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003606:	4991      	ldr	r1, [pc, #580]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800361a:	4b8c      	ldr	r3, [pc, #560]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800361c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003620:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003628:	4988      	ldr	r1, [pc, #544]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800363c:	4b83      	ldr	r3, [pc, #524]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003642:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800364a:	4980      	ldr	r1, [pc, #512]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800365e:	4b7b      	ldr	r3, [pc, #492]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003664:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366c:	4977      	ldr	r1, [pc, #476]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003680:	4b72      	ldr	r3, [pc, #456]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003686:	f023 0203 	bic.w	r2, r3, #3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368e:	496f      	ldr	r1, [pc, #444]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036a2:	4b6a      	ldr	r3, [pc, #424]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a8:	f023 020c 	bic.w	r2, r3, #12
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036b0:	4966      	ldr	r1, [pc, #408]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036c4:	4b61      	ldr	r3, [pc, #388]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ca:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036d2:	495e      	ldr	r1, [pc, #376]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036e6:	4b59      	ldr	r3, [pc, #356]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ec:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f4:	4955      	ldr	r1, [pc, #340]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003708:	4b50      	ldr	r3, [pc, #320]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800370e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003716:	494d      	ldr	r1, [pc, #308]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800372a:	4b48      	ldr	r3, [pc, #288]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003730:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003738:	4944      	ldr	r1, [pc, #272]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800374c:	4b3f      	ldr	r3, [pc, #252]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003752:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800375a:	493c      	ldr	r1, [pc, #240]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800376e:	4b37      	ldr	r3, [pc, #220]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003774:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800377c:	4933      	ldr	r1, [pc, #204]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003790:	4b2e      	ldr	r3, [pc, #184]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003796:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800379e:	492b      	ldr	r1, [pc, #172]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d011      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80037b2:	4b26      	ldr	r3, [pc, #152]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037c0:	4922      	ldr	r1, [pc, #136]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037d0:	d101      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80037d2:	2301      	movs	r3, #1
 80037d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80037e2:	2301      	movs	r3, #1
 80037e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037f2:	4b16      	ldr	r3, [pc, #88]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003800:	4912      	ldr	r1, [pc, #72]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003802:	4313      	orrs	r3, r2
 8003804:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00b      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003814:	4b0d      	ldr	r3, [pc, #52]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800381a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003824:	4909      	ldr	r1, [pc, #36]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d006      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 80d9 	beq.w	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003840:	4b02      	ldr	r3, [pc, #8]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a01      	ldr	r2, [pc, #4]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003846:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800384a:	e001      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800384c:	40023800 	.word	0x40023800
 8003850:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003852:	f7fd fb01 	bl	8000e58 <HAL_GetTick>
 8003856:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003858:	e008      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800385a:	f7fd fafd 	bl	8000e58 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b64      	cmp	r3, #100	@ 0x64
 8003866:	d901      	bls.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e194      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800386c:	4b6c      	ldr	r3, [pc, #432]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1f0      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	d021      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003888:	2b00      	cmp	r3, #0
 800388a:	d11d      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800388c:	4b64      	ldr	r3, [pc, #400]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800388e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003892:	0c1b      	lsrs	r3, r3, #16
 8003894:	f003 0303 	and.w	r3, r3, #3
 8003898:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800389a:	4b61      	ldr	r3, [pc, #388]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800389c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038a0:	0e1b      	lsrs	r3, r3, #24
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	019a      	lsls	r2, r3, #6
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	041b      	lsls	r3, r3, #16
 80038b2:	431a      	orrs	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	061b      	lsls	r3, r3, #24
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	071b      	lsls	r3, r3, #28
 80038c0:	4957      	ldr	r1, [pc, #348]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d004      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038dc:	d00a      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d02e      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038f2:	d129      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038f4:	4b4a      	ldr	r3, [pc, #296]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038fa:	0c1b      	lsrs	r3, r3, #16
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003902:	4b47      	ldr	r3, [pc, #284]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003904:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003908:	0f1b      	lsrs	r3, r3, #28
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	019a      	lsls	r2, r3, #6
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	041b      	lsls	r3, r3, #16
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	061b      	lsls	r3, r3, #24
 8003922:	431a      	orrs	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	071b      	lsls	r3, r3, #28
 8003928:	493d      	ldr	r1, [pc, #244]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003930:	4b3b      	ldr	r3, [pc, #236]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003932:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003936:	f023 021f 	bic.w	r2, r3, #31
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393e:	3b01      	subs	r3, #1
 8003940:	4937      	ldr	r1, [pc, #220]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d01d      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003954:	4b32      	ldr	r3, [pc, #200]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003956:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800395a:	0e1b      	lsrs	r3, r3, #24
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003962:	4b2f      	ldr	r3, [pc, #188]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003964:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003968:	0f1b      	lsrs	r3, r3, #28
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	019a      	lsls	r2, r3, #6
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	041b      	lsls	r3, r3, #16
 800397c:	431a      	orrs	r2, r3
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	061b      	lsls	r3, r3, #24
 8003982:	431a      	orrs	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	071b      	lsls	r3, r3, #28
 8003988:	4925      	ldr	r1, [pc, #148]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d011      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	019a      	lsls	r2, r3, #6
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	041b      	lsls	r3, r3, #16
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	061b      	lsls	r3, r3, #24
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	071b      	lsls	r3, r3, #28
 80039b8:	4919      	ldr	r1, [pc, #100]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039c0:	4b17      	ldr	r3, [pc, #92]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a16      	ldr	r2, [pc, #88]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80039ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039cc:	f7fd fa44 	bl	8000e58 <HAL_GetTick>
 80039d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039d4:	f7fd fa40 	bl	8000e58 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b64      	cmp	r3, #100	@ 0x64
 80039e0:	d901      	bls.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e0d7      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f0      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	f040 80cd 	bne.w	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80039fa:	4b09      	ldr	r3, [pc, #36]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a08      	ldr	r2, [pc, #32]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a06:	f7fd fa27 	bl	8000e58 <HAL_GetTick>
 8003a0a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a0c:	e00a      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a0e:	f7fd fa23 	bl	8000e58 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b64      	cmp	r3, #100	@ 0x64
 8003a1a:	d903      	bls.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e0ba      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003a20:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a24:	4b5e      	ldr	r3, [pc, #376]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a30:	d0ed      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d02e      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d12a      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a5a:	4b51      	ldr	r3, [pc, #324]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a60:	0c1b      	lsrs	r3, r3, #16
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a68:	4b4d      	ldr	r3, [pc, #308]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a6e:	0f1b      	lsrs	r3, r3, #28
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	019a      	lsls	r2, r3, #6
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	041b      	lsls	r3, r3, #16
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	061b      	lsls	r3, r3, #24
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	071b      	lsls	r3, r3, #28
 8003a8e:	4944      	ldr	r1, [pc, #272]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a96:	4b42      	ldr	r3, [pc, #264]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a9c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	021b      	lsls	r3, r3, #8
 8003aa8:	493d      	ldr	r1, [pc, #244]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d022      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ac0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ac4:	d11d      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ac6:	4b36      	ldr	r3, [pc, #216]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003acc:	0e1b      	lsrs	r3, r3, #24
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ad4:	4b32      	ldr	r3, [pc, #200]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ada:	0f1b      	lsrs	r3, r3, #28
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	019a      	lsls	r2, r3, #6
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	041b      	lsls	r3, r3, #16
 8003aee:	431a      	orrs	r2, r3
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	061b      	lsls	r3, r3, #24
 8003af4:	431a      	orrs	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	071b      	lsls	r3, r3, #28
 8003afa:	4929      	ldr	r1, [pc, #164]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d028      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b0e:	4b24      	ldr	r3, [pc, #144]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b14:	0e1b      	lsrs	r3, r3, #24
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b1c:	4b20      	ldr	r3, [pc, #128]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b22:	0c1b      	lsrs	r3, r3, #16
 8003b24:	f003 0303 	and.w	r3, r3, #3
 8003b28:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	019a      	lsls	r2, r3, #6
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	041b      	lsls	r3, r3, #16
 8003b34:	431a      	orrs	r2, r3
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	061b      	lsls	r3, r3, #24
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	071b      	lsls	r3, r3, #28
 8003b42:	4917      	ldr	r1, [pc, #92]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b58:	4911      	ldr	r1, [pc, #68]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b60:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a0e      	ldr	r2, [pc, #56]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b6c:	f7fd f974 	bl	8000e58 <HAL_GetTick>
 8003b70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b74:	f7fd f970 	bl	8000e58 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b64      	cmp	r3, #100	@ 0x64
 8003b80:	d901      	bls.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e007      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b86:	4b06      	ldr	r3, [pc, #24]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b92:	d1ef      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3720      	adds	r7, #32
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40023800 	.word	0x40023800

08003ba4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e049      	b.n	8003c4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f841 	bl	8003c52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3304      	adds	r3, #4
 8003be0:	4619      	mov	r1, r3
 8003be2:	4610      	mov	r0, r2
 8003be4:	f000 fa00 	bl	8003fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d001      	beq.n	8003c80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e054      	b.n	8003d2a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a26      	ldr	r2, [pc, #152]	@ (8003d38 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d022      	beq.n	8003ce8 <HAL_TIM_Base_Start_IT+0x80>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003caa:	d01d      	beq.n	8003ce8 <HAL_TIM_Base_Start_IT+0x80>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a22      	ldr	r2, [pc, #136]	@ (8003d3c <HAL_TIM_Base_Start_IT+0xd4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d018      	beq.n	8003ce8 <HAL_TIM_Base_Start_IT+0x80>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a21      	ldr	r2, [pc, #132]	@ (8003d40 <HAL_TIM_Base_Start_IT+0xd8>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d013      	beq.n	8003ce8 <HAL_TIM_Base_Start_IT+0x80>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a1f      	ldr	r2, [pc, #124]	@ (8003d44 <HAL_TIM_Base_Start_IT+0xdc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00e      	beq.n	8003ce8 <HAL_TIM_Base_Start_IT+0x80>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a1e      	ldr	r2, [pc, #120]	@ (8003d48 <HAL_TIM_Base_Start_IT+0xe0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d009      	beq.n	8003ce8 <HAL_TIM_Base_Start_IT+0x80>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1c      	ldr	r2, [pc, #112]	@ (8003d4c <HAL_TIM_Base_Start_IT+0xe4>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d004      	beq.n	8003ce8 <HAL_TIM_Base_Start_IT+0x80>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a1b      	ldr	r2, [pc, #108]	@ (8003d50 <HAL_TIM_Base_Start_IT+0xe8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d115      	bne.n	8003d14 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	4b19      	ldr	r3, [pc, #100]	@ (8003d54 <HAL_TIM_Base_Start_IT+0xec>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2b06      	cmp	r3, #6
 8003cf8:	d015      	beq.n	8003d26 <HAL_TIM_Base_Start_IT+0xbe>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d00:	d011      	beq.n	8003d26 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 0201 	orr.w	r2, r2, #1
 8003d10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d12:	e008      	b.n	8003d26 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0201 	orr.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	e000      	b.n	8003d28 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40010000 	.word	0x40010000
 8003d3c:	40000400 	.word	0x40000400
 8003d40:	40000800 	.word	0x40000800
 8003d44:	40000c00 	.word	0x40000c00
 8003d48:	40010400 	.word	0x40010400
 8003d4c:	40014000 	.word	0x40014000
 8003d50:	40001800 	.word	0x40001800
 8003d54:	00010007 	.word	0x00010007

08003d58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d122      	bne.n	8003db4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d11b      	bne.n	8003db4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f06f 0202 	mvn.w	r2, #2
 8003d84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f905 	bl	8003faa <HAL_TIM_IC_CaptureCallback>
 8003da0:	e005      	b.n	8003dae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f8f7 	bl	8003f96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f908 	bl	8003fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d122      	bne.n	8003e08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	d11b      	bne.n	8003e08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f06f 0204 	mvn.w	r2, #4
 8003dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2202      	movs	r2, #2
 8003dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f8db 	bl	8003faa <HAL_TIM_IC_CaptureCallback>
 8003df4:	e005      	b.n	8003e02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f8cd 	bl	8003f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f8de 	bl	8003fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d122      	bne.n	8003e5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d11b      	bne.n	8003e5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f06f 0208 	mvn.w	r2, #8
 8003e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2204      	movs	r2, #4
 8003e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f8b1 	bl	8003faa <HAL_TIM_IC_CaptureCallback>
 8003e48:	e005      	b.n	8003e56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f8a3 	bl	8003f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f8b4 	bl	8003fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	2b10      	cmp	r3, #16
 8003e68:	d122      	bne.n	8003eb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f003 0310 	and.w	r3, r3, #16
 8003e74:	2b10      	cmp	r3, #16
 8003e76:	d11b      	bne.n	8003eb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f06f 0210 	mvn.w	r2, #16
 8003e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2208      	movs	r2, #8
 8003e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f887 	bl	8003faa <HAL_TIM_IC_CaptureCallback>
 8003e9c:	e005      	b.n	8003eaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f879 	bl	8003f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f88a 	bl	8003fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d10e      	bne.n	8003edc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d107      	bne.n	8003edc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f06f 0201 	mvn.w	r2, #1
 8003ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fc fcee 	bl	80008b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ee6:	2b80      	cmp	r3, #128	@ 0x80
 8003ee8:	d10e      	bne.n	8003f08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef4:	2b80      	cmp	r3, #128	@ 0x80
 8003ef6:	d107      	bne.n	8003f08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f91a 	bl	800413c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f16:	d10e      	bne.n	8003f36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f22:	2b80      	cmp	r3, #128	@ 0x80
 8003f24:	d107      	bne.n	8003f36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f90d 	bl	8004150 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f40:	2b40      	cmp	r3, #64	@ 0x40
 8003f42:	d10e      	bne.n	8003f62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4e:	2b40      	cmp	r3, #64	@ 0x40
 8003f50:	d107      	bne.n	8003f62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f838 	bl	8003fd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	d10e      	bne.n	8003f8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b20      	cmp	r3, #32
 8003f7c:	d107      	bne.n	8003f8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f06f 0220 	mvn.w	r2, #32
 8003f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f8cd 	bl	8004128 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f8e:	bf00      	nop
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
	...

08003fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a40      	ldr	r2, [pc, #256]	@ (80040fc <TIM_Base_SetConfig+0x114>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d013      	beq.n	8004028 <TIM_Base_SetConfig+0x40>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004006:	d00f      	beq.n	8004028 <TIM_Base_SetConfig+0x40>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a3d      	ldr	r2, [pc, #244]	@ (8004100 <TIM_Base_SetConfig+0x118>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d00b      	beq.n	8004028 <TIM_Base_SetConfig+0x40>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a3c      	ldr	r2, [pc, #240]	@ (8004104 <TIM_Base_SetConfig+0x11c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d007      	beq.n	8004028 <TIM_Base_SetConfig+0x40>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a3b      	ldr	r2, [pc, #236]	@ (8004108 <TIM_Base_SetConfig+0x120>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d003      	beq.n	8004028 <TIM_Base_SetConfig+0x40>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a3a      	ldr	r2, [pc, #232]	@ (800410c <TIM_Base_SetConfig+0x124>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d108      	bne.n	800403a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800402e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	4313      	orrs	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a2f      	ldr	r2, [pc, #188]	@ (80040fc <TIM_Base_SetConfig+0x114>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d02b      	beq.n	800409a <TIM_Base_SetConfig+0xb2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004048:	d027      	beq.n	800409a <TIM_Base_SetConfig+0xb2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a2c      	ldr	r2, [pc, #176]	@ (8004100 <TIM_Base_SetConfig+0x118>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d023      	beq.n	800409a <TIM_Base_SetConfig+0xb2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a2b      	ldr	r2, [pc, #172]	@ (8004104 <TIM_Base_SetConfig+0x11c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d01f      	beq.n	800409a <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a2a      	ldr	r2, [pc, #168]	@ (8004108 <TIM_Base_SetConfig+0x120>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d01b      	beq.n	800409a <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a29      	ldr	r2, [pc, #164]	@ (800410c <TIM_Base_SetConfig+0x124>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d017      	beq.n	800409a <TIM_Base_SetConfig+0xb2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a28      	ldr	r2, [pc, #160]	@ (8004110 <TIM_Base_SetConfig+0x128>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d013      	beq.n	800409a <TIM_Base_SetConfig+0xb2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a27      	ldr	r2, [pc, #156]	@ (8004114 <TIM_Base_SetConfig+0x12c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00f      	beq.n	800409a <TIM_Base_SetConfig+0xb2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a26      	ldr	r2, [pc, #152]	@ (8004118 <TIM_Base_SetConfig+0x130>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00b      	beq.n	800409a <TIM_Base_SetConfig+0xb2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a25      	ldr	r2, [pc, #148]	@ (800411c <TIM_Base_SetConfig+0x134>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d007      	beq.n	800409a <TIM_Base_SetConfig+0xb2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a24      	ldr	r2, [pc, #144]	@ (8004120 <TIM_Base_SetConfig+0x138>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d003      	beq.n	800409a <TIM_Base_SetConfig+0xb2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a23      	ldr	r2, [pc, #140]	@ (8004124 <TIM_Base_SetConfig+0x13c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d108      	bne.n	80040ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a0a      	ldr	r2, [pc, #40]	@ (80040fc <TIM_Base_SetConfig+0x114>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d003      	beq.n	80040e0 <TIM_Base_SetConfig+0xf8>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a0c      	ldr	r2, [pc, #48]	@ (800410c <TIM_Base_SetConfig+0x124>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d103      	bne.n	80040e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	615a      	str	r2, [r3, #20]
}
 80040ee:	bf00      	nop
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40010000 	.word	0x40010000
 8004100:	40000400 	.word	0x40000400
 8004104:	40000800 	.word	0x40000800
 8004108:	40000c00 	.word	0x40000c00
 800410c:	40010400 	.word	0x40010400
 8004110:	40014000 	.word	0x40014000
 8004114:	40014400 	.word	0x40014400
 8004118:	40014800 	.word	0x40014800
 800411c:	40001800 	.word	0x40001800
 8004120:	40001c00 	.word	0x40001c00
 8004124:	40002000 	.word	0x40002000

08004128 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e040      	b.n	80041f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fc fbde 	bl	8000948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2224      	movs	r2, #36	@ 0x24
 8004190:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0201 	bic.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f8b0 	bl	8004308 <UART_SetConfig>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e022      	b.n	80041f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 fb08 	bl	80047d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0201 	orr.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 fb8f 	bl	8004914 <UART_CheckIdleState>
 80041f6:	4603      	mov	r3, r0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08a      	sub	sp, #40	@ 0x28
 8004204:	af02      	add	r7, sp, #8
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	4613      	mov	r3, r2
 800420e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004214:	2b20      	cmp	r3, #32
 8004216:	d171      	bne.n	80042fc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <HAL_UART_Transmit+0x24>
 800421e:	88fb      	ldrh	r3, [r7, #6]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e06a      	b.n	80042fe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2221      	movs	r2, #33	@ 0x21
 8004234:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004236:	f7fc fe0f 	bl	8000e58 <HAL_GetTick>
 800423a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	88fa      	ldrh	r2, [r7, #6]
 8004240:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	88fa      	ldrh	r2, [r7, #6]
 8004248:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004254:	d108      	bne.n	8004268 <HAL_UART_Transmit+0x68>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d104      	bne.n	8004268 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800425e:	2300      	movs	r3, #0
 8004260:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	61bb      	str	r3, [r7, #24]
 8004266:	e003      	b.n	8004270 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800426c:	2300      	movs	r3, #0
 800426e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004270:	e02c      	b.n	80042cc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2200      	movs	r2, #0
 800427a:	2180      	movs	r1, #128	@ 0x80
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 fb80 	bl	8004982 <UART_WaitOnFlagUntilTimeout>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e038      	b.n	80042fe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10b      	bne.n	80042aa <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042a0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	3302      	adds	r3, #2
 80042a6:	61bb      	str	r3, [r7, #24]
 80042a8:	e007      	b.n	80042ba <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	781a      	ldrb	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	3301      	adds	r3, #1
 80042b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1cc      	bne.n	8004272 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2200      	movs	r2, #0
 80042e0:	2140      	movs	r1, #64	@ 0x40
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 fb4d 	bl	8004982 <UART_WaitOnFlagUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e005      	b.n	80042fe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2220      	movs	r2, #32
 80042f6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	e000      	b.n	80042fe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80042fc:	2302      	movs	r3, #2
  }
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3720      	adds	r7, #32
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
	...

08004308 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	4313      	orrs	r3, r2
 800432a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4ba6      	ldr	r3, [pc, #664]	@ (80045cc <UART_SetConfig+0x2c4>)
 8004334:	4013      	ands	r3, r2
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6812      	ldr	r2, [r2, #0]
 800433a:	6979      	ldr	r1, [r7, #20]
 800433c:	430b      	orrs	r3, r1
 800433e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	4313      	orrs	r3, r2
 8004364:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	430a      	orrs	r2, r1
 8004378:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a94      	ldr	r2, [pc, #592]	@ (80045d0 <UART_SetConfig+0x2c8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d120      	bne.n	80043c6 <UART_SetConfig+0xbe>
 8004384:	4b93      	ldr	r3, [pc, #588]	@ (80045d4 <UART_SetConfig+0x2cc>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	2b03      	cmp	r3, #3
 8004390:	d816      	bhi.n	80043c0 <UART_SetConfig+0xb8>
 8004392:	a201      	add	r2, pc, #4	@ (adr r2, 8004398 <UART_SetConfig+0x90>)
 8004394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004398:	080043a9 	.word	0x080043a9
 800439c:	080043b5 	.word	0x080043b5
 80043a0:	080043af 	.word	0x080043af
 80043a4:	080043bb 	.word	0x080043bb
 80043a8:	2301      	movs	r3, #1
 80043aa:	77fb      	strb	r3, [r7, #31]
 80043ac:	e150      	b.n	8004650 <UART_SetConfig+0x348>
 80043ae:	2302      	movs	r3, #2
 80043b0:	77fb      	strb	r3, [r7, #31]
 80043b2:	e14d      	b.n	8004650 <UART_SetConfig+0x348>
 80043b4:	2304      	movs	r3, #4
 80043b6:	77fb      	strb	r3, [r7, #31]
 80043b8:	e14a      	b.n	8004650 <UART_SetConfig+0x348>
 80043ba:	2308      	movs	r3, #8
 80043bc:	77fb      	strb	r3, [r7, #31]
 80043be:	e147      	b.n	8004650 <UART_SetConfig+0x348>
 80043c0:	2310      	movs	r3, #16
 80043c2:	77fb      	strb	r3, [r7, #31]
 80043c4:	e144      	b.n	8004650 <UART_SetConfig+0x348>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a83      	ldr	r2, [pc, #524]	@ (80045d8 <UART_SetConfig+0x2d0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d132      	bne.n	8004436 <UART_SetConfig+0x12e>
 80043d0:	4b80      	ldr	r3, [pc, #512]	@ (80045d4 <UART_SetConfig+0x2cc>)
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d6:	f003 030c 	and.w	r3, r3, #12
 80043da:	2b0c      	cmp	r3, #12
 80043dc:	d828      	bhi.n	8004430 <UART_SetConfig+0x128>
 80043de:	a201      	add	r2, pc, #4	@ (adr r2, 80043e4 <UART_SetConfig+0xdc>)
 80043e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e4:	08004419 	.word	0x08004419
 80043e8:	08004431 	.word	0x08004431
 80043ec:	08004431 	.word	0x08004431
 80043f0:	08004431 	.word	0x08004431
 80043f4:	08004425 	.word	0x08004425
 80043f8:	08004431 	.word	0x08004431
 80043fc:	08004431 	.word	0x08004431
 8004400:	08004431 	.word	0x08004431
 8004404:	0800441f 	.word	0x0800441f
 8004408:	08004431 	.word	0x08004431
 800440c:	08004431 	.word	0x08004431
 8004410:	08004431 	.word	0x08004431
 8004414:	0800442b 	.word	0x0800442b
 8004418:	2300      	movs	r3, #0
 800441a:	77fb      	strb	r3, [r7, #31]
 800441c:	e118      	b.n	8004650 <UART_SetConfig+0x348>
 800441e:	2302      	movs	r3, #2
 8004420:	77fb      	strb	r3, [r7, #31]
 8004422:	e115      	b.n	8004650 <UART_SetConfig+0x348>
 8004424:	2304      	movs	r3, #4
 8004426:	77fb      	strb	r3, [r7, #31]
 8004428:	e112      	b.n	8004650 <UART_SetConfig+0x348>
 800442a:	2308      	movs	r3, #8
 800442c:	77fb      	strb	r3, [r7, #31]
 800442e:	e10f      	b.n	8004650 <UART_SetConfig+0x348>
 8004430:	2310      	movs	r3, #16
 8004432:	77fb      	strb	r3, [r7, #31]
 8004434:	e10c      	b.n	8004650 <UART_SetConfig+0x348>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a68      	ldr	r2, [pc, #416]	@ (80045dc <UART_SetConfig+0x2d4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d120      	bne.n	8004482 <UART_SetConfig+0x17a>
 8004440:	4b64      	ldr	r3, [pc, #400]	@ (80045d4 <UART_SetConfig+0x2cc>)
 8004442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004446:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800444a:	2b30      	cmp	r3, #48	@ 0x30
 800444c:	d013      	beq.n	8004476 <UART_SetConfig+0x16e>
 800444e:	2b30      	cmp	r3, #48	@ 0x30
 8004450:	d814      	bhi.n	800447c <UART_SetConfig+0x174>
 8004452:	2b20      	cmp	r3, #32
 8004454:	d009      	beq.n	800446a <UART_SetConfig+0x162>
 8004456:	2b20      	cmp	r3, #32
 8004458:	d810      	bhi.n	800447c <UART_SetConfig+0x174>
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <UART_SetConfig+0x15c>
 800445e:	2b10      	cmp	r3, #16
 8004460:	d006      	beq.n	8004470 <UART_SetConfig+0x168>
 8004462:	e00b      	b.n	800447c <UART_SetConfig+0x174>
 8004464:	2300      	movs	r3, #0
 8004466:	77fb      	strb	r3, [r7, #31]
 8004468:	e0f2      	b.n	8004650 <UART_SetConfig+0x348>
 800446a:	2302      	movs	r3, #2
 800446c:	77fb      	strb	r3, [r7, #31]
 800446e:	e0ef      	b.n	8004650 <UART_SetConfig+0x348>
 8004470:	2304      	movs	r3, #4
 8004472:	77fb      	strb	r3, [r7, #31]
 8004474:	e0ec      	b.n	8004650 <UART_SetConfig+0x348>
 8004476:	2308      	movs	r3, #8
 8004478:	77fb      	strb	r3, [r7, #31]
 800447a:	e0e9      	b.n	8004650 <UART_SetConfig+0x348>
 800447c:	2310      	movs	r3, #16
 800447e:	77fb      	strb	r3, [r7, #31]
 8004480:	e0e6      	b.n	8004650 <UART_SetConfig+0x348>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a56      	ldr	r2, [pc, #344]	@ (80045e0 <UART_SetConfig+0x2d8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d120      	bne.n	80044ce <UART_SetConfig+0x1c6>
 800448c:	4b51      	ldr	r3, [pc, #324]	@ (80045d4 <UART_SetConfig+0x2cc>)
 800448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004492:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004496:	2bc0      	cmp	r3, #192	@ 0xc0
 8004498:	d013      	beq.n	80044c2 <UART_SetConfig+0x1ba>
 800449a:	2bc0      	cmp	r3, #192	@ 0xc0
 800449c:	d814      	bhi.n	80044c8 <UART_SetConfig+0x1c0>
 800449e:	2b80      	cmp	r3, #128	@ 0x80
 80044a0:	d009      	beq.n	80044b6 <UART_SetConfig+0x1ae>
 80044a2:	2b80      	cmp	r3, #128	@ 0x80
 80044a4:	d810      	bhi.n	80044c8 <UART_SetConfig+0x1c0>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <UART_SetConfig+0x1a8>
 80044aa:	2b40      	cmp	r3, #64	@ 0x40
 80044ac:	d006      	beq.n	80044bc <UART_SetConfig+0x1b4>
 80044ae:	e00b      	b.n	80044c8 <UART_SetConfig+0x1c0>
 80044b0:	2300      	movs	r3, #0
 80044b2:	77fb      	strb	r3, [r7, #31]
 80044b4:	e0cc      	b.n	8004650 <UART_SetConfig+0x348>
 80044b6:	2302      	movs	r3, #2
 80044b8:	77fb      	strb	r3, [r7, #31]
 80044ba:	e0c9      	b.n	8004650 <UART_SetConfig+0x348>
 80044bc:	2304      	movs	r3, #4
 80044be:	77fb      	strb	r3, [r7, #31]
 80044c0:	e0c6      	b.n	8004650 <UART_SetConfig+0x348>
 80044c2:	2308      	movs	r3, #8
 80044c4:	77fb      	strb	r3, [r7, #31]
 80044c6:	e0c3      	b.n	8004650 <UART_SetConfig+0x348>
 80044c8:	2310      	movs	r3, #16
 80044ca:	77fb      	strb	r3, [r7, #31]
 80044cc:	e0c0      	b.n	8004650 <UART_SetConfig+0x348>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a44      	ldr	r2, [pc, #272]	@ (80045e4 <UART_SetConfig+0x2dc>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d125      	bne.n	8004524 <UART_SetConfig+0x21c>
 80044d8:	4b3e      	ldr	r3, [pc, #248]	@ (80045d4 <UART_SetConfig+0x2cc>)
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044e6:	d017      	beq.n	8004518 <UART_SetConfig+0x210>
 80044e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044ec:	d817      	bhi.n	800451e <UART_SetConfig+0x216>
 80044ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044f2:	d00b      	beq.n	800450c <UART_SetConfig+0x204>
 80044f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044f8:	d811      	bhi.n	800451e <UART_SetConfig+0x216>
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <UART_SetConfig+0x1fe>
 80044fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004502:	d006      	beq.n	8004512 <UART_SetConfig+0x20a>
 8004504:	e00b      	b.n	800451e <UART_SetConfig+0x216>
 8004506:	2300      	movs	r3, #0
 8004508:	77fb      	strb	r3, [r7, #31]
 800450a:	e0a1      	b.n	8004650 <UART_SetConfig+0x348>
 800450c:	2302      	movs	r3, #2
 800450e:	77fb      	strb	r3, [r7, #31]
 8004510:	e09e      	b.n	8004650 <UART_SetConfig+0x348>
 8004512:	2304      	movs	r3, #4
 8004514:	77fb      	strb	r3, [r7, #31]
 8004516:	e09b      	b.n	8004650 <UART_SetConfig+0x348>
 8004518:	2308      	movs	r3, #8
 800451a:	77fb      	strb	r3, [r7, #31]
 800451c:	e098      	b.n	8004650 <UART_SetConfig+0x348>
 800451e:	2310      	movs	r3, #16
 8004520:	77fb      	strb	r3, [r7, #31]
 8004522:	e095      	b.n	8004650 <UART_SetConfig+0x348>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a2f      	ldr	r2, [pc, #188]	@ (80045e8 <UART_SetConfig+0x2e0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d125      	bne.n	800457a <UART_SetConfig+0x272>
 800452e:	4b29      	ldr	r3, [pc, #164]	@ (80045d4 <UART_SetConfig+0x2cc>)
 8004530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004534:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004538:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800453c:	d017      	beq.n	800456e <UART_SetConfig+0x266>
 800453e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004542:	d817      	bhi.n	8004574 <UART_SetConfig+0x26c>
 8004544:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004548:	d00b      	beq.n	8004562 <UART_SetConfig+0x25a>
 800454a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800454e:	d811      	bhi.n	8004574 <UART_SetConfig+0x26c>
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <UART_SetConfig+0x254>
 8004554:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004558:	d006      	beq.n	8004568 <UART_SetConfig+0x260>
 800455a:	e00b      	b.n	8004574 <UART_SetConfig+0x26c>
 800455c:	2301      	movs	r3, #1
 800455e:	77fb      	strb	r3, [r7, #31]
 8004560:	e076      	b.n	8004650 <UART_SetConfig+0x348>
 8004562:	2302      	movs	r3, #2
 8004564:	77fb      	strb	r3, [r7, #31]
 8004566:	e073      	b.n	8004650 <UART_SetConfig+0x348>
 8004568:	2304      	movs	r3, #4
 800456a:	77fb      	strb	r3, [r7, #31]
 800456c:	e070      	b.n	8004650 <UART_SetConfig+0x348>
 800456e:	2308      	movs	r3, #8
 8004570:	77fb      	strb	r3, [r7, #31]
 8004572:	e06d      	b.n	8004650 <UART_SetConfig+0x348>
 8004574:	2310      	movs	r3, #16
 8004576:	77fb      	strb	r3, [r7, #31]
 8004578:	e06a      	b.n	8004650 <UART_SetConfig+0x348>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a1b      	ldr	r2, [pc, #108]	@ (80045ec <UART_SetConfig+0x2e4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d138      	bne.n	80045f6 <UART_SetConfig+0x2ee>
 8004584:	4b13      	ldr	r3, [pc, #76]	@ (80045d4 <UART_SetConfig+0x2cc>)
 8004586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800458a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800458e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004592:	d017      	beq.n	80045c4 <UART_SetConfig+0x2bc>
 8004594:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004598:	d82a      	bhi.n	80045f0 <UART_SetConfig+0x2e8>
 800459a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800459e:	d00b      	beq.n	80045b8 <UART_SetConfig+0x2b0>
 80045a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045a4:	d824      	bhi.n	80045f0 <UART_SetConfig+0x2e8>
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <UART_SetConfig+0x2aa>
 80045aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045ae:	d006      	beq.n	80045be <UART_SetConfig+0x2b6>
 80045b0:	e01e      	b.n	80045f0 <UART_SetConfig+0x2e8>
 80045b2:	2300      	movs	r3, #0
 80045b4:	77fb      	strb	r3, [r7, #31]
 80045b6:	e04b      	b.n	8004650 <UART_SetConfig+0x348>
 80045b8:	2302      	movs	r3, #2
 80045ba:	77fb      	strb	r3, [r7, #31]
 80045bc:	e048      	b.n	8004650 <UART_SetConfig+0x348>
 80045be:	2304      	movs	r3, #4
 80045c0:	77fb      	strb	r3, [r7, #31]
 80045c2:	e045      	b.n	8004650 <UART_SetConfig+0x348>
 80045c4:	2308      	movs	r3, #8
 80045c6:	77fb      	strb	r3, [r7, #31]
 80045c8:	e042      	b.n	8004650 <UART_SetConfig+0x348>
 80045ca:	bf00      	nop
 80045cc:	efff69f3 	.word	0xefff69f3
 80045d0:	40011000 	.word	0x40011000
 80045d4:	40023800 	.word	0x40023800
 80045d8:	40004400 	.word	0x40004400
 80045dc:	40004800 	.word	0x40004800
 80045e0:	40004c00 	.word	0x40004c00
 80045e4:	40005000 	.word	0x40005000
 80045e8:	40011400 	.word	0x40011400
 80045ec:	40007800 	.word	0x40007800
 80045f0:	2310      	movs	r3, #16
 80045f2:	77fb      	strb	r3, [r7, #31]
 80045f4:	e02c      	b.n	8004650 <UART_SetConfig+0x348>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a72      	ldr	r2, [pc, #456]	@ (80047c4 <UART_SetConfig+0x4bc>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d125      	bne.n	800464c <UART_SetConfig+0x344>
 8004600:	4b71      	ldr	r3, [pc, #452]	@ (80047c8 <UART_SetConfig+0x4c0>)
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004606:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800460a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800460e:	d017      	beq.n	8004640 <UART_SetConfig+0x338>
 8004610:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004614:	d817      	bhi.n	8004646 <UART_SetConfig+0x33e>
 8004616:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800461a:	d00b      	beq.n	8004634 <UART_SetConfig+0x32c>
 800461c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004620:	d811      	bhi.n	8004646 <UART_SetConfig+0x33e>
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <UART_SetConfig+0x326>
 8004626:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800462a:	d006      	beq.n	800463a <UART_SetConfig+0x332>
 800462c:	e00b      	b.n	8004646 <UART_SetConfig+0x33e>
 800462e:	2300      	movs	r3, #0
 8004630:	77fb      	strb	r3, [r7, #31]
 8004632:	e00d      	b.n	8004650 <UART_SetConfig+0x348>
 8004634:	2302      	movs	r3, #2
 8004636:	77fb      	strb	r3, [r7, #31]
 8004638:	e00a      	b.n	8004650 <UART_SetConfig+0x348>
 800463a:	2304      	movs	r3, #4
 800463c:	77fb      	strb	r3, [r7, #31]
 800463e:	e007      	b.n	8004650 <UART_SetConfig+0x348>
 8004640:	2308      	movs	r3, #8
 8004642:	77fb      	strb	r3, [r7, #31]
 8004644:	e004      	b.n	8004650 <UART_SetConfig+0x348>
 8004646:	2310      	movs	r3, #16
 8004648:	77fb      	strb	r3, [r7, #31]
 800464a:	e001      	b.n	8004650 <UART_SetConfig+0x348>
 800464c:	2310      	movs	r3, #16
 800464e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004658:	d15b      	bne.n	8004712 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800465a:	7ffb      	ldrb	r3, [r7, #31]
 800465c:	2b08      	cmp	r3, #8
 800465e:	d828      	bhi.n	80046b2 <UART_SetConfig+0x3aa>
 8004660:	a201      	add	r2, pc, #4	@ (adr r2, 8004668 <UART_SetConfig+0x360>)
 8004662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004666:	bf00      	nop
 8004668:	0800468d 	.word	0x0800468d
 800466c:	08004695 	.word	0x08004695
 8004670:	0800469d 	.word	0x0800469d
 8004674:	080046b3 	.word	0x080046b3
 8004678:	080046a3 	.word	0x080046a3
 800467c:	080046b3 	.word	0x080046b3
 8004680:	080046b3 	.word	0x080046b3
 8004684:	080046b3 	.word	0x080046b3
 8004688:	080046ab 	.word	0x080046ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800468c:	f7fe fe40 	bl	8003310 <HAL_RCC_GetPCLK1Freq>
 8004690:	61b8      	str	r0, [r7, #24]
        break;
 8004692:	e013      	b.n	80046bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004694:	f7fe fe50 	bl	8003338 <HAL_RCC_GetPCLK2Freq>
 8004698:	61b8      	str	r0, [r7, #24]
        break;
 800469a:	e00f      	b.n	80046bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800469c:	4b4b      	ldr	r3, [pc, #300]	@ (80047cc <UART_SetConfig+0x4c4>)
 800469e:	61bb      	str	r3, [r7, #24]
        break;
 80046a0:	e00c      	b.n	80046bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046a2:	f7fe fd63 	bl	800316c <HAL_RCC_GetSysClockFreq>
 80046a6:	61b8      	str	r0, [r7, #24]
        break;
 80046a8:	e008      	b.n	80046bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046ae:	61bb      	str	r3, [r7, #24]
        break;
 80046b0:	e004      	b.n	80046bc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	77bb      	strb	r3, [r7, #30]
        break;
 80046ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d074      	beq.n	80047ac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	005a      	lsls	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	085b      	lsrs	r3, r3, #1
 80046cc:	441a      	add	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	2b0f      	cmp	r3, #15
 80046dc:	d916      	bls.n	800470c <UART_SetConfig+0x404>
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046e4:	d212      	bcs.n	800470c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	f023 030f 	bic.w	r3, r3, #15
 80046ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	085b      	lsrs	r3, r3, #1
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	89fb      	ldrh	r3, [r7, #14]
 80046fe:	4313      	orrs	r3, r2
 8004700:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	89fa      	ldrh	r2, [r7, #14]
 8004708:	60da      	str	r2, [r3, #12]
 800470a:	e04f      	b.n	80047ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	77bb      	strb	r3, [r7, #30]
 8004710:	e04c      	b.n	80047ac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004712:	7ffb      	ldrb	r3, [r7, #31]
 8004714:	2b08      	cmp	r3, #8
 8004716:	d828      	bhi.n	800476a <UART_SetConfig+0x462>
 8004718:	a201      	add	r2, pc, #4	@ (adr r2, 8004720 <UART_SetConfig+0x418>)
 800471a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471e:	bf00      	nop
 8004720:	08004745 	.word	0x08004745
 8004724:	0800474d 	.word	0x0800474d
 8004728:	08004755 	.word	0x08004755
 800472c:	0800476b 	.word	0x0800476b
 8004730:	0800475b 	.word	0x0800475b
 8004734:	0800476b 	.word	0x0800476b
 8004738:	0800476b 	.word	0x0800476b
 800473c:	0800476b 	.word	0x0800476b
 8004740:	08004763 	.word	0x08004763
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004744:	f7fe fde4 	bl	8003310 <HAL_RCC_GetPCLK1Freq>
 8004748:	61b8      	str	r0, [r7, #24]
        break;
 800474a:	e013      	b.n	8004774 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800474c:	f7fe fdf4 	bl	8003338 <HAL_RCC_GetPCLK2Freq>
 8004750:	61b8      	str	r0, [r7, #24]
        break;
 8004752:	e00f      	b.n	8004774 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004754:	4b1d      	ldr	r3, [pc, #116]	@ (80047cc <UART_SetConfig+0x4c4>)
 8004756:	61bb      	str	r3, [r7, #24]
        break;
 8004758:	e00c      	b.n	8004774 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800475a:	f7fe fd07 	bl	800316c <HAL_RCC_GetSysClockFreq>
 800475e:	61b8      	str	r0, [r7, #24]
        break;
 8004760:	e008      	b.n	8004774 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004762:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004766:	61bb      	str	r3, [r7, #24]
        break;
 8004768:	e004      	b.n	8004774 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	77bb      	strb	r3, [r7, #30]
        break;
 8004772:	bf00      	nop
    }

    if (pclk != 0U)
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d018      	beq.n	80047ac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	085a      	lsrs	r2, r3, #1
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	441a      	add	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	fbb2 f3f3 	udiv	r3, r2, r3
 800478c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	2b0f      	cmp	r3, #15
 8004792:	d909      	bls.n	80047a8 <UART_SetConfig+0x4a0>
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800479a:	d205      	bcs.n	80047a8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	b29a      	uxth	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	60da      	str	r2, [r3, #12]
 80047a6:	e001      	b.n	80047ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80047b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3720      	adds	r7, #32
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40007c00 	.word	0x40007c00
 80047c8:	40023800 	.word	0x40023800
 80047cc:	00f42400 	.word	0x00f42400

080047d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00a      	beq.n	80047fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00a      	beq.n	800483e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004864:	f003 0310 	and.w	r3, r3, #16
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00a      	beq.n	8004882 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004886:	f003 0320 	and.w	r3, r3, #32
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01a      	beq.n	80048e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048ce:	d10a      	bne.n	80048e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	605a      	str	r2, [r3, #4]
  }
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af02      	add	r7, sp, #8
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004924:	f7fc fa98 	bl	8000e58 <HAL_GetTick>
 8004928:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	2b08      	cmp	r3, #8
 8004936:	d10e      	bne.n	8004956 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004938:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f81b 	bl	8004982 <UART_WaitOnFlagUntilTimeout>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e011      	b.n	800497a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2220      	movs	r2, #32
 800495a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2220      	movs	r2, #32
 8004960:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b09c      	sub	sp, #112	@ 0x70
 8004986:	af00      	add	r7, sp, #0
 8004988:	60f8      	str	r0, [r7, #12]
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	603b      	str	r3, [r7, #0]
 800498e:	4613      	mov	r3, r2
 8004990:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004992:	e0a7      	b.n	8004ae4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004994:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004996:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800499a:	f000 80a3 	beq.w	8004ae4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800499e:	f7fc fa5b 	bl	8000e58 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d302      	bcc.n	80049b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80049ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d13f      	bne.n	8004a34 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80049c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049c4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80049c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80049d8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80049e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1e6      	bne.n	80049b4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	3308      	adds	r3, #8
 80049ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f8:	f023 0301 	bic.w	r3, r3, #1
 80049fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3308      	adds	r3, #8
 8004a04:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a06:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004a08:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004a0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a0e:	e841 2300 	strex	r3, r2, [r1]
 8004a12:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004a14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1e5      	bne.n	80049e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e068      	b.n	8004b06 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0304 	and.w	r3, r3, #4
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d050      	beq.n	8004ae4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a50:	d148      	bne.n	8004ae4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a5a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004a70:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	461a      	mov	r2, r3
 8004a78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a7c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004a80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a82:	e841 2300 	strex	r3, r2, [r1]
 8004a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1e6      	bne.n	8004a5c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3308      	adds	r3, #8
 8004a94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	e853 3f00 	ldrex	r3, [r3]
 8004a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f023 0301 	bic.w	r3, r3, #1
 8004aa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3308      	adds	r3, #8
 8004aac:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004aae:	623a      	str	r2, [r7, #32]
 8004ab0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab2:	69f9      	ldr	r1, [r7, #28]
 8004ab4:	6a3a      	ldr	r2, [r7, #32]
 8004ab6:	e841 2300 	strex	r3, r2, [r1]
 8004aba:	61bb      	str	r3, [r7, #24]
   return(result);
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1e5      	bne.n	8004a8e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e010      	b.n	8004b06 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	69da      	ldr	r2, [r3, #28]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	4013      	ands	r3, r2
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	bf0c      	ite	eq
 8004af4:	2301      	moveq	r3, #1
 8004af6:	2300      	movne	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	461a      	mov	r2, r3
 8004afc:	79fb      	ldrb	r3, [r7, #7]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	f43f af48 	beq.w	8004994 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3770      	adds	r7, #112	@ 0x70
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
	...

08004b10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b10:	b084      	sub	sp, #16
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b084      	sub	sp, #16
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	f107 001c 	add.w	r0, r7, #28
 8004b1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d120      	bne.n	8004b6a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b2c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	4b20      	ldr	r3, [pc, #128]	@ (8004bbc <USB_CoreInit+0xac>)
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d105      	bne.n	8004b5e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f001 fbee 	bl	8006340 <USB_CoreReset>
 8004b64:	4603      	mov	r3, r0
 8004b66:	73fb      	strb	r3, [r7, #15]
 8004b68:	e010      	b.n	8004b8c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f001 fbe2 	bl	8006340 <USB_CoreReset>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b84:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d10b      	bne.n	8004baa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f043 0206 	orr.w	r2, r3, #6
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f043 0220 	orr.w	r2, r3, #32
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bb6:	b004      	add	sp, #16
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	ffbdffbf 	.word	0xffbdffbf

08004bc0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d165      	bne.n	8004ca0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	4a41      	ldr	r2, [pc, #260]	@ (8004cdc <USB_SetTurnaroundTime+0x11c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d906      	bls.n	8004bea <USB_SetTurnaroundTime+0x2a>
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	4a40      	ldr	r2, [pc, #256]	@ (8004ce0 <USB_SetTurnaroundTime+0x120>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d202      	bcs.n	8004bea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004be4:	230f      	movs	r3, #15
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	e062      	b.n	8004cb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	4a3c      	ldr	r2, [pc, #240]	@ (8004ce0 <USB_SetTurnaroundTime+0x120>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d306      	bcc.n	8004c00 <USB_SetTurnaroundTime+0x40>
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	4a3b      	ldr	r2, [pc, #236]	@ (8004ce4 <USB_SetTurnaroundTime+0x124>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d202      	bcs.n	8004c00 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004bfa:	230e      	movs	r3, #14
 8004bfc:	617b      	str	r3, [r7, #20]
 8004bfe:	e057      	b.n	8004cb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	4a38      	ldr	r2, [pc, #224]	@ (8004ce4 <USB_SetTurnaroundTime+0x124>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d306      	bcc.n	8004c16 <USB_SetTurnaroundTime+0x56>
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	4a37      	ldr	r2, [pc, #220]	@ (8004ce8 <USB_SetTurnaroundTime+0x128>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d202      	bcs.n	8004c16 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004c10:	230d      	movs	r3, #13
 8004c12:	617b      	str	r3, [r7, #20]
 8004c14:	e04c      	b.n	8004cb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	4a33      	ldr	r2, [pc, #204]	@ (8004ce8 <USB_SetTurnaroundTime+0x128>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d306      	bcc.n	8004c2c <USB_SetTurnaroundTime+0x6c>
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	4a32      	ldr	r2, [pc, #200]	@ (8004cec <USB_SetTurnaroundTime+0x12c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d802      	bhi.n	8004c2c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004c26:	230c      	movs	r3, #12
 8004c28:	617b      	str	r3, [r7, #20]
 8004c2a:	e041      	b.n	8004cb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4a2f      	ldr	r2, [pc, #188]	@ (8004cec <USB_SetTurnaroundTime+0x12c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d906      	bls.n	8004c42 <USB_SetTurnaroundTime+0x82>
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	4a2e      	ldr	r2, [pc, #184]	@ (8004cf0 <USB_SetTurnaroundTime+0x130>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d802      	bhi.n	8004c42 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004c3c:	230b      	movs	r3, #11
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	e036      	b.n	8004cb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	4a2a      	ldr	r2, [pc, #168]	@ (8004cf0 <USB_SetTurnaroundTime+0x130>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d906      	bls.n	8004c58 <USB_SetTurnaroundTime+0x98>
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	4a29      	ldr	r2, [pc, #164]	@ (8004cf4 <USB_SetTurnaroundTime+0x134>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d802      	bhi.n	8004c58 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004c52:	230a      	movs	r3, #10
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	e02b      	b.n	8004cb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	4a26      	ldr	r2, [pc, #152]	@ (8004cf4 <USB_SetTurnaroundTime+0x134>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d906      	bls.n	8004c6e <USB_SetTurnaroundTime+0xae>
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	4a25      	ldr	r2, [pc, #148]	@ (8004cf8 <USB_SetTurnaroundTime+0x138>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d202      	bcs.n	8004c6e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004c68:	2309      	movs	r3, #9
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	e020      	b.n	8004cb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	4a21      	ldr	r2, [pc, #132]	@ (8004cf8 <USB_SetTurnaroundTime+0x138>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d306      	bcc.n	8004c84 <USB_SetTurnaroundTime+0xc4>
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	4a20      	ldr	r2, [pc, #128]	@ (8004cfc <USB_SetTurnaroundTime+0x13c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d802      	bhi.n	8004c84 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004c7e:	2308      	movs	r3, #8
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	e015      	b.n	8004cb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	4a1d      	ldr	r2, [pc, #116]	@ (8004cfc <USB_SetTurnaroundTime+0x13c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d906      	bls.n	8004c9a <USB_SetTurnaroundTime+0xda>
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	4a1c      	ldr	r2, [pc, #112]	@ (8004d00 <USB_SetTurnaroundTime+0x140>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d202      	bcs.n	8004c9a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004c94:	2307      	movs	r3, #7
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	e00a      	b.n	8004cb0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004c9a:	2306      	movs	r3, #6
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	e007      	b.n	8004cb0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004ca0:	79fb      	ldrb	r3, [r7, #7]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d102      	bne.n	8004cac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004ca6:	2309      	movs	r3, #9
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	e001      	b.n	8004cb0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004cac:	2309      	movs	r3, #9
 8004cae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	029b      	lsls	r3, r3, #10
 8004cc4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	371c      	adds	r7, #28
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	00d8acbf 	.word	0x00d8acbf
 8004ce0:	00e4e1c0 	.word	0x00e4e1c0
 8004ce4:	00f42400 	.word	0x00f42400
 8004ce8:	01067380 	.word	0x01067380
 8004cec:	011a499f 	.word	0x011a499f
 8004cf0:	01312cff 	.word	0x01312cff
 8004cf4:	014ca43f 	.word	0x014ca43f
 8004cf8:	016e3600 	.word	0x016e3600
 8004cfc:	01a6ab1f 	.word	0x01a6ab1f
 8004d00:	01e84800 	.word	0x01e84800

08004d04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f043 0201 	orr.w	r2, r3, #1
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f023 0201 	bic.w	r2, r3, #1
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	460b      	mov	r3, r1
 8004d52:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d64:	78fb      	ldrb	r3, [r7, #3]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d115      	bne.n	8004d96 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d76:	2001      	movs	r0, #1
 8004d78:	f7fc f87a 	bl	8000e70 <HAL_Delay>
      ms++;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f001 fa4b 	bl	800621e <USB_GetMode>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d01e      	beq.n	8004dcc <USB_SetCurrentMode+0x84>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b31      	cmp	r3, #49	@ 0x31
 8004d92:	d9f0      	bls.n	8004d76 <USB_SetCurrentMode+0x2e>
 8004d94:	e01a      	b.n	8004dcc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d96:	78fb      	ldrb	r3, [r7, #3]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d115      	bne.n	8004dc8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004da8:	2001      	movs	r0, #1
 8004daa:	f7fc f861 	bl	8000e70 <HAL_Delay>
      ms++;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	3301      	adds	r3, #1
 8004db2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f001 fa32 	bl	800621e <USB_GetMode>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <USB_SetCurrentMode+0x84>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b31      	cmp	r3, #49	@ 0x31
 8004dc4:	d9f0      	bls.n	8004da8 <USB_SetCurrentMode+0x60>
 8004dc6:	e001      	b.n	8004dcc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e005      	b.n	8004dd8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b32      	cmp	r3, #50	@ 0x32
 8004dd0:	d101      	bne.n	8004dd6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004de0:	b084      	sub	sp, #16
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b086      	sub	sp, #24
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004dee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004df2:	2300      	movs	r3, #0
 8004df4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	e009      	b.n	8004e14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	3340      	adds	r3, #64	@ 0x40
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	3301      	adds	r3, #1
 8004e12:	613b      	str	r3, [r7, #16]
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	2b0e      	cmp	r3, #14
 8004e18:	d9f2      	bls.n	8004e00 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d11c      	bne.n	8004e5a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e2e:	f043 0302 	orr.w	r3, r3, #2
 8004e32:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e38:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	e005      	b.n	8004e66 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e5e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	2300      	movs	r3, #0
 8004e70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e78:	4619      	mov	r1, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e80:	461a      	mov	r2, r3
 8004e82:	680b      	ldr	r3, [r1, #0]
 8004e84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d10c      	bne.n	8004ea6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d104      	bne.n	8004e9c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e92:	2100      	movs	r1, #0
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f965 	bl	8005164 <USB_SetDevSpeed>
 8004e9a:	e008      	b.n	8004eae <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f960 	bl	8005164 <USB_SetDevSpeed>
 8004ea4:	e003      	b.n	8004eae <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ea6:	2103      	movs	r1, #3
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f95b 	bl	8005164 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004eae:	2110      	movs	r1, #16
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f8f3 	bl	800509c <USB_FlushTxFifo>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f91f 	bl	8005104 <USB_FlushRxFifo>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	2300      	movs	r3, #0
 8004eda:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eee:	461a      	mov	r2, r3
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	613b      	str	r3, [r7, #16]
 8004ef8:	e043      	b.n	8004f82 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f10:	d118      	bne.n	8004f44 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10a      	bne.n	8004f2e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f24:	461a      	mov	r2, r3
 8004f26:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004f2a:	6013      	str	r3, [r2, #0]
 8004f2c:	e013      	b.n	8004f56 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	e008      	b.n	8004f56 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f50:	461a      	mov	r2, r3
 8004f52:	2300      	movs	r3, #0
 8004f54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f62:	461a      	mov	r2, r3
 8004f64:	2300      	movs	r3, #0
 8004f66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f74:	461a      	mov	r2, r3
 8004f76:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004f7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	613b      	str	r3, [r7, #16]
 8004f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d3b7      	bcc.n	8004efa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	e043      	b.n	8005018 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fa2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fa6:	d118      	bne.n	8004fda <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10a      	bne.n	8004fc4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	e013      	b.n	8004fec <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	e008      	b.n	8004fec <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	2300      	movs	r3, #0
 8004fea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800500a:	461a      	mov	r2, r3
 800500c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005010:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	3301      	adds	r3, #1
 8005016:	613b      	str	r3, [r7, #16]
 8005018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	429a      	cmp	r2, r3
 800501e:	d3b7      	bcc.n	8004f90 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800502e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005032:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005040:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005044:	2b00      	cmp	r3, #0
 8005046:	d105      	bne.n	8005054 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	f043 0210 	orr.w	r2, r3, #16
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699a      	ldr	r2, [r3, #24]
 8005058:	4b0e      	ldr	r3, [pc, #56]	@ (8005094 <USB_DevInit+0x2b4>)
 800505a:	4313      	orrs	r3, r2
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005062:	2b00      	cmp	r3, #0
 8005064:	d005      	beq.n	8005072 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	f043 0208 	orr.w	r2, r3, #8
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005072:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005074:	2b01      	cmp	r3, #1
 8005076:	d105      	bne.n	8005084 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	699a      	ldr	r2, [r3, #24]
 800507c:	4b06      	ldr	r3, [pc, #24]	@ (8005098 <USB_DevInit+0x2b8>)
 800507e:	4313      	orrs	r3, r2
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005084:	7dfb      	ldrb	r3, [r7, #23]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005090:	b004      	add	sp, #16
 8005092:	4770      	bx	lr
 8005094:	803c3800 	.word	0x803c3800
 8005098:	40000004 	.word	0x40000004

0800509c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	3301      	adds	r3, #1
 80050ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4a13      	ldr	r2, [pc, #76]	@ (8005100 <USB_FlushTxFifo+0x64>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d901      	bls.n	80050bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e01b      	b.n	80050f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	daf2      	bge.n	80050aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	019b      	lsls	r3, r3, #6
 80050cc:	f043 0220 	orr.w	r2, r3, #32
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	3301      	adds	r3, #1
 80050d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4a08      	ldr	r2, [pc, #32]	@ (8005100 <USB_FlushTxFifo+0x64>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d901      	bls.n	80050e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e006      	b.n	80050f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f003 0320 	and.w	r3, r3, #32
 80050ee:	2b20      	cmp	r3, #32
 80050f0:	d0f0      	beq.n	80050d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	00030d40 	.word	0x00030d40

08005104 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	3301      	adds	r3, #1
 8005114:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4a11      	ldr	r2, [pc, #68]	@ (8005160 <USB_FlushRxFifo+0x5c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d901      	bls.n	8005122 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e018      	b.n	8005154 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	2b00      	cmp	r3, #0
 8005128:	daf2      	bge.n	8005110 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800512a:	2300      	movs	r3, #0
 800512c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2210      	movs	r2, #16
 8005132:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	3301      	adds	r3, #1
 8005138:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4a08      	ldr	r2, [pc, #32]	@ (8005160 <USB_FlushRxFifo+0x5c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d901      	bls.n	8005146 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e006      	b.n	8005154 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f003 0310 	and.w	r3, r3, #16
 800514e:	2b10      	cmp	r3, #16
 8005150:	d0f0      	beq.n	8005134 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	00030d40 	.word	0x00030d40

08005164 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	460b      	mov	r3, r1
 800516e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	78fb      	ldrb	r3, [r7, #3]
 800517e:	68f9      	ldr	r1, [r7, #12]
 8005180:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005184:	4313      	orrs	r3, r2
 8005186:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005196:	b480      	push	{r7}
 8005198:	b087      	sub	sp, #28
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f003 0306 	and.w	r3, r3, #6
 80051ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d102      	bne.n	80051bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80051b6:	2300      	movs	r3, #0
 80051b8:	75fb      	strb	r3, [r7, #23]
 80051ba:	e00a      	b.n	80051d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d002      	beq.n	80051c8 <USB_GetDevSpeed+0x32>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2b06      	cmp	r3, #6
 80051c6:	d102      	bne.n	80051ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80051c8:	2302      	movs	r3, #2
 80051ca:	75fb      	strb	r3, [r7, #23]
 80051cc:	e001      	b.n	80051d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80051ce:	230f      	movs	r3, #15
 80051d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80051d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	371c      	adds	r7, #28
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	785b      	ldrb	r3, [r3, #1]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d139      	bne.n	8005270 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005202:	69da      	ldr	r2, [r3, #28]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	f003 030f 	and.w	r3, r3, #15
 800520c:	2101      	movs	r1, #1
 800520e:	fa01 f303 	lsl.w	r3, r1, r3
 8005212:	b29b      	uxth	r3, r3
 8005214:	68f9      	ldr	r1, [r7, #12]
 8005216:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800521a:	4313      	orrs	r3, r2
 800521c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d153      	bne.n	80052dc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	791b      	ldrb	r3, [r3, #4]
 800524e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005250:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	059b      	lsls	r3, r3, #22
 8005256:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005258:	431a      	orrs	r2, r3
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	0159      	lsls	r1, r3, #5
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	440b      	add	r3, r1
 8005262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005266:	4619      	mov	r1, r3
 8005268:	4b20      	ldr	r3, [pc, #128]	@ (80052ec <USB_ActivateEndpoint+0x10c>)
 800526a:	4313      	orrs	r3, r2
 800526c:	600b      	str	r3, [r1, #0]
 800526e:	e035      	b.n	80052dc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005276:	69da      	ldr	r2, [r3, #28]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	f003 030f 	and.w	r3, r3, #15
 8005280:	2101      	movs	r1, #1
 8005282:	fa01 f303 	lsl.w	r3, r1, r3
 8005286:	041b      	lsls	r3, r3, #16
 8005288:	68f9      	ldr	r1, [r7, #12]
 800528a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800528e:	4313      	orrs	r3, r2
 8005290:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d119      	bne.n	80052dc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	791b      	ldrb	r3, [r3, #4]
 80052c2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80052c4:	430b      	orrs	r3, r1
 80052c6:	431a      	orrs	r2, r3
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	0159      	lsls	r1, r3, #5
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	440b      	add	r3, r1
 80052d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052d4:	4619      	mov	r1, r3
 80052d6:	4b05      	ldr	r3, [pc, #20]	@ (80052ec <USB_ActivateEndpoint+0x10c>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	10008000 	.word	0x10008000

080052f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	785b      	ldrb	r3, [r3, #1]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d161      	bne.n	80053d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800531e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005322:	d11f      	bne.n	8005364 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4413      	add	r3, r2
 800532c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	0151      	lsls	r1, r2, #5
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	440a      	add	r2, r1
 800533a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800533e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005342:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	0151      	lsls	r1, r2, #5
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	440a      	add	r2, r1
 800535a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800535e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005362:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800536a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	f003 030f 	and.w	r3, r3, #15
 8005374:	2101      	movs	r1, #1
 8005376:	fa01 f303 	lsl.w	r3, r1, r3
 800537a:	b29b      	uxth	r3, r3
 800537c:	43db      	mvns	r3, r3
 800537e:	68f9      	ldr	r1, [r7, #12]
 8005380:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005384:	4013      	ands	r3, r2
 8005386:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800538e:	69da      	ldr	r2, [r3, #28]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	f003 030f 	and.w	r3, r3, #15
 8005398:	2101      	movs	r1, #1
 800539a:	fa01 f303 	lsl.w	r3, r1, r3
 800539e:	b29b      	uxth	r3, r3
 80053a0:	43db      	mvns	r3, r3
 80053a2:	68f9      	ldr	r1, [r7, #12]
 80053a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053a8:	4013      	ands	r3, r2
 80053aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	0159      	lsls	r1, r3, #5
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	440b      	add	r3, r1
 80053c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053c6:	4619      	mov	r1, r3
 80053c8:	4b35      	ldr	r3, [pc, #212]	@ (80054a0 <USB_DeactivateEndpoint+0x1b0>)
 80053ca:	4013      	ands	r3, r2
 80053cc:	600b      	str	r3, [r1, #0]
 80053ce:	e060      	b.n	8005492 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053e6:	d11f      	bne.n	8005428 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	0151      	lsls	r1, r2, #5
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	440a      	add	r2, r1
 80053fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005402:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005406:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	0151      	lsls	r1, r2, #5
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	440a      	add	r2, r1
 800541e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005422:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005426:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800542e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	f003 030f 	and.w	r3, r3, #15
 8005438:	2101      	movs	r1, #1
 800543a:	fa01 f303 	lsl.w	r3, r1, r3
 800543e:	041b      	lsls	r3, r3, #16
 8005440:	43db      	mvns	r3, r3
 8005442:	68f9      	ldr	r1, [r7, #12]
 8005444:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005448:	4013      	ands	r3, r2
 800544a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005452:	69da      	ldr	r2, [r3, #28]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	f003 030f 	and.w	r3, r3, #15
 800545c:	2101      	movs	r1, #1
 800545e:	fa01 f303 	lsl.w	r3, r1, r3
 8005462:	041b      	lsls	r3, r3, #16
 8005464:	43db      	mvns	r3, r3
 8005466:	68f9      	ldr	r1, [r7, #12]
 8005468:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800546c:	4013      	ands	r3, r2
 800546e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	0159      	lsls	r1, r3, #5
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	440b      	add	r3, r1
 8005486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800548a:	4619      	mov	r1, r3
 800548c:	4b05      	ldr	r3, [pc, #20]	@ (80054a4 <USB_DeactivateEndpoint+0x1b4>)
 800548e:	4013      	ands	r3, r2
 8005490:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	ec337800 	.word	0xec337800
 80054a4:	eff37800 	.word	0xeff37800

080054a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08a      	sub	sp, #40	@ 0x28
 80054ac:	af02      	add	r7, sp, #8
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	4613      	mov	r3, r2
 80054b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	785b      	ldrb	r3, [r3, #1]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	f040 8163 	bne.w	8005790 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d132      	bne.n	8005538 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054de:	691a      	ldr	r2, [r3, #16]
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	0159      	lsls	r1, r3, #5
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	440b      	add	r3, r1
 80054e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ec:	4619      	mov	r1, r3
 80054ee:	4ba5      	ldr	r3, [pc, #660]	@ (8005784 <USB_EPStartXfer+0x2dc>)
 80054f0:	4013      	ands	r3, r2
 80054f2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	0151      	lsls	r1, r2, #5
 8005506:	69fa      	ldr	r2, [r7, #28]
 8005508:	440a      	add	r2, r1
 800550a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800550e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005512:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005520:	691a      	ldr	r2, [r3, #16]
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	0159      	lsls	r1, r3, #5
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	440b      	add	r3, r1
 800552a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800552e:	4619      	mov	r1, r3
 8005530:	4b95      	ldr	r3, [pc, #596]	@ (8005788 <USB_EPStartXfer+0x2e0>)
 8005532:	4013      	ands	r3, r2
 8005534:	610b      	str	r3, [r1, #16]
 8005536:	e074      	b.n	8005622 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005544:	691a      	ldr	r2, [r3, #16]
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	0159      	lsls	r1, r3, #5
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	440b      	add	r3, r1
 800554e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005552:	4619      	mov	r1, r3
 8005554:	4b8c      	ldr	r3, [pc, #560]	@ (8005788 <USB_EPStartXfer+0x2e0>)
 8005556:	4013      	ands	r3, r2
 8005558:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	0159      	lsls	r1, r3, #5
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	440b      	add	r3, r1
 8005570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005574:	4619      	mov	r1, r3
 8005576:	4b83      	ldr	r3, [pc, #524]	@ (8005784 <USB_EPStartXfer+0x2dc>)
 8005578:	4013      	ands	r3, r2
 800557a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005588:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	6999      	ldr	r1, [r3, #24]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	440b      	add	r3, r1
 8005594:	1e59      	subs	r1, r3, #1
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	fbb1 f3f3 	udiv	r3, r1, r3
 800559e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80055a0:	4b7a      	ldr	r3, [pc, #488]	@ (800578c <USB_EPStartXfer+0x2e4>)
 80055a2:	400b      	ands	r3, r1
 80055a4:	69b9      	ldr	r1, [r7, #24]
 80055a6:	0148      	lsls	r0, r1, #5
 80055a8:	69f9      	ldr	r1, [r7, #28]
 80055aa:	4401      	add	r1, r0
 80055ac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80055b0:	4313      	orrs	r3, r2
 80055b2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055c0:	691a      	ldr	r2, [r3, #16]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ca:	69b9      	ldr	r1, [r7, #24]
 80055cc:	0148      	lsls	r0, r1, #5
 80055ce:	69f9      	ldr	r1, [r7, #28]
 80055d0:	4401      	add	r1, r0
 80055d2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80055d6:	4313      	orrs	r3, r2
 80055d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	791b      	ldrb	r3, [r3, #4]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d11f      	bne.n	8005622 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	0151      	lsls	r1, r2, #5
 80055f4:	69fa      	ldr	r2, [r7, #28]
 80055f6:	440a      	add	r2, r1
 80055f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055fc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005600:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	0151      	lsls	r1, r2, #5
 8005614:	69fa      	ldr	r2, [r7, #28]
 8005616:	440a      	add	r2, r1
 8005618:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800561c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005620:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005622:	79fb      	ldrb	r3, [r7, #7]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d14b      	bne.n	80056c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d009      	beq.n	8005644 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800563c:	461a      	mov	r2, r3
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	791b      	ldrb	r3, [r3, #4]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d128      	bne.n	800569e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005658:	2b00      	cmp	r3, #0
 800565a:	d110      	bne.n	800567e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	4413      	add	r3, r2
 8005664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	0151      	lsls	r1, r2, #5
 800566e:	69fa      	ldr	r2, [r7, #28]
 8005670:	440a      	add	r2, r1
 8005672:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005676:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800567a:	6013      	str	r3, [r2, #0]
 800567c:	e00f      	b.n	800569e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	015a      	lsls	r2, r3, #5
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	4413      	add	r3, r2
 8005686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	0151      	lsls	r1, r2, #5
 8005690:	69fa      	ldr	r2, [r7, #28]
 8005692:	440a      	add	r2, r1
 8005694:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800569c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	0151      	lsls	r1, r2, #5
 80056b0:	69fa      	ldr	r2, [r7, #28]
 80056b2:	440a      	add	r2, r1
 80056b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056b8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80056bc:	6013      	str	r3, [r2, #0]
 80056be:	e137      	b.n	8005930 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	0151      	lsls	r1, r2, #5
 80056d2:	69fa      	ldr	r2, [r7, #28]
 80056d4:	440a      	add	r2, r1
 80056d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056da:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80056de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	791b      	ldrb	r3, [r3, #4]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d015      	beq.n	8005714 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 811f 	beq.w	8005930 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	2101      	movs	r1, #1
 8005704:	fa01 f303 	lsl.w	r3, r1, r3
 8005708:	69f9      	ldr	r1, [r7, #28]
 800570a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800570e:	4313      	orrs	r3, r2
 8005710:	634b      	str	r3, [r1, #52]	@ 0x34
 8005712:	e10d      	b.n	8005930 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005720:	2b00      	cmp	r3, #0
 8005722:	d110      	bne.n	8005746 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	0151      	lsls	r1, r2, #5
 8005736:	69fa      	ldr	r2, [r7, #28]
 8005738:	440a      	add	r2, r1
 800573a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800573e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	e00f      	b.n	8005766 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	4413      	add	r3, r2
 800574e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	0151      	lsls	r1, r2, #5
 8005758:	69fa      	ldr	r2, [r7, #28]
 800575a:	440a      	add	r2, r1
 800575c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005764:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	6919      	ldr	r1, [r3, #16]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	781a      	ldrb	r2, [r3, #0]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	b298      	uxth	r0, r3
 8005774:	79fb      	ldrb	r3, [r7, #7]
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	4603      	mov	r3, r0
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 faea 	bl	8005d54 <USB_WritePacket>
 8005780:	e0d6      	b.n	8005930 <USB_EPStartXfer+0x488>
 8005782:	bf00      	nop
 8005784:	e007ffff 	.word	0xe007ffff
 8005788:	fff80000 	.word	0xfff80000
 800578c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800579c:	691a      	ldr	r2, [r3, #16]
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	0159      	lsls	r1, r3, #5
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	440b      	add	r3, r1
 80057a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057aa:	4619      	mov	r1, r3
 80057ac:	4b63      	ldr	r3, [pc, #396]	@ (800593c <USB_EPStartXfer+0x494>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	0159      	lsls	r1, r3, #5
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	440b      	add	r3, r1
 80057c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057cc:	4619      	mov	r1, r3
 80057ce:	4b5c      	ldr	r3, [pc, #368]	@ (8005940 <USB_EPStartXfer+0x498>)
 80057d0:	4013      	ands	r3, r2
 80057d2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d123      	bne.n	8005824 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057e8:	691a      	ldr	r2, [r3, #16]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057f2:	69b9      	ldr	r1, [r7, #24]
 80057f4:	0148      	lsls	r0, r1, #5
 80057f6:	69f9      	ldr	r1, [r7, #28]
 80057f8:	4401      	add	r1, r0
 80057fa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80057fe:	4313      	orrs	r3, r2
 8005800:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	4413      	add	r3, r2
 800580a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	0151      	lsls	r1, r2, #5
 8005814:	69fa      	ldr	r2, [r7, #28]
 8005816:	440a      	add	r2, r1
 8005818:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800581c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005820:	6113      	str	r3, [r2, #16]
 8005822:	e037      	b.n	8005894 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	699a      	ldr	r2, [r3, #24]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	4413      	add	r3, r2
 800582e:	1e5a      	subs	r2, r3, #1
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	fbb2 f3f3 	udiv	r3, r2, r3
 8005838:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	8afa      	ldrh	r2, [r7, #22]
 8005840:	fb03 f202 	mul.w	r2, r3, r2
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005854:	691a      	ldr	r2, [r3, #16]
 8005856:	8afb      	ldrh	r3, [r7, #22]
 8005858:	04d9      	lsls	r1, r3, #19
 800585a:	4b3a      	ldr	r3, [pc, #232]	@ (8005944 <USB_EPStartXfer+0x49c>)
 800585c:	400b      	ands	r3, r1
 800585e:	69b9      	ldr	r1, [r7, #24]
 8005860:	0148      	lsls	r0, r1, #5
 8005862:	69f9      	ldr	r1, [r7, #28]
 8005864:	4401      	add	r1, r0
 8005866:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800586a:	4313      	orrs	r3, r2
 800586c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	4413      	add	r3, r2
 8005876:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800587a:	691a      	ldr	r2, [r3, #16]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005884:	69b9      	ldr	r1, [r7, #24]
 8005886:	0148      	lsls	r0, r1, #5
 8005888:	69f9      	ldr	r1, [r7, #28]
 800588a:	4401      	add	r1, r0
 800588c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005890:	4313      	orrs	r3, r2
 8005892:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005894:	79fb      	ldrb	r3, [r7, #7]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d10d      	bne.n	80058b6 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d009      	beq.n	80058b6 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	6919      	ldr	r1, [r3, #16]
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058b2:	460a      	mov	r2, r1
 80058b4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	791b      	ldrb	r3, [r3, #4]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d128      	bne.n	8005910 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d110      	bne.n	80058f0 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	0151      	lsls	r1, r2, #5
 80058e0:	69fa      	ldr	r2, [r7, #28]
 80058e2:	440a      	add	r2, r1
 80058e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80058ec:	6013      	str	r3, [r2, #0]
 80058ee:	e00f      	b.n	8005910 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	0151      	lsls	r1, r2, #5
 8005902:	69fa      	ldr	r2, [r7, #28]
 8005904:	440a      	add	r2, r1
 8005906:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800590a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800590e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	0151      	lsls	r1, r2, #5
 8005922:	69fa      	ldr	r2, [r7, #28]
 8005924:	440a      	add	r2, r1
 8005926:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800592a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800592e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3720      	adds	r7, #32
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	fff80000 	.word	0xfff80000
 8005940:	e007ffff 	.word	0xe007ffff
 8005944:	1ff80000 	.word	0x1ff80000

08005948 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	4613      	mov	r3, r2
 8005954:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	785b      	ldrb	r3, [r3, #1]
 8005964:	2b01      	cmp	r3, #1
 8005966:	f040 80ce 	bne.w	8005b06 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d132      	bne.n	80059d8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	0159      	lsls	r1, r3, #5
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	440b      	add	r3, r1
 8005988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800598c:	4619      	mov	r1, r3
 800598e:	4b9a      	ldr	r3, [pc, #616]	@ (8005bf8 <USB_EP0StartXfer+0x2b0>)
 8005990:	4013      	ands	r3, r2
 8005992:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	0151      	lsls	r1, r2, #5
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	440a      	add	r2, r1
 80059aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80059b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059c0:	691a      	ldr	r2, [r3, #16]
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	0159      	lsls	r1, r3, #5
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	440b      	add	r3, r1
 80059ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059ce:	4619      	mov	r1, r3
 80059d0:	4b8a      	ldr	r3, [pc, #552]	@ (8005bfc <USB_EP0StartXfer+0x2b4>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	610b      	str	r3, [r1, #16]
 80059d6:	e04e      	b.n	8005a76 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059e4:	691a      	ldr	r2, [r3, #16]
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	0159      	lsls	r1, r3, #5
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	440b      	add	r3, r1
 80059ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059f2:	4619      	mov	r1, r3
 80059f4:	4b81      	ldr	r3, [pc, #516]	@ (8005bfc <USB_EP0StartXfer+0x2b4>)
 80059f6:	4013      	ands	r3, r2
 80059f8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a06:	691a      	ldr	r2, [r3, #16]
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	0159      	lsls	r1, r3, #5
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	440b      	add	r3, r1
 8005a10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a14:	4619      	mov	r1, r3
 8005a16:	4b78      	ldr	r3, [pc, #480]	@ (8005bf8 <USB_EP0StartXfer+0x2b0>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	699a      	ldr	r2, [r3, #24]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d903      	bls.n	8005a30 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	0151      	lsls	r1, r2, #5
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	440a      	add	r2, r1
 8005a46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a5c:	691a      	ldr	r2, [r3, #16]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a66:	6939      	ldr	r1, [r7, #16]
 8005a68:	0148      	lsls	r0, r1, #5
 8005a6a:	6979      	ldr	r1, [r7, #20]
 8005a6c:	4401      	add	r1, r0
 8005a6e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005a72:	4313      	orrs	r3, r2
 8005a74:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a76:	79fb      	ldrb	r3, [r7, #7]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d11e      	bne.n	8005aba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d009      	beq.n	8005a98 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a90:	461a      	mov	r2, r3
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	0151      	lsls	r1, r2, #5
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	440a      	add	r2, r1
 8005aae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ab2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005ab6:	6013      	str	r3, [r2, #0]
 8005ab8:	e097      	b.n	8005bea <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	0151      	lsls	r1, r2, #5
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	440a      	add	r2, r1
 8005ad0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ad4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005ad8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 8083 	beq.w	8005bea <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	2101      	movs	r1, #1
 8005af6:	fa01 f303 	lsl.w	r3, r1, r3
 8005afa:	6979      	ldr	r1, [r7, #20]
 8005afc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b00:	4313      	orrs	r3, r2
 8005b02:	634b      	str	r3, [r1, #52]	@ 0x34
 8005b04:	e071      	b.n	8005bea <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b12:	691a      	ldr	r2, [r3, #16]
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	0159      	lsls	r1, r3, #5
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	440b      	add	r3, r1
 8005b1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b20:	4619      	mov	r1, r3
 8005b22:	4b36      	ldr	r3, [pc, #216]	@ (8005bfc <USB_EP0StartXfer+0x2b4>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b34:	691a      	ldr	r2, [r3, #16]
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	0159      	lsls	r1, r3, #5
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	440b      	add	r3, r1
 8005b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b42:	4619      	mov	r1, r3
 8005b44:	4b2c      	ldr	r3, [pc, #176]	@ (8005bf8 <USB_EP0StartXfer+0x2b0>)
 8005b46:	4013      	ands	r3, r2
 8005b48:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	0151      	lsls	r1, r2, #5
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	440a      	add	r2, r1
 8005b78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005b80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b8e:	691a      	ldr	r2, [r3, #16]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b98:	6939      	ldr	r1, [r7, #16]
 8005b9a:	0148      	lsls	r0, r1, #5
 8005b9c:	6979      	ldr	r1, [r7, #20]
 8005b9e:	4401      	add	r1, r0
 8005ba0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005ba8:	79fb      	ldrb	r3, [r7, #7]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d10d      	bne.n	8005bca <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d009      	beq.n	8005bca <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	6919      	ldr	r1, [r3, #16]
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bc6:	460a      	mov	r2, r1
 8005bc8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	0151      	lsls	r1, r2, #5
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	440a      	add	r2, r1
 8005be0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005be4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005be8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	371c      	adds	r7, #28
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	e007ffff 	.word	0xe007ffff
 8005bfc:	fff80000 	.word	0xfff80000

08005c00 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	785b      	ldrb	r3, [r3, #1]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d14a      	bne.n	8005cb4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c36:	f040 8086 	bne.w	8005d46 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	7812      	ldrb	r2, [r2, #0]
 8005c4e:	0151      	lsls	r1, r2, #5
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	440a      	add	r2, r1
 8005c54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c58:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005c5c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	7812      	ldrb	r2, [r2, #0]
 8005c72:	0151      	lsls	r1, r2, #5
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	440a      	add	r2, r1
 8005c78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c80:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	3301      	adds	r3, #1
 8005c86:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d902      	bls.n	8005c98 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	75fb      	strb	r3, [r7, #23]
          break;
 8005c96:	e056      	b.n	8005d46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cb0:	d0e7      	beq.n	8005c82 <USB_EPStopXfer+0x82>
 8005cb2:	e048      	b.n	8005d46 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ccc:	d13b      	bne.n	8005d46 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	7812      	ldrb	r2, [r2, #0]
 8005ce2:	0151      	lsls	r1, r2, #5
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	440a      	add	r2, r1
 8005ce8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005cf0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	7812      	ldrb	r2, [r2, #0]
 8005d06:	0151      	lsls	r1, r2, #5
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	440a      	add	r2, r1
 8005d0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d902      	bls.n	8005d2c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	75fb      	strb	r3, [r7, #23]
          break;
 8005d2a:	e00c      	b.n	8005d46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d44:	d0e7      	beq.n	8005d16 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	371c      	adds	r7, #28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b089      	sub	sp, #36	@ 0x24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	4611      	mov	r1, r2
 8005d60:	461a      	mov	r2, r3
 8005d62:	460b      	mov	r3, r1
 8005d64:	71fb      	strb	r3, [r7, #7]
 8005d66:	4613      	mov	r3, r2
 8005d68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005d72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d123      	bne.n	8005dc2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d7a:	88bb      	ldrh	r3, [r7, #4]
 8005d7c:	3303      	adds	r3, #3
 8005d7e:	089b      	lsrs	r3, r3, #2
 8005d80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d82:	2300      	movs	r3, #0
 8005d84:	61bb      	str	r3, [r7, #24]
 8005d86:	e018      	b.n	8005dba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d88:	79fb      	ldrb	r3, [r7, #7]
 8005d8a:	031a      	lsls	r2, r3, #12
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d94:	461a      	mov	r2, r3
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	3301      	adds	r3, #1
 8005da6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	3301      	adds	r3, #1
 8005dac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	3301      	adds	r3, #1
 8005db2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	3301      	adds	r3, #1
 8005db8:	61bb      	str	r3, [r7, #24]
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d3e2      	bcc.n	8005d88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3724      	adds	r7, #36	@ 0x24
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b08b      	sub	sp, #44	@ 0x2c
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005de6:	88fb      	ldrh	r3, [r7, #6]
 8005de8:	089b      	lsrs	r3, r3, #2
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005dee:	88fb      	ldrh	r3, [r7, #6]
 8005df0:	f003 0303 	and.w	r3, r3, #3
 8005df4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005df6:	2300      	movs	r3, #0
 8005df8:	623b      	str	r3, [r7, #32]
 8005dfa:	e014      	b.n	8005e26 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e06:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e10:	3301      	adds	r3, #1
 8005e12:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e16:	3301      	adds	r3, #1
 8005e18:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005e20:	6a3b      	ldr	r3, [r7, #32]
 8005e22:	3301      	adds	r3, #1
 8005e24:	623b      	str	r3, [r7, #32]
 8005e26:	6a3a      	ldr	r2, [r7, #32]
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d3e6      	bcc.n	8005dfc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005e2e:	8bfb      	ldrh	r3, [r7, #30]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d01e      	beq.n	8005e72 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f107 0310 	add.w	r3, r7, #16
 8005e44:	6812      	ldr	r2, [r2, #0]
 8005e46:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	00db      	lsls	r3, r3, #3
 8005e50:	fa22 f303 	lsr.w	r3, r2, r3
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e58:	701a      	strb	r2, [r3, #0]
      i++;
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e62:	3301      	adds	r3, #1
 8005e64:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005e66:	8bfb      	ldrh	r3, [r7, #30]
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005e6c:	8bfb      	ldrh	r3, [r7, #30]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1ea      	bne.n	8005e48 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	372c      	adds	r7, #44	@ 0x2c
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	785b      	ldrb	r3, [r3, #1]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d12c      	bne.n	8005ef6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	db12      	blt.n	8005ed4 <USB_EPSetStall+0x54>
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00f      	beq.n	8005ed4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	0151      	lsls	r1, r2, #5
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	440a      	add	r2, r1
 8005eca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ece:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005ed2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	0151      	lsls	r1, r2, #5
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	440a      	add	r2, r1
 8005eea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005eee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005ef2:	6013      	str	r3, [r2, #0]
 8005ef4:	e02b      	b.n	8005f4e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	db12      	blt.n	8005f2e <USB_EPSetStall+0xae>
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00f      	beq.n	8005f2e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	0151      	lsls	r1, r2, #5
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	440a      	add	r2, r1
 8005f24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f28:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005f2c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	0151      	lsls	r1, r2, #5
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	440a      	add	r2, r1
 8005f44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005f4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	785b      	ldrb	r3, [r3, #1]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d128      	bne.n	8005fca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	0151      	lsls	r1, r2, #5
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	440a      	add	r2, r1
 8005f8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f92:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f96:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	791b      	ldrb	r3, [r3, #4]
 8005f9c:	2b03      	cmp	r3, #3
 8005f9e:	d003      	beq.n	8005fa8 <USB_EPClearStall+0x4c>
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	791b      	ldrb	r3, [r3, #4]
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d138      	bne.n	800601a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	0151      	lsls	r1, r2, #5
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	440a      	add	r2, r1
 8005fbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fc6:	6013      	str	r3, [r2, #0]
 8005fc8:	e027      	b.n	800601a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	0151      	lsls	r1, r2, #5
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	440a      	add	r2, r1
 8005fe0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fe4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005fe8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	791b      	ldrb	r3, [r3, #4]
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d003      	beq.n	8005ffa <USB_EPClearStall+0x9e>
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	791b      	ldrb	r3, [r3, #4]
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d10f      	bne.n	800601a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	4413      	add	r3, r2
 8006002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	0151      	lsls	r1, r2, #5
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	440a      	add	r2, r1
 8006010:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006018:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	460b      	mov	r3, r1
 8006032:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006046:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800604a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	011b      	lsls	r3, r3, #4
 8006058:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800605c:	68f9      	ldr	r1, [r7, #12]
 800605e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006062:	4313      	orrs	r3, r2
 8006064:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800608e:	f023 0303 	bic.w	r3, r3, #3
 8006092:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060a2:	f023 0302 	bic.w	r3, r3, #2
 80060a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b085      	sub	sp, #20
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80060d0:	f023 0303 	bic.w	r3, r3, #3
 80060d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060e4:	f043 0302 	orr.w	r3, r3, #2
 80060e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	4013      	ands	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006110:	68fb      	ldr	r3, [r7, #12]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800611e:	b480      	push	{r7}
 8006120:	b085      	sub	sp, #20
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	4013      	ands	r3, r2
 8006140:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	0c1b      	lsrs	r3, r3, #16
}
 8006146:	4618      	mov	r0, r3
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006152:	b480      	push	{r7}
 8006154:	b085      	sub	sp, #20
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	4013      	ands	r3, r2
 8006174:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	b29b      	uxth	r3, r3
}
 800617a:	4618      	mov	r0, r3
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006186:	b480      	push	{r7}
 8006188:	b085      	sub	sp, #20
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	460b      	mov	r3, r1
 8006190:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006196:	78fb      	ldrb	r3, [r7, #3]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	4013      	ands	r3, r2
 80061b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061b4:	68bb      	ldr	r3, [r7, #8]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b087      	sub	sp, #28
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	460b      	mov	r3, r1
 80061cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061e4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80061e6:	78fb      	ldrb	r3, [r7, #3]
 80061e8:	f003 030f 	and.w	r3, r3, #15
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	fa22 f303 	lsr.w	r3, r2, r3
 80061f2:	01db      	lsls	r3, r3, #7
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80061fc:	78fb      	ldrb	r3, [r7, #3]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	4013      	ands	r3, r2
 800620e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006210:	68bb      	ldr	r3, [r7, #8]
}
 8006212:	4618      	mov	r0, r3
 8006214:	371c      	adds	r7, #28
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	f003 0301 	and.w	r3, r3, #1
}
 800622e:	4618      	mov	r0, r3
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
	...

0800623c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006256:	4619      	mov	r1, r3
 8006258:	4b09      	ldr	r3, [pc, #36]	@ (8006280 <USB_ActivateSetup+0x44>)
 800625a:	4013      	ands	r3, r2
 800625c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800626c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006270:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	fffff800 	.word	0xfffff800

08006284 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	460b      	mov	r3, r1
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	333c      	adds	r3, #60	@ 0x3c
 800629a:	3304      	adds	r3, #4
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	4a26      	ldr	r2, [pc, #152]	@ (800633c <USB_EP0_OutStart+0xb8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d90a      	bls.n	80062be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062b8:	d101      	bne.n	80062be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80062ba:	2300      	movs	r3, #0
 80062bc:	e037      	b.n	800632e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062c4:	461a      	mov	r2, r3
 80062c6:	2300      	movs	r3, #0
 80062c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80062dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062ec:	f043 0318 	orr.w	r3, r3, #24
 80062f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006300:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006304:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006306:	7afb      	ldrb	r3, [r7, #11]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d10f      	bne.n	800632c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006312:	461a      	mov	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006326:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800632a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	371c      	adds	r7, #28
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	4f54300a 	.word	0x4f54300a

08006340 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006348:	2300      	movs	r3, #0
 800634a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	3301      	adds	r3, #1
 8006350:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	4a13      	ldr	r2, [pc, #76]	@ (80063a4 <USB_CoreReset+0x64>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d901      	bls.n	800635e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e01b      	b.n	8006396 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	2b00      	cmp	r3, #0
 8006364:	daf2      	bge.n	800634c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006366:	2300      	movs	r3, #0
 8006368:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	f043 0201 	orr.w	r2, r3, #1
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	3301      	adds	r3, #1
 800637a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4a09      	ldr	r2, [pc, #36]	@ (80063a4 <USB_CoreReset+0x64>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d901      	bls.n	8006388 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e006      	b.n	8006396 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b01      	cmp	r3, #1
 8006392:	d0f0      	beq.n	8006376 <USB_CoreReset+0x36>

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	00030d40 	.word	0x00030d40

080063a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	460b      	mov	r3, r1
 80063b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80063b4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80063b8:	f005 fbae 	bl	800bb18 <malloc>
 80063bc:	4603      	mov	r3, r0
 80063be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d109      	bne.n	80063da <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	32b0      	adds	r2, #176	@ 0xb0
 80063d0:	2100      	movs	r1, #0
 80063d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80063d6:	2302      	movs	r3, #2
 80063d8:	e0d4      	b.n	8006584 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80063da:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80063de:	2100      	movs	r1, #0
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f005 fc57 	bl	800bc94 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	32b0      	adds	r2, #176	@ 0xb0
 80063f0:	68f9      	ldr	r1, [r7, #12]
 80063f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	32b0      	adds	r2, #176	@ 0xb0
 8006400:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	7c1b      	ldrb	r3, [r3, #16]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d138      	bne.n	8006484 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006412:	4b5e      	ldr	r3, [pc, #376]	@ (800658c <USBD_CDC_Init+0x1e4>)
 8006414:	7819      	ldrb	r1, [r3, #0]
 8006416:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800641a:	2202      	movs	r2, #2
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f005 f9d8 	bl	800b7d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006422:	4b5a      	ldr	r3, [pc, #360]	@ (800658c <USBD_CDC_Init+0x1e4>)
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	f003 020f 	and.w	r2, r3, #15
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	4613      	mov	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	440b      	add	r3, r1
 8006436:	3324      	adds	r3, #36	@ 0x24
 8006438:	2201      	movs	r2, #1
 800643a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800643c:	4b54      	ldr	r3, [pc, #336]	@ (8006590 <USBD_CDC_Init+0x1e8>)
 800643e:	7819      	ldrb	r1, [r3, #0]
 8006440:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006444:	2202      	movs	r2, #2
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f005 f9c3 	bl	800b7d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800644c:	4b50      	ldr	r3, [pc, #320]	@ (8006590 <USBD_CDC_Init+0x1e8>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	f003 020f 	and.w	r2, r3, #15
 8006454:	6879      	ldr	r1, [r7, #4]
 8006456:	4613      	mov	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	440b      	add	r3, r1
 8006460:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006464:	2201      	movs	r2, #1
 8006466:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006468:	4b4a      	ldr	r3, [pc, #296]	@ (8006594 <USBD_CDC_Init+0x1ec>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	f003 020f 	and.w	r2, r3, #15
 8006470:	6879      	ldr	r1, [r7, #4]
 8006472:	4613      	mov	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	440b      	add	r3, r1
 800647c:	3326      	adds	r3, #38	@ 0x26
 800647e:	2210      	movs	r2, #16
 8006480:	801a      	strh	r2, [r3, #0]
 8006482:	e035      	b.n	80064f0 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006484:	4b41      	ldr	r3, [pc, #260]	@ (800658c <USBD_CDC_Init+0x1e4>)
 8006486:	7819      	ldrb	r1, [r3, #0]
 8006488:	2340      	movs	r3, #64	@ 0x40
 800648a:	2202      	movs	r2, #2
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f005 f9a0 	bl	800b7d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006492:	4b3e      	ldr	r3, [pc, #248]	@ (800658c <USBD_CDC_Init+0x1e4>)
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	f003 020f 	and.w	r2, r3, #15
 800649a:	6879      	ldr	r1, [r7, #4]
 800649c:	4613      	mov	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	440b      	add	r3, r1
 80064a6:	3324      	adds	r3, #36	@ 0x24
 80064a8:	2201      	movs	r2, #1
 80064aa:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80064ac:	4b38      	ldr	r3, [pc, #224]	@ (8006590 <USBD_CDC_Init+0x1e8>)
 80064ae:	7819      	ldrb	r1, [r3, #0]
 80064b0:	2340      	movs	r3, #64	@ 0x40
 80064b2:	2202      	movs	r2, #2
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f005 f98c 	bl	800b7d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80064ba:	4b35      	ldr	r3, [pc, #212]	@ (8006590 <USBD_CDC_Init+0x1e8>)
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	f003 020f 	and.w	r2, r3, #15
 80064c2:	6879      	ldr	r1, [r7, #4]
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	440b      	add	r3, r1
 80064ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80064d2:	2201      	movs	r2, #1
 80064d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80064d6:	4b2f      	ldr	r3, [pc, #188]	@ (8006594 <USBD_CDC_Init+0x1ec>)
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	f003 020f 	and.w	r2, r3, #15
 80064de:	6879      	ldr	r1, [r7, #4]
 80064e0:	4613      	mov	r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4413      	add	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	440b      	add	r3, r1
 80064ea:	3326      	adds	r3, #38	@ 0x26
 80064ec:	2210      	movs	r2, #16
 80064ee:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80064f0:	4b28      	ldr	r3, [pc, #160]	@ (8006594 <USBD_CDC_Init+0x1ec>)
 80064f2:	7819      	ldrb	r1, [r3, #0]
 80064f4:	2308      	movs	r3, #8
 80064f6:	2203      	movs	r2, #3
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f005 f96a 	bl	800b7d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80064fe:	4b25      	ldr	r3, [pc, #148]	@ (8006594 <USBD_CDC_Init+0x1ec>)
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	f003 020f 	and.w	r2, r3, #15
 8006506:	6879      	ldr	r1, [r7, #4]
 8006508:	4613      	mov	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	440b      	add	r3, r1
 8006512:	3324      	adds	r3, #36	@ 0x24
 8006514:	2201      	movs	r2, #1
 8006516:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	33b0      	adds	r3, #176	@ 0xb0
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800654e:	2302      	movs	r3, #2
 8006550:	e018      	b.n	8006584 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	7c1b      	ldrb	r3, [r3, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10a      	bne.n	8006570 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800655a:	4b0d      	ldr	r3, [pc, #52]	@ (8006590 <USBD_CDC_Init+0x1e8>)
 800655c:	7819      	ldrb	r1, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006564:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f005 fa21 	bl	800b9b0 <USBD_LL_PrepareReceive>
 800656e:	e008      	b.n	8006582 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006570:	4b07      	ldr	r3, [pc, #28]	@ (8006590 <USBD_CDC_Init+0x1e8>)
 8006572:	7819      	ldrb	r1, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800657a:	2340      	movs	r3, #64	@ 0x40
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f005 fa17 	bl	800b9b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	20000093 	.word	0x20000093
 8006590:	20000094 	.word	0x20000094
 8006594:	20000095 	.word	0x20000095

08006598 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	460b      	mov	r3, r1
 80065a2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80065a4:	4b3a      	ldr	r3, [pc, #232]	@ (8006690 <USBD_CDC_DeInit+0xf8>)
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	4619      	mov	r1, r3
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f005 f937 	bl	800b81e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80065b0:	4b37      	ldr	r3, [pc, #220]	@ (8006690 <USBD_CDC_DeInit+0xf8>)
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	f003 020f 	and.w	r2, r3, #15
 80065b8:	6879      	ldr	r1, [r7, #4]
 80065ba:	4613      	mov	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4413      	add	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	440b      	add	r3, r1
 80065c4:	3324      	adds	r3, #36	@ 0x24
 80065c6:	2200      	movs	r2, #0
 80065c8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80065ca:	4b32      	ldr	r3, [pc, #200]	@ (8006694 <USBD_CDC_DeInit+0xfc>)
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f005 f924 	bl	800b81e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80065d6:	4b2f      	ldr	r3, [pc, #188]	@ (8006694 <USBD_CDC_DeInit+0xfc>)
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	f003 020f 	and.w	r2, r3, #15
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	4613      	mov	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	440b      	add	r3, r1
 80065ea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80065ee:	2200      	movs	r2, #0
 80065f0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80065f2:	4b29      	ldr	r3, [pc, #164]	@ (8006698 <USBD_CDC_DeInit+0x100>)
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	4619      	mov	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f005 f910 	bl	800b81e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80065fe:	4b26      	ldr	r3, [pc, #152]	@ (8006698 <USBD_CDC_DeInit+0x100>)
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	f003 020f 	and.w	r2, r3, #15
 8006606:	6879      	ldr	r1, [r7, #4]
 8006608:	4613      	mov	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	440b      	add	r3, r1
 8006612:	3324      	adds	r3, #36	@ 0x24
 8006614:	2200      	movs	r2, #0
 8006616:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006618:	4b1f      	ldr	r3, [pc, #124]	@ (8006698 <USBD_CDC_DeInit+0x100>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	f003 020f 	and.w	r2, r3, #15
 8006620:	6879      	ldr	r1, [r7, #4]
 8006622:	4613      	mov	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4413      	add	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	440b      	add	r3, r1
 800662c:	3326      	adds	r3, #38	@ 0x26
 800662e:	2200      	movs	r2, #0
 8006630:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	32b0      	adds	r2, #176	@ 0xb0
 800663c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d01f      	beq.n	8006684 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	33b0      	adds	r3, #176	@ 0xb0
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	32b0      	adds	r2, #176	@ 0xb0
 8006662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006666:	4618      	mov	r0, r3
 8006668:	f005 fa5e 	bl	800bb28 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	32b0      	adds	r2, #176	@ 0xb0
 8006676:	2100      	movs	r1, #0
 8006678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20000093 	.word	0x20000093
 8006694:	20000094 	.word	0x20000094
 8006698:	20000095 	.word	0x20000095

0800669c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	32b0      	adds	r2, #176	@ 0xb0
 80066b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d101      	bne.n	80066cc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e0bf      	b.n	800684c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d050      	beq.n	800677a <USBD_CDC_Setup+0xde>
 80066d8:	2b20      	cmp	r3, #32
 80066da:	f040 80af 	bne.w	800683c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	88db      	ldrh	r3, [r3, #6]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d03a      	beq.n	800675c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	b25b      	sxtb	r3, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	da1b      	bge.n	8006728 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	33b0      	adds	r3, #176	@ 0xb0
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006706:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	88d2      	ldrh	r2, [r2, #6]
 800670c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	88db      	ldrh	r3, [r3, #6]
 8006712:	2b07      	cmp	r3, #7
 8006714:	bf28      	it	cs
 8006716:	2307      	movcs	r3, #7
 8006718:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	89fa      	ldrh	r2, [r7, #14]
 800671e:	4619      	mov	r1, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f001 fdab 	bl	800827c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006726:	e090      	b.n	800684a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	785a      	ldrb	r2, [r3, #1]
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	88db      	ldrh	r3, [r3, #6]
 8006736:	2b3f      	cmp	r3, #63	@ 0x3f
 8006738:	d803      	bhi.n	8006742 <USBD_CDC_Setup+0xa6>
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	88db      	ldrh	r3, [r3, #6]
 800673e:	b2da      	uxtb	r2, r3
 8006740:	e000      	b.n	8006744 <USBD_CDC_Setup+0xa8>
 8006742:	2240      	movs	r2, #64	@ 0x40
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800674a:	6939      	ldr	r1, [r7, #16]
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006752:	461a      	mov	r2, r3
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f001 fdbd 	bl	80082d4 <USBD_CtlPrepareRx>
      break;
 800675a:	e076      	b.n	800684a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	33b0      	adds	r3, #176	@ 0xb0
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	7850      	ldrb	r0, [r2, #1]
 8006772:	2200      	movs	r2, #0
 8006774:	6839      	ldr	r1, [r7, #0]
 8006776:	4798      	blx	r3
      break;
 8006778:	e067      	b.n	800684a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	785b      	ldrb	r3, [r3, #1]
 800677e:	2b0b      	cmp	r3, #11
 8006780:	d851      	bhi.n	8006826 <USBD_CDC_Setup+0x18a>
 8006782:	a201      	add	r2, pc, #4	@ (adr r2, 8006788 <USBD_CDC_Setup+0xec>)
 8006784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006788:	080067b9 	.word	0x080067b9
 800678c:	08006835 	.word	0x08006835
 8006790:	08006827 	.word	0x08006827
 8006794:	08006827 	.word	0x08006827
 8006798:	08006827 	.word	0x08006827
 800679c:	08006827 	.word	0x08006827
 80067a0:	08006827 	.word	0x08006827
 80067a4:	08006827 	.word	0x08006827
 80067a8:	08006827 	.word	0x08006827
 80067ac:	08006827 	.word	0x08006827
 80067b0:	080067e3 	.word	0x080067e3
 80067b4:	0800680d 	.word	0x0800680d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b03      	cmp	r3, #3
 80067c2:	d107      	bne.n	80067d4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80067c4:	f107 030a 	add.w	r3, r7, #10
 80067c8:	2202      	movs	r2, #2
 80067ca:	4619      	mov	r1, r3
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f001 fd55 	bl	800827c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067d2:	e032      	b.n	800683a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f001 fcdf 	bl	800819a <USBD_CtlError>
            ret = USBD_FAIL;
 80067dc:	2303      	movs	r3, #3
 80067de:	75fb      	strb	r3, [r7, #23]
          break;
 80067e0:	e02b      	b.n	800683a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b03      	cmp	r3, #3
 80067ec:	d107      	bne.n	80067fe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80067ee:	f107 030d 	add.w	r3, r7, #13
 80067f2:	2201      	movs	r2, #1
 80067f4:	4619      	mov	r1, r3
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f001 fd40 	bl	800827c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067fc:	e01d      	b.n	800683a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80067fe:	6839      	ldr	r1, [r7, #0]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f001 fcca 	bl	800819a <USBD_CtlError>
            ret = USBD_FAIL;
 8006806:	2303      	movs	r3, #3
 8006808:	75fb      	strb	r3, [r7, #23]
          break;
 800680a:	e016      	b.n	800683a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b03      	cmp	r3, #3
 8006816:	d00f      	beq.n	8006838 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006818:	6839      	ldr	r1, [r7, #0]
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f001 fcbd 	bl	800819a <USBD_CtlError>
            ret = USBD_FAIL;
 8006820:	2303      	movs	r3, #3
 8006822:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006824:	e008      	b.n	8006838 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006826:	6839      	ldr	r1, [r7, #0]
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f001 fcb6 	bl	800819a <USBD_CtlError>
          ret = USBD_FAIL;
 800682e:	2303      	movs	r3, #3
 8006830:	75fb      	strb	r3, [r7, #23]
          break;
 8006832:	e002      	b.n	800683a <USBD_CDC_Setup+0x19e>
          break;
 8006834:	bf00      	nop
 8006836:	e008      	b.n	800684a <USBD_CDC_Setup+0x1ae>
          break;
 8006838:	bf00      	nop
      }
      break;
 800683a:	e006      	b.n	800684a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800683c:	6839      	ldr	r1, [r7, #0]
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f001 fcab 	bl	800819a <USBD_CtlError>
      ret = USBD_FAIL;
 8006844:	2303      	movs	r3, #3
 8006846:	75fb      	strb	r3, [r7, #23]
      break;
 8006848:	bf00      	nop
  }

  return (uint8_t)ret;
 800684a:	7dfb      	ldrb	r3, [r7, #23]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3718      	adds	r7, #24
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	460b      	mov	r3, r1
 800685e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006866:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	32b0      	adds	r2, #176	@ 0xb0
 8006872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800687a:	2303      	movs	r3, #3
 800687c:	e065      	b.n	800694a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	32b0      	adds	r2, #176	@ 0xb0
 8006888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800688c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800688e:	78fb      	ldrb	r3, [r7, #3]
 8006890:	f003 020f 	and.w	r2, r3, #15
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	4613      	mov	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	440b      	add	r3, r1
 80068a0:	3318      	adds	r3, #24
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d02f      	beq.n	8006908 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80068a8:	78fb      	ldrb	r3, [r7, #3]
 80068aa:	f003 020f 	and.w	r2, r3, #15
 80068ae:	6879      	ldr	r1, [r7, #4]
 80068b0:	4613      	mov	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	440b      	add	r3, r1
 80068ba:	3318      	adds	r3, #24
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	78fb      	ldrb	r3, [r7, #3]
 80068c0:	f003 010f 	and.w	r1, r3, #15
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	460b      	mov	r3, r1
 80068c8:	00db      	lsls	r3, r3, #3
 80068ca:	440b      	add	r3, r1
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4403      	add	r3, r0
 80068d0:	3348      	adds	r3, #72	@ 0x48
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80068d8:	fb01 f303 	mul.w	r3, r1, r3
 80068dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d112      	bne.n	8006908 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80068e2:	78fb      	ldrb	r3, [r7, #3]
 80068e4:	f003 020f 	and.w	r2, r3, #15
 80068e8:	6879      	ldr	r1, [r7, #4]
 80068ea:	4613      	mov	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	440b      	add	r3, r1
 80068f4:	3318      	adds	r3, #24
 80068f6:	2200      	movs	r2, #0
 80068f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80068fa:	78f9      	ldrb	r1, [r7, #3]
 80068fc:	2300      	movs	r3, #0
 80068fe:	2200      	movs	r2, #0
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f005 f834 	bl	800b96e <USBD_LL_Transmit>
 8006906:	e01f      	b.n	8006948 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2200      	movs	r2, #0
 800690c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	33b0      	adds	r3, #176	@ 0xb0
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d010      	beq.n	8006948 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	33b0      	adds	r3, #176	@ 0xb0
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006944:	78fa      	ldrb	r2, [r7, #3]
 8006946:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b084      	sub	sp, #16
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	460b      	mov	r3, r1
 800695c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	32b0      	adds	r2, #176	@ 0xb0
 8006968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800696c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	32b0      	adds	r2, #176	@ 0xb0
 8006978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d101      	bne.n	8006984 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006980:	2303      	movs	r3, #3
 8006982:	e01a      	b.n	80069ba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006984:	78fb      	ldrb	r3, [r7, #3]
 8006986:	4619      	mov	r1, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f005 f832 	bl	800b9f2 <USBD_LL_GetRxDataSize>
 800698e:	4602      	mov	r2, r0
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	33b0      	adds	r3, #176	@ 0xb0
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80069b4:	4611      	mov	r1, r2
 80069b6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	32b0      	adds	r2, #176	@ 0xb0
 80069d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d101      	bne.n	80069e4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80069e0:	2303      	movs	r3, #3
 80069e2:	e024      	b.n	8006a2e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	33b0      	adds	r3, #176	@ 0xb0
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d019      	beq.n	8006a2c <USBD_CDC_EP0_RxReady+0x6a>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80069fe:	2bff      	cmp	r3, #255	@ 0xff
 8006a00:	d014      	beq.n	8006a2c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	33b0      	adds	r3, #176	@ 0xb0
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006a1a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006a22:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	22ff      	movs	r2, #255	@ 0xff
 8006a28:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
	...

08006a38 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a40:	2182      	movs	r1, #130	@ 0x82
 8006a42:	4818      	ldr	r0, [pc, #96]	@ (8006aa4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a44:	f000 fd49 	bl	80074da <USBD_GetEpDesc>
 8006a48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	4815      	ldr	r0, [pc, #84]	@ (8006aa4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a4e:	f000 fd44 	bl	80074da <USBD_GetEpDesc>
 8006a52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a54:	2181      	movs	r1, #129	@ 0x81
 8006a56:	4813      	ldr	r0, [pc, #76]	@ (8006aa4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a58:	f000 fd3f 	bl	80074da <USBD_GetEpDesc>
 8006a5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d002      	beq.n	8006a6a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	2210      	movs	r2, #16
 8006a68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d006      	beq.n	8006a7e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a78:	711a      	strb	r2, [r3, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d006      	beq.n	8006a92 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a8c:	711a      	strb	r2, [r3, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2243      	movs	r2, #67	@ 0x43
 8006a96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a98:	4b02      	ldr	r3, [pc, #8]	@ (8006aa4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	20000050 	.word	0x20000050

08006aa8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ab0:	2182      	movs	r1, #130	@ 0x82
 8006ab2:	4818      	ldr	r0, [pc, #96]	@ (8006b14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ab4:	f000 fd11 	bl	80074da <USBD_GetEpDesc>
 8006ab8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006aba:	2101      	movs	r1, #1
 8006abc:	4815      	ldr	r0, [pc, #84]	@ (8006b14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006abe:	f000 fd0c 	bl	80074da <USBD_GetEpDesc>
 8006ac2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ac4:	2181      	movs	r1, #129	@ 0x81
 8006ac6:	4813      	ldr	r0, [pc, #76]	@ (8006b14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ac8:	f000 fd07 	bl	80074da <USBD_GetEpDesc>
 8006acc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	2210      	movs	r2, #16
 8006ad8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d006      	beq.n	8006aee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	711a      	strb	r2, [r3, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f042 0202 	orr.w	r2, r2, #2
 8006aec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d006      	beq.n	8006b02 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	711a      	strb	r2, [r3, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f042 0202 	orr.w	r2, r2, #2
 8006b00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2243      	movs	r2, #67	@ 0x43
 8006b06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b08:	4b02      	ldr	r3, [pc, #8]	@ (8006b14 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3718      	adds	r7, #24
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	20000050 	.word	0x20000050

08006b18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b20:	2182      	movs	r1, #130	@ 0x82
 8006b22:	4818      	ldr	r0, [pc, #96]	@ (8006b84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b24:	f000 fcd9 	bl	80074da <USBD_GetEpDesc>
 8006b28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b2a:	2101      	movs	r1, #1
 8006b2c:	4815      	ldr	r0, [pc, #84]	@ (8006b84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b2e:	f000 fcd4 	bl	80074da <USBD_GetEpDesc>
 8006b32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b34:	2181      	movs	r1, #129	@ 0x81
 8006b36:	4813      	ldr	r0, [pc, #76]	@ (8006b84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b38:	f000 fccf 	bl	80074da <USBD_GetEpDesc>
 8006b3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d002      	beq.n	8006b4a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	2210      	movs	r2, #16
 8006b48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d006      	beq.n	8006b5e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b58:	711a      	strb	r2, [r3, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d006      	beq.n	8006b72 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b6c:	711a      	strb	r2, [r3, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2243      	movs	r2, #67	@ 0x43
 8006b76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b78:	4b02      	ldr	r3, [pc, #8]	@ (8006b84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3718      	adds	r7, #24
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	20000050 	.word	0x20000050

08006b88 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	220a      	movs	r2, #10
 8006b94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006b96:	4b03      	ldr	r3, [pc, #12]	@ (8006ba4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	2000000c 	.word	0x2000000c

08006ba8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e009      	b.n	8006bd0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	33b0      	adds	r3, #176	@ 0xb0
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	32b0      	adds	r2, #176	@ 0xb0
 8006bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d101      	bne.n	8006c02 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e008      	b.n	8006c14 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	371c      	adds	r7, #28
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	32b0      	adds	r2, #176	@ 0xb0
 8006c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c38:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e004      	b.n	8006c4e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
	...

08006c5c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	32b0      	adds	r2, #176	@ 0xb0
 8006c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c72:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006c74:	2301      	movs	r3, #1
 8006c76:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e025      	b.n	8006cce <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d11f      	bne.n	8006ccc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006c94:	4b10      	ldr	r3, [pc, #64]	@ (8006cd8 <USBD_CDC_TransmitPacket+0x7c>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	f003 020f 	and.w	r2, r3, #15
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4403      	add	r3, r0
 8006cae:	3318      	adds	r3, #24
 8006cb0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006cb2:	4b09      	ldr	r3, [pc, #36]	@ (8006cd8 <USBD_CDC_TransmitPacket+0x7c>)
 8006cb4:	7819      	ldrb	r1, [r3, #0]
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f004 fe53 	bl	800b96e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20000093 	.word	0x20000093

08006cdc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	32b0      	adds	r2, #176	@ 0xb0
 8006cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	32b0      	adds	r2, #176	@ 0xb0
 8006cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e018      	b.n	8006d3c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	7c1b      	ldrb	r3, [r3, #16]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10a      	bne.n	8006d28 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d12:	4b0c      	ldr	r3, [pc, #48]	@ (8006d44 <USBD_CDC_ReceivePacket+0x68>)
 8006d14:	7819      	ldrb	r1, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006d1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f004 fe45 	bl	800b9b0 <USBD_LL_PrepareReceive>
 8006d26:	e008      	b.n	8006d3a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d28:	4b06      	ldr	r3, [pc, #24]	@ (8006d44 <USBD_CDC_ReceivePacket+0x68>)
 8006d2a:	7819      	ldrb	r1, [r3, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006d32:	2340      	movs	r3, #64	@ 0x40
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f004 fe3b 	bl	800b9b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	20000094 	.word	0x20000094

08006d48 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	4613      	mov	r3, r2
 8006d54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e01f      	b.n	8006da0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	79fa      	ldrb	r2, [r7, #7]
 8006d92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f004 fcb5 	bl	800b704 <USBD_LL_Init>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3718      	adds	r7, #24
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e025      	b.n	8006e0c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	32ae      	adds	r2, #174	@ 0xae
 8006dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00f      	beq.n	8006dfc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	32ae      	adds	r2, #174	@ 0xae
 8006de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dec:	f107 020e 	add.w	r2, r7, #14
 8006df0:	4610      	mov	r0, r2
 8006df2:	4798      	blx	r3
 8006df4:	4602      	mov	r2, r0
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006e02:	1c5a      	adds	r2, r3, #1
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f004 fcbd 	bl	800b79c <USBD_LL_Start>
 8006e22:	4603      	mov	r3, r0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e34:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b084      	sub	sp, #16
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d009      	beq.n	8006e70 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	78fa      	ldrb	r2, [r7, #3]
 8006e66:	4611      	mov	r1, r2
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	4798      	blx	r3
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	460b      	mov	r3, r1
 8006e84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e86:	2300      	movs	r3, #0
 8006e88:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	78fa      	ldrb	r2, [r7, #3]
 8006e94:	4611      	mov	r1, r2
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	4798      	blx	r3
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d001      	beq.n	8006ea4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b084      	sub	sp, #16
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006ebe:	6839      	ldr	r1, [r7, #0]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f001 f930 	bl	8008126 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006ee2:	f003 031f 	and.w	r3, r3, #31
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d01a      	beq.n	8006f20 <USBD_LL_SetupStage+0x72>
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d822      	bhi.n	8006f34 <USBD_LL_SetupStage+0x86>
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d002      	beq.n	8006ef8 <USBD_LL_SetupStage+0x4a>
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d00a      	beq.n	8006f0c <USBD_LL_SetupStage+0x5e>
 8006ef6:	e01d      	b.n	8006f34 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006efe:	4619      	mov	r1, r3
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fb5d 	bl	80075c0 <USBD_StdDevReq>
 8006f06:	4603      	mov	r3, r0
 8006f08:	73fb      	strb	r3, [r7, #15]
      break;
 8006f0a:	e020      	b.n	8006f4e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fbc5 	bl	80076a4 <USBD_StdItfReq>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f1e:	e016      	b.n	8006f4e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006f26:	4619      	mov	r1, r3
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fc27 	bl	800777c <USBD_StdEPReq>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	73fb      	strb	r3, [r7, #15]
      break;
 8006f32:	e00c      	b.n	8006f4e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006f3a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	4619      	mov	r1, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f004 fc8a 	bl	800b85c <USBD_LL_StallEP>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f4c:	bf00      	nop
  }

  return ret;
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	460b      	mov	r3, r1
 8006f62:	607a      	str	r2, [r7, #4]
 8006f64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006f6a:	7afb      	ldrb	r3, [r7, #11]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d16e      	bne.n	800704e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006f76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	f040 8098 	bne.w	80070b4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	689a      	ldr	r2, [r3, #8]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d913      	bls.n	8006fb8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	689a      	ldr	r2, [r3, #8]
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	1ad2      	subs	r2, r2, r3
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	68da      	ldr	r2, [r3, #12]
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	bf28      	it	cs
 8006faa:	4613      	movcs	r3, r2
 8006fac:	461a      	mov	r2, r3
 8006fae:	6879      	ldr	r1, [r7, #4]
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f001 f9ac 	bl	800830e <USBD_CtlContinueRx>
 8006fb6:	e07d      	b.n	80070b4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006fbe:	f003 031f 	and.w	r3, r3, #31
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d014      	beq.n	8006ff0 <USBD_LL_DataOutStage+0x98>
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d81d      	bhi.n	8007006 <USBD_LL_DataOutStage+0xae>
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d002      	beq.n	8006fd4 <USBD_LL_DataOutStage+0x7c>
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d003      	beq.n	8006fda <USBD_LL_DataOutStage+0x82>
 8006fd2:	e018      	b.n	8007006 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	75bb      	strb	r3, [r7, #22]
            break;
 8006fd8:	e018      	b.n	800700c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 fa5e 	bl	80074a6 <USBD_CoreFindIF>
 8006fea:	4603      	mov	r3, r0
 8006fec:	75bb      	strb	r3, [r7, #22]
            break;
 8006fee:	e00d      	b.n	800700c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f000 fa60 	bl	80074c0 <USBD_CoreFindEP>
 8007000:	4603      	mov	r3, r0
 8007002:	75bb      	strb	r3, [r7, #22]
            break;
 8007004:	e002      	b.n	800700c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007006:	2300      	movs	r3, #0
 8007008:	75bb      	strb	r3, [r7, #22]
            break;
 800700a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800700c:	7dbb      	ldrb	r3, [r7, #22]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d119      	bne.n	8007046 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b03      	cmp	r3, #3
 800701c:	d113      	bne.n	8007046 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800701e:	7dba      	ldrb	r2, [r7, #22]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	32ae      	adds	r2, #174	@ 0xae
 8007024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00b      	beq.n	8007046 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800702e:	7dba      	ldrb	r2, [r7, #22]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007036:	7dba      	ldrb	r2, [r7, #22]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	32ae      	adds	r2, #174	@ 0xae
 800703c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f001 f972 	bl	8008330 <USBD_CtlSendStatus>
 800704c:	e032      	b.n	80070b4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800704e:	7afb      	ldrb	r3, [r7, #11]
 8007050:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007054:	b2db      	uxtb	r3, r3
 8007056:	4619      	mov	r1, r3
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f000 fa31 	bl	80074c0 <USBD_CoreFindEP>
 800705e:	4603      	mov	r3, r0
 8007060:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007062:	7dbb      	ldrb	r3, [r7, #22]
 8007064:	2bff      	cmp	r3, #255	@ 0xff
 8007066:	d025      	beq.n	80070b4 <USBD_LL_DataOutStage+0x15c>
 8007068:	7dbb      	ldrb	r3, [r7, #22]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d122      	bne.n	80070b4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b03      	cmp	r3, #3
 8007078:	d117      	bne.n	80070aa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800707a:	7dba      	ldrb	r2, [r7, #22]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	32ae      	adds	r2, #174	@ 0xae
 8007080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00f      	beq.n	80070aa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800708a:	7dba      	ldrb	r2, [r7, #22]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007092:	7dba      	ldrb	r2, [r7, #22]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	32ae      	adds	r2, #174	@ 0xae
 8007098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	7afa      	ldrb	r2, [r7, #11]
 80070a0:	4611      	mov	r1, r2
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	4798      	blx	r3
 80070a6:	4603      	mov	r3, r0
 80070a8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80070aa:	7dfb      	ldrb	r3, [r7, #23]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d001      	beq.n	80070b4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80070b0:	7dfb      	ldrb	r3, [r7, #23]
 80070b2:	e000      	b.n	80070b6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3718      	adds	r7, #24
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b086      	sub	sp, #24
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	60f8      	str	r0, [r7, #12]
 80070c6:	460b      	mov	r3, r1
 80070c8:	607a      	str	r2, [r7, #4]
 80070ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80070cc:	7afb      	ldrb	r3, [r7, #11]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d16f      	bne.n	80071b2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	3314      	adds	r3, #20
 80070d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d15a      	bne.n	8007198 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	689a      	ldr	r2, [r3, #8]
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d914      	bls.n	8007118 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	689a      	ldr	r2, [r3, #8]
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	1ad2      	subs	r2, r2, r3
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	461a      	mov	r2, r3
 8007102:	6879      	ldr	r1, [r7, #4]
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f001 f8d4 	bl	80082b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800710a:	2300      	movs	r3, #0
 800710c:	2200      	movs	r2, #0
 800710e:	2100      	movs	r1, #0
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f004 fc4d 	bl	800b9b0 <USBD_LL_PrepareReceive>
 8007116:	e03f      	b.n	8007198 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	68da      	ldr	r2, [r3, #12]
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	429a      	cmp	r2, r3
 8007122:	d11c      	bne.n	800715e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800712c:	429a      	cmp	r2, r3
 800712e:	d316      	bcc.n	800715e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	685a      	ldr	r2, [r3, #4]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800713a:	429a      	cmp	r2, r3
 800713c:	d20f      	bcs.n	800715e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800713e:	2200      	movs	r2, #0
 8007140:	2100      	movs	r1, #0
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f001 f8b5 	bl	80082b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007150:	2300      	movs	r3, #0
 8007152:	2200      	movs	r2, #0
 8007154:	2100      	movs	r1, #0
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f004 fc2a 	bl	800b9b0 <USBD_LL_PrepareReceive>
 800715c:	e01c      	b.n	8007198 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b03      	cmp	r3, #3
 8007168:	d10f      	bne.n	800718a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d009      	beq.n	800718a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800718a:	2180      	movs	r1, #128	@ 0x80
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f004 fb65 	bl	800b85c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f001 f8df 	bl	8008356 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d03a      	beq.n	8007218 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f7ff fe42 	bl	8006e2c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80071b0:	e032      	b.n	8007218 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80071b2:	7afb      	ldrb	r3, [r7, #11]
 80071b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	4619      	mov	r1, r3
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f000 f97f 	bl	80074c0 <USBD_CoreFindEP>
 80071c2:	4603      	mov	r3, r0
 80071c4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071c6:	7dfb      	ldrb	r3, [r7, #23]
 80071c8:	2bff      	cmp	r3, #255	@ 0xff
 80071ca:	d025      	beq.n	8007218 <USBD_LL_DataInStage+0x15a>
 80071cc:	7dfb      	ldrb	r3, [r7, #23]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d122      	bne.n	8007218 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b03      	cmp	r3, #3
 80071dc:	d11c      	bne.n	8007218 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80071de:	7dfa      	ldrb	r2, [r7, #23]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	32ae      	adds	r2, #174	@ 0xae
 80071e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d014      	beq.n	8007218 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80071ee:	7dfa      	ldrb	r2, [r7, #23]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80071f6:	7dfa      	ldrb	r2, [r7, #23]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	32ae      	adds	r2, #174	@ 0xae
 80071fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	7afa      	ldrb	r2, [r7, #11]
 8007204:	4611      	mov	r1, r2
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	4798      	blx	r3
 800720a:	4603      	mov	r3, r0
 800720c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800720e:	7dbb      	ldrb	r3, [r7, #22]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d001      	beq.n	8007218 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007214:	7dbb      	ldrb	r3, [r7, #22]
 8007216:	e000      	b.n	800721a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3718      	adds	r7, #24
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b084      	sub	sp, #16
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800722a:	2300      	movs	r3, #0
 800722c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800725a:	2b00      	cmp	r3, #0
 800725c:	d014      	beq.n	8007288 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00e      	beq.n	8007288 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	6852      	ldr	r2, [r2, #4]
 8007276:	b2d2      	uxtb	r2, r2
 8007278:	4611      	mov	r1, r2
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	4798      	blx	r3
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d001      	beq.n	8007288 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007284:	2303      	movs	r3, #3
 8007286:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007288:	2340      	movs	r3, #64	@ 0x40
 800728a:	2200      	movs	r2, #0
 800728c:	2100      	movs	r1, #0
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f004 fa9f 	bl	800b7d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2240      	movs	r2, #64	@ 0x40
 80072a0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072a4:	2340      	movs	r3, #64	@ 0x40
 80072a6:	2200      	movs	r2, #0
 80072a8:	2180      	movs	r1, #128	@ 0x80
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f004 fa91 	bl	800b7d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2240      	movs	r2, #64	@ 0x40
 80072ba:	621a      	str	r2, [r3, #32]

  return ret;
 80072bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b083      	sub	sp, #12
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
 80072ce:	460b      	mov	r3, r1
 80072d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	78fa      	ldrb	r2, [r7, #3]
 80072d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80072e6:	b480      	push	{r7}
 80072e8:	b083      	sub	sp, #12
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2204      	movs	r2, #4
 8007300:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007312:	b480      	push	{r7}
 8007314:	b083      	sub	sp, #12
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b04      	cmp	r3, #4
 8007324:	d106      	bne.n	8007334 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800732c:	b2da      	uxtb	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b082      	sub	sp, #8
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b03      	cmp	r3, #3
 8007354:	d110      	bne.n	8007378 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00b      	beq.n	8007378 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d005      	beq.n	8007378 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007372:	69db      	ldr	r3, [r3, #28]
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b082      	sub	sp, #8
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	460b      	mov	r3, r1
 800738c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	32ae      	adds	r2, #174	@ 0xae
 8007398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e01c      	b.n	80073de <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b03      	cmp	r3, #3
 80073ae:	d115      	bne.n	80073dc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	32ae      	adds	r2, #174	@ 0xae
 80073ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073be:	6a1b      	ldr	r3, [r3, #32]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00b      	beq.n	80073dc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	32ae      	adds	r2, #174	@ 0xae
 80073ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d2:	6a1b      	ldr	r3, [r3, #32]
 80073d4:	78fa      	ldrb	r2, [r7, #3]
 80073d6:	4611      	mov	r1, r2
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3708      	adds	r7, #8
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b082      	sub	sp, #8
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	460b      	mov	r3, r1
 80073f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	32ae      	adds	r2, #174	@ 0xae
 80073fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007404:	2303      	movs	r3, #3
 8007406:	e01c      	b.n	8007442 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b03      	cmp	r3, #3
 8007412:	d115      	bne.n	8007440 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	32ae      	adds	r2, #174	@ 0xae
 800741e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00b      	beq.n	8007440 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	32ae      	adds	r2, #174	@ 0xae
 8007432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007438:	78fa      	ldrb	r2, [r7, #3]
 800743a:	4611      	mov	r1, r2
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007468:	2300      	movs	r3, #0
 800746a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00e      	beq.n	800749c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	6852      	ldr	r2, [r2, #4]
 800748a:	b2d2      	uxtb	r2, r2
 800748c:	4611      	mov	r1, r2
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	4798      	blx	r3
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007498:	2303      	movs	r3, #3
 800749a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800749c:	7bfb      	ldrb	r3, [r7, #15]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b083      	sub	sp, #12
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	460b      	mov	r3, r1
 80074b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80074b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	460b      	mov	r3, r1
 80074ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80074cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b086      	sub	sp, #24
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	460b      	mov	r3, r1
 80074e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80074ee:	2300      	movs	r3, #0
 80074f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	885b      	ldrh	r3, [r3, #2]
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	7812      	ldrb	r2, [r2, #0]
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d91f      	bls.n	8007540 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007506:	e013      	b.n	8007530 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007508:	f107 030a 	add.w	r3, r7, #10
 800750c:	4619      	mov	r1, r3
 800750e:	6978      	ldr	r0, [r7, #20]
 8007510:	f000 f81b 	bl	800754a <USBD_GetNextDesc>
 8007514:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	785b      	ldrb	r3, [r3, #1]
 800751a:	2b05      	cmp	r3, #5
 800751c:	d108      	bne.n	8007530 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	789b      	ldrb	r3, [r3, #2]
 8007526:	78fa      	ldrb	r2, [r7, #3]
 8007528:	429a      	cmp	r2, r3
 800752a:	d008      	beq.n	800753e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800752c:	2300      	movs	r3, #0
 800752e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	885b      	ldrh	r3, [r3, #2]
 8007534:	b29a      	uxth	r2, r3
 8007536:	897b      	ldrh	r3, [r7, #10]
 8007538:	429a      	cmp	r2, r3
 800753a:	d8e5      	bhi.n	8007508 <USBD_GetEpDesc+0x2e>
 800753c:	e000      	b.n	8007540 <USBD_GetEpDesc+0x66>
          break;
 800753e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007540:	693b      	ldr	r3, [r7, #16]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3718      	adds	r7, #24
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800754a:	b480      	push	{r7}
 800754c:	b085      	sub	sp, #20
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	881b      	ldrh	r3, [r3, #0]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	7812      	ldrb	r2, [r2, #0]
 8007560:	4413      	add	r3, r2
 8007562:	b29a      	uxth	r2, r3
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	461a      	mov	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4413      	add	r3, r2
 8007572:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007574:	68fb      	ldr	r3, [r7, #12]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007582:	b480      	push	{r7}
 8007584:	b087      	sub	sp, #28
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	3301      	adds	r3, #1
 8007598:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80075a0:	8a3b      	ldrh	r3, [r7, #16]
 80075a2:	021b      	lsls	r3, r3, #8
 80075a4:	b21a      	sxth	r2, r3
 80075a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	b21b      	sxth	r3, r3
 80075ae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80075b0:	89fb      	ldrh	r3, [r7, #14]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	371c      	adds	r7, #28
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
	...

080075c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075d6:	2b40      	cmp	r3, #64	@ 0x40
 80075d8:	d005      	beq.n	80075e6 <USBD_StdDevReq+0x26>
 80075da:	2b40      	cmp	r3, #64	@ 0x40
 80075dc:	d857      	bhi.n	800768e <USBD_StdDevReq+0xce>
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00f      	beq.n	8007602 <USBD_StdDevReq+0x42>
 80075e2:	2b20      	cmp	r3, #32
 80075e4:	d153      	bne.n	800768e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	32ae      	adds	r2, #174	@ 0xae
 80075f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	6839      	ldr	r1, [r7, #0]
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	4798      	blx	r3
 80075fc:	4603      	mov	r3, r0
 80075fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007600:	e04a      	b.n	8007698 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	785b      	ldrb	r3, [r3, #1]
 8007606:	2b09      	cmp	r3, #9
 8007608:	d83b      	bhi.n	8007682 <USBD_StdDevReq+0xc2>
 800760a:	a201      	add	r2, pc, #4	@ (adr r2, 8007610 <USBD_StdDevReq+0x50>)
 800760c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007610:	08007665 	.word	0x08007665
 8007614:	08007679 	.word	0x08007679
 8007618:	08007683 	.word	0x08007683
 800761c:	0800766f 	.word	0x0800766f
 8007620:	08007683 	.word	0x08007683
 8007624:	08007643 	.word	0x08007643
 8007628:	08007639 	.word	0x08007639
 800762c:	08007683 	.word	0x08007683
 8007630:	0800765b 	.word	0x0800765b
 8007634:	0800764d 	.word	0x0800764d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fa3c 	bl	8007ab8 <USBD_GetDescriptor>
          break;
 8007640:	e024      	b.n	800768c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fbcb 	bl	8007de0 <USBD_SetAddress>
          break;
 800764a:	e01f      	b.n	800768c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fc0a 	bl	8007e68 <USBD_SetConfig>
 8007654:	4603      	mov	r3, r0
 8007656:	73fb      	strb	r3, [r7, #15]
          break;
 8007658:	e018      	b.n	800768c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800765a:	6839      	ldr	r1, [r7, #0]
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fcad 	bl	8007fbc <USBD_GetConfig>
          break;
 8007662:	e013      	b.n	800768c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fcde 	bl	8008028 <USBD_GetStatus>
          break;
 800766c:	e00e      	b.n	800768c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800766e:	6839      	ldr	r1, [r7, #0]
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fd0d 	bl	8008090 <USBD_SetFeature>
          break;
 8007676:	e009      	b.n	800768c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007678:	6839      	ldr	r1, [r7, #0]
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fd31 	bl	80080e2 <USBD_ClrFeature>
          break;
 8007680:	e004      	b.n	800768c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007682:	6839      	ldr	r1, [r7, #0]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fd88 	bl	800819a <USBD_CtlError>
          break;
 800768a:	bf00      	nop
      }
      break;
 800768c:	e004      	b.n	8007698 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fd82 	bl	800819a <USBD_CtlError>
      break;
 8007696:	bf00      	nop
  }

  return ret;
 8007698:	7bfb      	ldrb	r3, [r7, #15]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop

080076a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ae:	2300      	movs	r3, #0
 80076b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80076ba:	2b40      	cmp	r3, #64	@ 0x40
 80076bc:	d005      	beq.n	80076ca <USBD_StdItfReq+0x26>
 80076be:	2b40      	cmp	r3, #64	@ 0x40
 80076c0:	d852      	bhi.n	8007768 <USBD_StdItfReq+0xc4>
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d001      	beq.n	80076ca <USBD_StdItfReq+0x26>
 80076c6:	2b20      	cmp	r3, #32
 80076c8:	d14e      	bne.n	8007768 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	3b01      	subs	r3, #1
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d840      	bhi.n	800775a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	889b      	ldrh	r3, [r3, #4]
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d836      	bhi.n	8007750 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	889b      	ldrh	r3, [r3, #4]
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7ff fedb 	bl	80074a6 <USBD_CoreFindIF>
 80076f0:	4603      	mov	r3, r0
 80076f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076f4:	7bbb      	ldrb	r3, [r7, #14]
 80076f6:	2bff      	cmp	r3, #255	@ 0xff
 80076f8:	d01d      	beq.n	8007736 <USBD_StdItfReq+0x92>
 80076fa:	7bbb      	ldrb	r3, [r7, #14]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d11a      	bne.n	8007736 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007700:	7bba      	ldrb	r2, [r7, #14]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	32ae      	adds	r2, #174	@ 0xae
 8007706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00f      	beq.n	8007730 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007710:	7bba      	ldrb	r2, [r7, #14]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007718:	7bba      	ldrb	r2, [r7, #14]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	32ae      	adds	r2, #174	@ 0xae
 800771e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	4798      	blx	r3
 800772a:	4603      	mov	r3, r0
 800772c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800772e:	e004      	b.n	800773a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007730:	2303      	movs	r3, #3
 8007732:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007734:	e001      	b.n	800773a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007736:	2303      	movs	r3, #3
 8007738:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	88db      	ldrh	r3, [r3, #6]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d110      	bne.n	8007764 <USBD_StdItfReq+0xc0>
 8007742:	7bfb      	ldrb	r3, [r7, #15]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10d      	bne.n	8007764 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fdf1 	bl	8008330 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800774e:	e009      	b.n	8007764 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fd21 	bl	800819a <USBD_CtlError>
          break;
 8007758:	e004      	b.n	8007764 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fd1c 	bl	800819a <USBD_CtlError>
          break;
 8007762:	e000      	b.n	8007766 <USBD_StdItfReq+0xc2>
          break;
 8007764:	bf00      	nop
      }
      break;
 8007766:	e004      	b.n	8007772 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fd15 	bl	800819a <USBD_CtlError>
      break;
 8007770:	bf00      	nop
  }

  return ret;
 8007772:	7bfb      	ldrb	r3, [r7, #15]
}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	889b      	ldrh	r3, [r3, #4]
 800778e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007798:	2b40      	cmp	r3, #64	@ 0x40
 800779a:	d007      	beq.n	80077ac <USBD_StdEPReq+0x30>
 800779c:	2b40      	cmp	r3, #64	@ 0x40
 800779e:	f200 817f 	bhi.w	8007aa0 <USBD_StdEPReq+0x324>
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d02a      	beq.n	80077fc <USBD_StdEPReq+0x80>
 80077a6:	2b20      	cmp	r3, #32
 80077a8:	f040 817a 	bne.w	8007aa0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80077ac:	7bbb      	ldrb	r3, [r7, #14]
 80077ae:	4619      	mov	r1, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7ff fe85 	bl	80074c0 <USBD_CoreFindEP>
 80077b6:	4603      	mov	r3, r0
 80077b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077ba:	7b7b      	ldrb	r3, [r7, #13]
 80077bc:	2bff      	cmp	r3, #255	@ 0xff
 80077be:	f000 8174 	beq.w	8007aaa <USBD_StdEPReq+0x32e>
 80077c2:	7b7b      	ldrb	r3, [r7, #13]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f040 8170 	bne.w	8007aaa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80077ca:	7b7a      	ldrb	r2, [r7, #13]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80077d2:	7b7a      	ldrb	r2, [r7, #13]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	32ae      	adds	r2, #174	@ 0xae
 80077d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f000 8163 	beq.w	8007aaa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80077e4:	7b7a      	ldrb	r2, [r7, #13]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	32ae      	adds	r2, #174	@ 0xae
 80077ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	4798      	blx	r3
 80077f6:	4603      	mov	r3, r0
 80077f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80077fa:	e156      	b.n	8007aaa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	785b      	ldrb	r3, [r3, #1]
 8007800:	2b03      	cmp	r3, #3
 8007802:	d008      	beq.n	8007816 <USBD_StdEPReq+0x9a>
 8007804:	2b03      	cmp	r3, #3
 8007806:	f300 8145 	bgt.w	8007a94 <USBD_StdEPReq+0x318>
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 809b 	beq.w	8007946 <USBD_StdEPReq+0x1ca>
 8007810:	2b01      	cmp	r3, #1
 8007812:	d03c      	beq.n	800788e <USBD_StdEPReq+0x112>
 8007814:	e13e      	b.n	8007a94 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b02      	cmp	r3, #2
 8007820:	d002      	beq.n	8007828 <USBD_StdEPReq+0xac>
 8007822:	2b03      	cmp	r3, #3
 8007824:	d016      	beq.n	8007854 <USBD_StdEPReq+0xd8>
 8007826:	e02c      	b.n	8007882 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007828:	7bbb      	ldrb	r3, [r7, #14]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00d      	beq.n	800784a <USBD_StdEPReq+0xce>
 800782e:	7bbb      	ldrb	r3, [r7, #14]
 8007830:	2b80      	cmp	r3, #128	@ 0x80
 8007832:	d00a      	beq.n	800784a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007834:	7bbb      	ldrb	r3, [r7, #14]
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f004 f80f 	bl	800b85c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800783e:	2180      	movs	r1, #128	@ 0x80
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f004 f80b 	bl	800b85c <USBD_LL_StallEP>
 8007846:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007848:	e020      	b.n	800788c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800784a:	6839      	ldr	r1, [r7, #0]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fca4 	bl	800819a <USBD_CtlError>
              break;
 8007852:	e01b      	b.n	800788c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	885b      	ldrh	r3, [r3, #2]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10e      	bne.n	800787a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800785c:	7bbb      	ldrb	r3, [r7, #14]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00b      	beq.n	800787a <USBD_StdEPReq+0xfe>
 8007862:	7bbb      	ldrb	r3, [r7, #14]
 8007864:	2b80      	cmp	r3, #128	@ 0x80
 8007866:	d008      	beq.n	800787a <USBD_StdEPReq+0xfe>
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	88db      	ldrh	r3, [r3, #6]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d104      	bne.n	800787a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007870:	7bbb      	ldrb	r3, [r7, #14]
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f003 fff1 	bl	800b85c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fd58 	bl	8008330 <USBD_CtlSendStatus>

              break;
 8007880:	e004      	b.n	800788c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fc88 	bl	800819a <USBD_CtlError>
              break;
 800788a:	bf00      	nop
          }
          break;
 800788c:	e107      	b.n	8007a9e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b02      	cmp	r3, #2
 8007898:	d002      	beq.n	80078a0 <USBD_StdEPReq+0x124>
 800789a:	2b03      	cmp	r3, #3
 800789c:	d016      	beq.n	80078cc <USBD_StdEPReq+0x150>
 800789e:	e04b      	b.n	8007938 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078a0:	7bbb      	ldrb	r3, [r7, #14]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00d      	beq.n	80078c2 <USBD_StdEPReq+0x146>
 80078a6:	7bbb      	ldrb	r3, [r7, #14]
 80078a8:	2b80      	cmp	r3, #128	@ 0x80
 80078aa:	d00a      	beq.n	80078c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80078ac:	7bbb      	ldrb	r3, [r7, #14]
 80078ae:	4619      	mov	r1, r3
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f003 ffd3 	bl	800b85c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80078b6:	2180      	movs	r1, #128	@ 0x80
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f003 ffcf 	bl	800b85c <USBD_LL_StallEP>
 80078be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078c0:	e040      	b.n	8007944 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80078c2:	6839      	ldr	r1, [r7, #0]
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fc68 	bl	800819a <USBD_CtlError>
              break;
 80078ca:	e03b      	b.n	8007944 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	885b      	ldrh	r3, [r3, #2]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d136      	bne.n	8007942 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80078d4:	7bbb      	ldrb	r3, [r7, #14]
 80078d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d004      	beq.n	80078e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80078de:	7bbb      	ldrb	r3, [r7, #14]
 80078e0:	4619      	mov	r1, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f003 ffd9 	bl	800b89a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fd21 	bl	8008330 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	4619      	mov	r1, r3
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f7ff fde4 	bl	80074c0 <USBD_CoreFindEP>
 80078f8:	4603      	mov	r3, r0
 80078fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078fc:	7b7b      	ldrb	r3, [r7, #13]
 80078fe:	2bff      	cmp	r3, #255	@ 0xff
 8007900:	d01f      	beq.n	8007942 <USBD_StdEPReq+0x1c6>
 8007902:	7b7b      	ldrb	r3, [r7, #13]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d11c      	bne.n	8007942 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007908:	7b7a      	ldrb	r2, [r7, #13]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007910:	7b7a      	ldrb	r2, [r7, #13]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	32ae      	adds	r2, #174	@ 0xae
 8007916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d010      	beq.n	8007942 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007920:	7b7a      	ldrb	r2, [r7, #13]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	32ae      	adds	r2, #174	@ 0xae
 8007926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	4798      	blx	r3
 8007932:	4603      	mov	r3, r0
 8007934:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007936:	e004      	b.n	8007942 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fc2d 	bl	800819a <USBD_CtlError>
              break;
 8007940:	e000      	b.n	8007944 <USBD_StdEPReq+0x1c8>
              break;
 8007942:	bf00      	nop
          }
          break;
 8007944:	e0ab      	b.n	8007a9e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b02      	cmp	r3, #2
 8007950:	d002      	beq.n	8007958 <USBD_StdEPReq+0x1dc>
 8007952:	2b03      	cmp	r3, #3
 8007954:	d032      	beq.n	80079bc <USBD_StdEPReq+0x240>
 8007956:	e097      	b.n	8007a88 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d007      	beq.n	800796e <USBD_StdEPReq+0x1f2>
 800795e:	7bbb      	ldrb	r3, [r7, #14]
 8007960:	2b80      	cmp	r3, #128	@ 0x80
 8007962:	d004      	beq.n	800796e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fc17 	bl	800819a <USBD_CtlError>
                break;
 800796c:	e091      	b.n	8007a92 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800796e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007972:	2b00      	cmp	r3, #0
 8007974:	da0b      	bge.n	800798e <USBD_StdEPReq+0x212>
 8007976:	7bbb      	ldrb	r3, [r7, #14]
 8007978:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800797c:	4613      	mov	r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4413      	add	r3, r2
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	3310      	adds	r3, #16
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	4413      	add	r3, r2
 800798a:	3304      	adds	r3, #4
 800798c:	e00b      	b.n	80079a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800798e:	7bbb      	ldrb	r3, [r7, #14]
 8007990:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007994:	4613      	mov	r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	4413      	add	r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	4413      	add	r3, r2
 80079a4:	3304      	adds	r3, #4
 80079a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	2200      	movs	r2, #0
 80079ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	2202      	movs	r2, #2
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fc61 	bl	800827c <USBD_CtlSendData>
              break;
 80079ba:	e06a      	b.n	8007a92 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80079bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	da11      	bge.n	80079e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
 80079c6:	f003 020f 	and.w	r2, r3, #15
 80079ca:	6879      	ldr	r1, [r7, #4]
 80079cc:	4613      	mov	r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	440b      	add	r3, r1
 80079d6:	3324      	adds	r3, #36	@ 0x24
 80079d8:	881b      	ldrh	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d117      	bne.n	8007a0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fbda 	bl	800819a <USBD_CtlError>
                  break;
 80079e6:	e054      	b.n	8007a92 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80079e8:	7bbb      	ldrb	r3, [r7, #14]
 80079ea:	f003 020f 	and.w	r2, r3, #15
 80079ee:	6879      	ldr	r1, [r7, #4]
 80079f0:	4613      	mov	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	4413      	add	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	440b      	add	r3, r1
 80079fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80079fe:	881b      	ldrh	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d104      	bne.n	8007a0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fbc7 	bl	800819a <USBD_CtlError>
                  break;
 8007a0c:	e041      	b.n	8007a92 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	da0b      	bge.n	8007a2e <USBD_StdEPReq+0x2b2>
 8007a16:	7bbb      	ldrb	r3, [r7, #14]
 8007a18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	3310      	adds	r3, #16
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	4413      	add	r3, r2
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	e00b      	b.n	8007a46 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a2e:	7bbb      	ldrb	r3, [r7, #14]
 8007a30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a34:	4613      	mov	r3, r2
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	4413      	add	r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	4413      	add	r3, r2
 8007a44:	3304      	adds	r3, #4
 8007a46:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d002      	beq.n	8007a54 <USBD_StdEPReq+0x2d8>
 8007a4e:	7bbb      	ldrb	r3, [r7, #14]
 8007a50:	2b80      	cmp	r3, #128	@ 0x80
 8007a52:	d103      	bne.n	8007a5c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	2200      	movs	r2, #0
 8007a58:	601a      	str	r2, [r3, #0]
 8007a5a:	e00e      	b.n	8007a7a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a5c:	7bbb      	ldrb	r3, [r7, #14]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f003 ff39 	bl	800b8d8 <USBD_LL_IsStallEP>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d003      	beq.n	8007a74 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	601a      	str	r2, [r3, #0]
 8007a72:	e002      	b.n	8007a7a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	2200      	movs	r2, #0
 8007a78:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fbfb 	bl	800827c <USBD_CtlSendData>
              break;
 8007a86:	e004      	b.n	8007a92 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fb85 	bl	800819a <USBD_CtlError>
              break;
 8007a90:	bf00      	nop
          }
          break;
 8007a92:	e004      	b.n	8007a9e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007a94:	6839      	ldr	r1, [r7, #0]
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 fb7f 	bl	800819a <USBD_CtlError>
          break;
 8007a9c:	bf00      	nop
      }
      break;
 8007a9e:	e005      	b.n	8007aac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fb79 	bl	800819a <USBD_CtlError>
      break;
 8007aa8:	e000      	b.n	8007aac <USBD_StdEPReq+0x330>
      break;
 8007aaa:	bf00      	nop
  }

  return ret;
 8007aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
	...

08007ab8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007aca:	2300      	movs	r3, #0
 8007acc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	885b      	ldrh	r3, [r3, #2]
 8007ad2:	0a1b      	lsrs	r3, r3, #8
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	2b0e      	cmp	r3, #14
 8007ada:	f200 8152 	bhi.w	8007d82 <USBD_GetDescriptor+0x2ca>
 8007ade:	a201      	add	r2, pc, #4	@ (adr r2, 8007ae4 <USBD_GetDescriptor+0x2c>)
 8007ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae4:	08007b55 	.word	0x08007b55
 8007ae8:	08007b6d 	.word	0x08007b6d
 8007aec:	08007bad 	.word	0x08007bad
 8007af0:	08007d83 	.word	0x08007d83
 8007af4:	08007d83 	.word	0x08007d83
 8007af8:	08007d23 	.word	0x08007d23
 8007afc:	08007d4f 	.word	0x08007d4f
 8007b00:	08007d83 	.word	0x08007d83
 8007b04:	08007d83 	.word	0x08007d83
 8007b08:	08007d83 	.word	0x08007d83
 8007b0c:	08007d83 	.word	0x08007d83
 8007b10:	08007d83 	.word	0x08007d83
 8007b14:	08007d83 	.word	0x08007d83
 8007b18:	08007d83 	.word	0x08007d83
 8007b1c:	08007b21 	.word	0x08007b21
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b26:	69db      	ldr	r3, [r3, #28]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00b      	beq.n	8007b44 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b32:	69db      	ldr	r3, [r3, #28]
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	7c12      	ldrb	r2, [r2, #16]
 8007b38:	f107 0108 	add.w	r1, r7, #8
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	4798      	blx	r3
 8007b40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b42:	e126      	b.n	8007d92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007b44:	6839      	ldr	r1, [r7, #0]
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 fb27 	bl	800819a <USBD_CtlError>
        err++;
 8007b4c:	7afb      	ldrb	r3, [r7, #11]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	72fb      	strb	r3, [r7, #11]
      break;
 8007b52:	e11e      	b.n	8007d92 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	7c12      	ldrb	r2, [r2, #16]
 8007b60:	f107 0108 	add.w	r1, r7, #8
 8007b64:	4610      	mov	r0, r2
 8007b66:	4798      	blx	r3
 8007b68:	60f8      	str	r0, [r7, #12]
      break;
 8007b6a:	e112      	b.n	8007d92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	7c1b      	ldrb	r3, [r3, #16]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10d      	bne.n	8007b90 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b7c:	f107 0208 	add.w	r2, r7, #8
 8007b80:	4610      	mov	r0, r2
 8007b82:	4798      	blx	r3
 8007b84:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b8e:	e100      	b.n	8007d92 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b98:	f107 0208 	add.w	r2, r7, #8
 8007b9c:	4610      	mov	r0, r2
 8007b9e:	4798      	blx	r3
 8007ba0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	701a      	strb	r2, [r3, #0]
      break;
 8007baa:	e0f2      	b.n	8007d92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	885b      	ldrh	r3, [r3, #2]
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b05      	cmp	r3, #5
 8007bb4:	f200 80ac 	bhi.w	8007d10 <USBD_GetDescriptor+0x258>
 8007bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8007bc0 <USBD_GetDescriptor+0x108>)
 8007bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbe:	bf00      	nop
 8007bc0:	08007bd9 	.word	0x08007bd9
 8007bc4:	08007c0d 	.word	0x08007c0d
 8007bc8:	08007c41 	.word	0x08007c41
 8007bcc:	08007c75 	.word	0x08007c75
 8007bd0:	08007ca9 	.word	0x08007ca9
 8007bd4:	08007cdd 	.word	0x08007cdd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00b      	beq.n	8007bfc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	7c12      	ldrb	r2, [r2, #16]
 8007bf0:	f107 0108 	add.w	r1, r7, #8
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	4798      	blx	r3
 8007bf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bfa:	e091      	b.n	8007d20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007bfc:	6839      	ldr	r1, [r7, #0]
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 facb 	bl	800819a <USBD_CtlError>
            err++;
 8007c04:	7afb      	ldrb	r3, [r7, #11]
 8007c06:	3301      	adds	r3, #1
 8007c08:	72fb      	strb	r3, [r7, #11]
          break;
 8007c0a:	e089      	b.n	8007d20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00b      	beq.n	8007c30 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	7c12      	ldrb	r2, [r2, #16]
 8007c24:	f107 0108 	add.w	r1, r7, #8
 8007c28:	4610      	mov	r0, r2
 8007c2a:	4798      	blx	r3
 8007c2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c2e:	e077      	b.n	8007d20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fab1 	bl	800819a <USBD_CtlError>
            err++;
 8007c38:	7afb      	ldrb	r3, [r7, #11]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c3e:	e06f      	b.n	8007d20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00b      	beq.n	8007c64 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	7c12      	ldrb	r2, [r2, #16]
 8007c58:	f107 0108 	add.w	r1, r7, #8
 8007c5c:	4610      	mov	r0, r2
 8007c5e:	4798      	blx	r3
 8007c60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c62:	e05d      	b.n	8007d20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fa97 	bl	800819a <USBD_CtlError>
            err++;
 8007c6c:	7afb      	ldrb	r3, [r7, #11]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	72fb      	strb	r3, [r7, #11]
          break;
 8007c72:	e055      	b.n	8007d20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00b      	beq.n	8007c98 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	7c12      	ldrb	r2, [r2, #16]
 8007c8c:	f107 0108 	add.w	r1, r7, #8
 8007c90:	4610      	mov	r0, r2
 8007c92:	4798      	blx	r3
 8007c94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c96:	e043      	b.n	8007d20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fa7d 	bl	800819a <USBD_CtlError>
            err++;
 8007ca0:	7afb      	ldrb	r3, [r7, #11]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ca6:	e03b      	b.n	8007d20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00b      	beq.n	8007ccc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cba:	695b      	ldr	r3, [r3, #20]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	7c12      	ldrb	r2, [r2, #16]
 8007cc0:	f107 0108 	add.w	r1, r7, #8
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	4798      	blx	r3
 8007cc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cca:	e029      	b.n	8007d20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fa63 	bl	800819a <USBD_CtlError>
            err++;
 8007cd4:	7afb      	ldrb	r3, [r7, #11]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	72fb      	strb	r3, [r7, #11]
          break;
 8007cda:	e021      	b.n	8007d20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00b      	beq.n	8007d00 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cee:	699b      	ldr	r3, [r3, #24]
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	7c12      	ldrb	r2, [r2, #16]
 8007cf4:	f107 0108 	add.w	r1, r7, #8
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	4798      	blx	r3
 8007cfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cfe:	e00f      	b.n	8007d20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d00:	6839      	ldr	r1, [r7, #0]
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fa49 	bl	800819a <USBD_CtlError>
            err++;
 8007d08:	7afb      	ldrb	r3, [r7, #11]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d0e:	e007      	b.n	8007d20 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007d10:	6839      	ldr	r1, [r7, #0]
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fa41 	bl	800819a <USBD_CtlError>
          err++;
 8007d18:	7afb      	ldrb	r3, [r7, #11]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007d1e:	bf00      	nop
      }
      break;
 8007d20:	e037      	b.n	8007d92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	7c1b      	ldrb	r3, [r3, #16]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d109      	bne.n	8007d3e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d32:	f107 0208 	add.w	r2, r7, #8
 8007d36:	4610      	mov	r0, r2
 8007d38:	4798      	blx	r3
 8007d3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d3c:	e029      	b.n	8007d92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 fa2a 	bl	800819a <USBD_CtlError>
        err++;
 8007d46:	7afb      	ldrb	r3, [r7, #11]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	72fb      	strb	r3, [r7, #11]
      break;
 8007d4c:	e021      	b.n	8007d92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	7c1b      	ldrb	r3, [r3, #16]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10d      	bne.n	8007d72 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d5e:	f107 0208 	add.w	r2, r7, #8
 8007d62:	4610      	mov	r0, r2
 8007d64:	4798      	blx	r3
 8007d66:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	2207      	movs	r2, #7
 8007d6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d70:	e00f      	b.n	8007d92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fa10 	bl	800819a <USBD_CtlError>
        err++;
 8007d7a:	7afb      	ldrb	r3, [r7, #11]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	72fb      	strb	r3, [r7, #11]
      break;
 8007d80:	e007      	b.n	8007d92 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007d82:	6839      	ldr	r1, [r7, #0]
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fa08 	bl	800819a <USBD_CtlError>
      err++;
 8007d8a:	7afb      	ldrb	r3, [r7, #11]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	72fb      	strb	r3, [r7, #11]
      break;
 8007d90:	bf00      	nop
  }

  if (err != 0U)
 8007d92:	7afb      	ldrb	r3, [r7, #11]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d11e      	bne.n	8007dd6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	88db      	ldrh	r3, [r3, #6]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d016      	beq.n	8007dce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007da0:	893b      	ldrh	r3, [r7, #8]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00e      	beq.n	8007dc4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	88da      	ldrh	r2, [r3, #6]
 8007daa:	893b      	ldrh	r3, [r7, #8]
 8007dac:	4293      	cmp	r3, r2
 8007dae:	bf28      	it	cs
 8007db0:	4613      	movcs	r3, r2
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007db6:	893b      	ldrh	r3, [r7, #8]
 8007db8:	461a      	mov	r2, r3
 8007dba:	68f9      	ldr	r1, [r7, #12]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fa5d 	bl	800827c <USBD_CtlSendData>
 8007dc2:	e009      	b.n	8007dd8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f9e7 	bl	800819a <USBD_CtlError>
 8007dcc:	e004      	b.n	8007dd8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 faae 	bl	8008330 <USBD_CtlSendStatus>
 8007dd4:	e000      	b.n	8007dd8 <USBD_GetDescriptor+0x320>
    return;
 8007dd6:	bf00      	nop
  }
}
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop

08007de0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	889b      	ldrh	r3, [r3, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d131      	bne.n	8007e56 <USBD_SetAddress+0x76>
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	88db      	ldrh	r3, [r3, #6]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d12d      	bne.n	8007e56 <USBD_SetAddress+0x76>
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	885b      	ldrh	r3, [r3, #2]
 8007dfe:	2b7f      	cmp	r3, #127	@ 0x7f
 8007e00:	d829      	bhi.n	8007e56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	885b      	ldrh	r3, [r3, #2]
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b03      	cmp	r3, #3
 8007e18:	d104      	bne.n	8007e24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f9bc 	bl	800819a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e22:	e01d      	b.n	8007e60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	7bfa      	ldrb	r2, [r7, #15]
 8007e28:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	4619      	mov	r1, r3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f003 fd7d 	bl	800b930 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fa7a 	bl	8008330 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d004      	beq.n	8007e4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2202      	movs	r2, #2
 8007e46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e4a:	e009      	b.n	8007e60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e54:	e004      	b.n	8007e60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e56:	6839      	ldr	r1, [r7, #0]
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f99e 	bl	800819a <USBD_CtlError>
  }
}
 8007e5e:	bf00      	nop
 8007e60:	bf00      	nop
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e72:	2300      	movs	r3, #0
 8007e74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	885b      	ldrh	r3, [r3, #2]
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	4b4e      	ldr	r3, [pc, #312]	@ (8007fb8 <USBD_SetConfig+0x150>)
 8007e7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e80:	4b4d      	ldr	r3, [pc, #308]	@ (8007fb8 <USBD_SetConfig+0x150>)
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d905      	bls.n	8007e94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f985 	bl	800819a <USBD_CtlError>
    return USBD_FAIL;
 8007e90:	2303      	movs	r3, #3
 8007e92:	e08c      	b.n	8007fae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d002      	beq.n	8007ea6 <USBD_SetConfig+0x3e>
 8007ea0:	2b03      	cmp	r3, #3
 8007ea2:	d029      	beq.n	8007ef8 <USBD_SetConfig+0x90>
 8007ea4:	e075      	b.n	8007f92 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007ea6:	4b44      	ldr	r3, [pc, #272]	@ (8007fb8 <USBD_SetConfig+0x150>)
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d020      	beq.n	8007ef0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007eae:	4b42      	ldr	r3, [pc, #264]	@ (8007fb8 <USBD_SetConfig+0x150>)
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007eb8:	4b3f      	ldr	r3, [pc, #252]	@ (8007fb8 <USBD_SetConfig+0x150>)
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7fe ffbf 	bl	8006e42 <USBD_SetClassConfig>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007ec8:	7bfb      	ldrb	r3, [r7, #15]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d008      	beq.n	8007ee0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f962 	bl	800819a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2202      	movs	r2, #2
 8007eda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ede:	e065      	b.n	8007fac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fa25 	bl	8008330 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2203      	movs	r2, #3
 8007eea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007eee:	e05d      	b.n	8007fac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fa1d 	bl	8008330 <USBD_CtlSendStatus>
      break;
 8007ef6:	e059      	b.n	8007fac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007ef8:	4b2f      	ldr	r3, [pc, #188]	@ (8007fb8 <USBD_SetConfig+0x150>)
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d112      	bne.n	8007f26 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2202      	movs	r2, #2
 8007f04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007f08:	4b2b      	ldr	r3, [pc, #172]	@ (8007fb8 <USBD_SetConfig+0x150>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f12:	4b29      	ldr	r3, [pc, #164]	@ (8007fb8 <USBD_SetConfig+0x150>)
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	4619      	mov	r1, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7fe ffae 	bl	8006e7a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fa06 	bl	8008330 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f24:	e042      	b.n	8007fac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007f26:	4b24      	ldr	r3, [pc, #144]	@ (8007fb8 <USBD_SetConfig+0x150>)
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d02a      	beq.n	8007f8a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f7fe ff9c 	bl	8006e7a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007f42:	4b1d      	ldr	r3, [pc, #116]	@ (8007fb8 <USBD_SetConfig+0x150>)
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	461a      	mov	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8007fb8 <USBD_SetConfig+0x150>)
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	4619      	mov	r1, r3
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7fe ff75 	bl	8006e42 <USBD_SetClassConfig>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00f      	beq.n	8007f82 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007f62:	6839      	ldr	r1, [r7, #0]
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 f918 	bl	800819a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	4619      	mov	r1, r3
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f7fe ff81 	bl	8006e7a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007f80:	e014      	b.n	8007fac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f9d4 	bl	8008330 <USBD_CtlSendStatus>
      break;
 8007f88:	e010      	b.n	8007fac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f9d0 	bl	8008330 <USBD_CtlSendStatus>
      break;
 8007f90:	e00c      	b.n	8007fac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007f92:	6839      	ldr	r1, [r7, #0]
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f900 	bl	800819a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f9a:	4b07      	ldr	r3, [pc, #28]	@ (8007fb8 <USBD_SetConfig+0x150>)
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f7fe ff6a 	bl	8006e7a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	73fb      	strb	r3, [r7, #15]
      break;
 8007faa:	bf00      	nop
  }

  return ret;
 8007fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	200002e4 	.word	0x200002e4

08007fbc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	88db      	ldrh	r3, [r3, #6]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d004      	beq.n	8007fd8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007fce:	6839      	ldr	r1, [r7, #0]
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 f8e2 	bl	800819a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007fd6:	e023      	b.n	8008020 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	dc02      	bgt.n	8007fea <USBD_GetConfig+0x2e>
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	dc03      	bgt.n	8007ff0 <USBD_GetConfig+0x34>
 8007fe8:	e015      	b.n	8008016 <USBD_GetConfig+0x5a>
 8007fea:	2b03      	cmp	r3, #3
 8007fec:	d00b      	beq.n	8008006 <USBD_GetConfig+0x4a>
 8007fee:	e012      	b.n	8008016 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f93c 	bl	800827c <USBD_CtlSendData>
        break;
 8008004:	e00c      	b.n	8008020 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	3304      	adds	r3, #4
 800800a:	2201      	movs	r2, #1
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f934 	bl	800827c <USBD_CtlSendData>
        break;
 8008014:	e004      	b.n	8008020 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008016:	6839      	ldr	r1, [r7, #0]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f8be 	bl	800819a <USBD_CtlError>
        break;
 800801e:	bf00      	nop
}
 8008020:	bf00      	nop
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008038:	b2db      	uxtb	r3, r3
 800803a:	3b01      	subs	r3, #1
 800803c:	2b02      	cmp	r3, #2
 800803e:	d81e      	bhi.n	800807e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	88db      	ldrh	r3, [r3, #6]
 8008044:	2b02      	cmp	r3, #2
 8008046:	d004      	beq.n	8008052 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f8a5 	bl	800819a <USBD_CtlError>
        break;
 8008050:	e01a      	b.n	8008088 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2201      	movs	r2, #1
 8008056:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800805e:	2b00      	cmp	r3, #0
 8008060:	d005      	beq.n	800806e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	f043 0202 	orr.w	r2, r3, #2
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	330c      	adds	r3, #12
 8008072:	2202      	movs	r2, #2
 8008074:	4619      	mov	r1, r3
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f900 	bl	800827c <USBD_CtlSendData>
      break;
 800807c:	e004      	b.n	8008088 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800807e:	6839      	ldr	r1, [r7, #0]
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 f88a 	bl	800819a <USBD_CtlError>
      break;
 8008086:	bf00      	nop
  }
}
 8008088:	bf00      	nop
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	885b      	ldrh	r3, [r3, #2]
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d107      	bne.n	80080b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f940 	bl	8008330 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80080b0:	e013      	b.n	80080da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	885b      	ldrh	r3, [r3, #2]
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d10b      	bne.n	80080d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	889b      	ldrh	r3, [r3, #4]
 80080be:	0a1b      	lsrs	r3, r3, #8
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f930 	bl	8008330 <USBD_CtlSendStatus>
}
 80080d0:	e003      	b.n	80080da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f860 	bl	800819a <USBD_CtlError>
}
 80080da:	bf00      	nop
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b082      	sub	sp, #8
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	3b01      	subs	r3, #1
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d80b      	bhi.n	8008112 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	885b      	ldrh	r3, [r3, #2]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d10c      	bne.n	800811c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f910 	bl	8008330 <USBD_CtlSendStatus>
      }
      break;
 8008110:	e004      	b.n	800811c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008112:	6839      	ldr	r1, [r7, #0]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f840 	bl	800819a <USBD_CtlError>
      break;
 800811a:	e000      	b.n	800811e <USBD_ClrFeature+0x3c>
      break;
 800811c:	bf00      	nop
  }
}
 800811e:	bf00      	nop
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b084      	sub	sp, #16
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	781a      	ldrb	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	3301      	adds	r3, #1
 8008140:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	781a      	ldrb	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	3301      	adds	r3, #1
 800814e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f7ff fa16 	bl	8007582 <SWAPBYTE>
 8008156:	4603      	mov	r3, r0
 8008158:	461a      	mov	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	3301      	adds	r3, #1
 8008162:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	3301      	adds	r3, #1
 8008168:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f7ff fa09 	bl	8007582 <SWAPBYTE>
 8008170:	4603      	mov	r3, r0
 8008172:	461a      	mov	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	3301      	adds	r3, #1
 800817c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	3301      	adds	r3, #1
 8008182:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f7ff f9fc 	bl	8007582 <SWAPBYTE>
 800818a:	4603      	mov	r3, r0
 800818c:	461a      	mov	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	80da      	strh	r2, [r3, #6]
}
 8008192:	bf00      	nop
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b082      	sub	sp, #8
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80081a4:	2180      	movs	r1, #128	@ 0x80
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f003 fb58 	bl	800b85c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80081ac:	2100      	movs	r1, #0
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f003 fb54 	bl	800b85c <USBD_LL_StallEP>
}
 80081b4:	bf00      	nop
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081c8:	2300      	movs	r3, #0
 80081ca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d036      	beq.n	8008240 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80081d6:	6938      	ldr	r0, [r7, #16]
 80081d8:	f000 f836 	bl	8008248 <USBD_GetLen>
 80081dc:	4603      	mov	r3, r0
 80081de:	3301      	adds	r3, #1
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	005b      	lsls	r3, r3, #1
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	4413      	add	r3, r2
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	7812      	ldrb	r2, [r2, #0]
 80081f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80081f6:	7dfb      	ldrb	r3, [r7, #23]
 80081f8:	3301      	adds	r3, #1
 80081fa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80081fc:	7dfb      	ldrb	r3, [r7, #23]
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	4413      	add	r3, r2
 8008202:	2203      	movs	r2, #3
 8008204:	701a      	strb	r2, [r3, #0]
  idx++;
 8008206:	7dfb      	ldrb	r3, [r7, #23]
 8008208:	3301      	adds	r3, #1
 800820a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800820c:	e013      	b.n	8008236 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800820e:	7dfb      	ldrb	r3, [r7, #23]
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	4413      	add	r3, r2
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	7812      	ldrb	r2, [r2, #0]
 8008218:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	3301      	adds	r3, #1
 800821e:	613b      	str	r3, [r7, #16]
    idx++;
 8008220:	7dfb      	ldrb	r3, [r7, #23]
 8008222:	3301      	adds	r3, #1
 8008224:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008226:	7dfb      	ldrb	r3, [r7, #23]
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	4413      	add	r3, r2
 800822c:	2200      	movs	r2, #0
 800822e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008230:	7dfb      	ldrb	r3, [r7, #23]
 8008232:	3301      	adds	r3, #1
 8008234:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1e7      	bne.n	800820e <USBD_GetString+0x52>
 800823e:	e000      	b.n	8008242 <USBD_GetString+0x86>
    return;
 8008240:	bf00      	nop
  }
}
 8008242:	3718      	adds	r7, #24
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008250:	2300      	movs	r3, #0
 8008252:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008258:	e005      	b.n	8008266 <USBD_GetLen+0x1e>
  {
    len++;
 800825a:	7bfb      	ldrb	r3, [r7, #15]
 800825c:	3301      	adds	r3, #1
 800825e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	3301      	adds	r3, #1
 8008264:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1f5      	bne.n	800825a <USBD_GetLen+0x12>
  }

  return len;
 800826e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2202      	movs	r2, #2
 800828c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	2100      	movs	r1, #0
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f003 fb63 	bl	800b96e <USBD_LL_Transmit>

  return USBD_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b084      	sub	sp, #16
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	60f8      	str	r0, [r7, #12]
 80082ba:	60b9      	str	r1, [r7, #8]
 80082bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	2100      	movs	r1, #0
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f003 fb52 	bl	800b96e <USBD_LL_Transmit>

  return USBD_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3710      	adds	r7, #16
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2203      	movs	r2, #3
 80082e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	2100      	movs	r1, #0
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f003 fb56 	bl	800b9b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b084      	sub	sp, #16
 8008312:	af00      	add	r7, sp, #0
 8008314:	60f8      	str	r0, [r7, #12]
 8008316:	60b9      	str	r1, [r7, #8]
 8008318:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	2100      	movs	r1, #0
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f003 fb45 	bl	800b9b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2204      	movs	r2, #4
 800833c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008340:	2300      	movs	r3, #0
 8008342:	2200      	movs	r2, #0
 8008344:	2100      	movs	r1, #0
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f003 fb11 	bl	800b96e <USBD_LL_Transmit>

  return USBD_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b082      	sub	sp, #8
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2205      	movs	r2, #5
 8008362:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008366:	2300      	movs	r3, #0
 8008368:	2200      	movs	r2, #0
 800836a:	2100      	movs	r1, #0
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f003 fb1f 	bl	800b9b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800837c:	b480      	push	{r7}
 800837e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008380:	bf00      	nop
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
	...

0800838c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008392:	f3ef 8305 	mrs	r3, IPSR
 8008396:	60bb      	str	r3, [r7, #8]
  return(result);
 8008398:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10f      	bne.n	80083be <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800839e:	f3ef 8310 	mrs	r3, PRIMASK
 80083a2:	607b      	str	r3, [r7, #4]
  return(result);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d105      	bne.n	80083b6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80083aa:	f3ef 8311 	mrs	r3, BASEPRI
 80083ae:	603b      	str	r3, [r7, #0]
  return(result);
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d007      	beq.n	80083c6 <osKernelInitialize+0x3a>
 80083b6:	4b0e      	ldr	r3, [pc, #56]	@ (80083f0 <osKernelInitialize+0x64>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d103      	bne.n	80083c6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80083be:	f06f 0305 	mvn.w	r3, #5
 80083c2:	60fb      	str	r3, [r7, #12]
 80083c4:	e00c      	b.n	80083e0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80083c6:	4b0a      	ldr	r3, [pc, #40]	@ (80083f0 <osKernelInitialize+0x64>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d105      	bne.n	80083da <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80083ce:	4b08      	ldr	r3, [pc, #32]	@ (80083f0 <osKernelInitialize+0x64>)
 80083d0:	2201      	movs	r2, #1
 80083d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	60fb      	str	r3, [r7, #12]
 80083d8:	e002      	b.n	80083e0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80083da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80083de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80083e0:	68fb      	ldr	r3, [r7, #12]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3714      	adds	r7, #20
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	200002e8 	.word	0x200002e8

080083f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083fa:	f3ef 8305 	mrs	r3, IPSR
 80083fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8008400:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10f      	bne.n	8008426 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008406:	f3ef 8310 	mrs	r3, PRIMASK
 800840a:	607b      	str	r3, [r7, #4]
  return(result);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d105      	bne.n	800841e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008412:	f3ef 8311 	mrs	r3, BASEPRI
 8008416:	603b      	str	r3, [r7, #0]
  return(result);
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d007      	beq.n	800842e <osKernelStart+0x3a>
 800841e:	4b0f      	ldr	r3, [pc, #60]	@ (800845c <osKernelStart+0x68>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b02      	cmp	r3, #2
 8008424:	d103      	bne.n	800842e <osKernelStart+0x3a>
    stat = osErrorISR;
 8008426:	f06f 0305 	mvn.w	r3, #5
 800842a:	60fb      	str	r3, [r7, #12]
 800842c:	e010      	b.n	8008450 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800842e:	4b0b      	ldr	r3, [pc, #44]	@ (800845c <osKernelStart+0x68>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d109      	bne.n	800844a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008436:	f7ff ffa1 	bl	800837c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800843a:	4b08      	ldr	r3, [pc, #32]	@ (800845c <osKernelStart+0x68>)
 800843c:	2202      	movs	r2, #2
 800843e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008440:	f001 f8e2 	bl	8009608 <vTaskStartScheduler>
      stat = osOK;
 8008444:	2300      	movs	r3, #0
 8008446:	60fb      	str	r3, [r7, #12]
 8008448:	e002      	b.n	8008450 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800844a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800844e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008450:	68fb      	ldr	r3, [r7, #12]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	200002e8 	.word	0x200002e8

08008460 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008460:	b580      	push	{r7, lr}
 8008462:	b090      	sub	sp, #64	@ 0x40
 8008464:	af04      	add	r7, sp, #16
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800846c:	2300      	movs	r3, #0
 800846e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008470:	f3ef 8305 	mrs	r3, IPSR
 8008474:	61fb      	str	r3, [r7, #28]
  return(result);
 8008476:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008478:	2b00      	cmp	r3, #0
 800847a:	f040 808f 	bne.w	800859c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800847e:	f3ef 8310 	mrs	r3, PRIMASK
 8008482:	61bb      	str	r3, [r7, #24]
  return(result);
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d105      	bne.n	8008496 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800848a:	f3ef 8311 	mrs	r3, BASEPRI
 800848e:	617b      	str	r3, [r7, #20]
  return(result);
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <osThreadNew+0x3e>
 8008496:	4b44      	ldr	r3, [pc, #272]	@ (80085a8 <osThreadNew+0x148>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2b02      	cmp	r3, #2
 800849c:	d07e      	beq.n	800859c <osThreadNew+0x13c>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d07b      	beq.n	800859c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80084a4:	2380      	movs	r3, #128	@ 0x80
 80084a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80084a8:	2318      	movs	r3, #24
 80084aa:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80084ac:	2300      	movs	r3, #0
 80084ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80084b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80084b4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d045      	beq.n	8008548 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d002      	beq.n	80084ca <osThreadNew+0x6a>
        name = attr->name;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d002      	beq.n	80084d8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	699b      	ldr	r3, [r3, #24]
 80084d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80084d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d008      	beq.n	80084f0 <osThreadNew+0x90>
 80084de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e0:	2b38      	cmp	r3, #56	@ 0x38
 80084e2:	d805      	bhi.n	80084f0 <osThreadNew+0x90>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	f003 0301 	and.w	r3, r3, #1
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d001      	beq.n	80084f4 <osThreadNew+0x94>
        return (NULL);
 80084f0:	2300      	movs	r3, #0
 80084f2:	e054      	b.n	800859e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	695b      	ldr	r3, [r3, #20]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d003      	beq.n	8008504 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	695b      	ldr	r3, [r3, #20]
 8008500:	089b      	lsrs	r3, r3, #2
 8008502:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00e      	beq.n	800852a <osThreadNew+0xca>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	2ba7      	cmp	r3, #167	@ 0xa7
 8008512:	d90a      	bls.n	800852a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008518:	2b00      	cmp	r3, #0
 800851a:	d006      	beq.n	800852a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	695b      	ldr	r3, [r3, #20]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d002      	beq.n	800852a <osThreadNew+0xca>
        mem = 1;
 8008524:	2301      	movs	r3, #1
 8008526:	623b      	str	r3, [r7, #32]
 8008528:	e010      	b.n	800854c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10c      	bne.n	800854c <osThreadNew+0xec>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d108      	bne.n	800854c <osThreadNew+0xec>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d104      	bne.n	800854c <osThreadNew+0xec>
          mem = 0;
 8008542:	2300      	movs	r3, #0
 8008544:	623b      	str	r3, [r7, #32]
 8008546:	e001      	b.n	800854c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008548:	2300      	movs	r3, #0
 800854a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800854c:	6a3b      	ldr	r3, [r7, #32]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d110      	bne.n	8008574 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800855a:	9202      	str	r2, [sp, #8]
 800855c:	9301      	str	r3, [sp, #4]
 800855e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008566:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f000 fe4f 	bl	800920c <xTaskCreateStatic>
 800856e:	4603      	mov	r3, r0
 8008570:	613b      	str	r3, [r7, #16]
 8008572:	e013      	b.n	800859c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008574:	6a3b      	ldr	r3, [r7, #32]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d110      	bne.n	800859c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800857a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800857c:	b29a      	uxth	r2, r3
 800857e:	f107 0310 	add.w	r3, r7, #16
 8008582:	9301      	str	r3, [sp, #4]
 8008584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008586:	9300      	str	r3, [sp, #0]
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f000 fea3 	bl	80092d8 <xTaskCreate>
 8008592:	4603      	mov	r3, r0
 8008594:	2b01      	cmp	r3, #1
 8008596:	d001      	beq.n	800859c <osThreadNew+0x13c>
          hTask = NULL;
 8008598:	2300      	movs	r3, #0
 800859a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800859c:	693b      	ldr	r3, [r7, #16]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3730      	adds	r7, #48	@ 0x30
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	200002e8 	.word	0x200002e8

080085ac <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085b4:	f3ef 8305 	mrs	r3, IPSR
 80085b8:	613b      	str	r3, [r7, #16]
  return(result);
 80085ba:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d10f      	bne.n	80085e0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085c0:	f3ef 8310 	mrs	r3, PRIMASK
 80085c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d105      	bne.n	80085d8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80085cc:	f3ef 8311 	mrs	r3, BASEPRI
 80085d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d007      	beq.n	80085e8 <osDelay+0x3c>
 80085d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008604 <osDelay+0x58>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d103      	bne.n	80085e8 <osDelay+0x3c>
    stat = osErrorISR;
 80085e0:	f06f 0305 	mvn.w	r3, #5
 80085e4:	617b      	str	r3, [r7, #20]
 80085e6:	e007      	b.n	80085f8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d002      	beq.n	80085f8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 ffd0 	bl	8009598 <vTaskDelay>
    }
  }

  return (stat);
 80085f8:	697b      	ldr	r3, [r7, #20]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3718      	adds	r7, #24
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	200002e8 	.word	0x200002e8

08008608 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	4a07      	ldr	r2, [pc, #28]	@ (8008634 <vApplicationGetIdleTaskMemory+0x2c>)
 8008618:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	4a06      	ldr	r2, [pc, #24]	@ (8008638 <vApplicationGetIdleTaskMemory+0x30>)
 800861e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2280      	movs	r2, #128	@ 0x80
 8008624:	601a      	str	r2, [r3, #0]
}
 8008626:	bf00      	nop
 8008628:	3714      	adds	r7, #20
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	200002ec 	.word	0x200002ec
 8008638:	20000394 	.word	0x20000394

0800863c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800863c:	b480      	push	{r7}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	4a07      	ldr	r2, [pc, #28]	@ (8008668 <vApplicationGetTimerTaskMemory+0x2c>)
 800864c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	4a06      	ldr	r2, [pc, #24]	@ (800866c <vApplicationGetTimerTaskMemory+0x30>)
 8008652:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800865a:	601a      	str	r2, [r3, #0]
}
 800865c:	bf00      	nop
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr
 8008668:	20000594 	.word	0x20000594
 800866c:	2000063c 	.word	0x2000063c

08008670 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f103 0208 	add.w	r2, r3, #8
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008688:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f103 0208 	add.w	r2, r3, #8
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f103 0208 	add.w	r2, r3, #8
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80086be:	bf00      	nop
 80086c0:	370c      	adds	r7, #12
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086ca:	b480      	push	{r7}
 80086cc:	b085      	sub	sp, #20
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	689a      	ldr	r2, [r3, #8]
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	683a      	ldr	r2, [r7, #0]
 80086ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	683a      	ldr	r2, [r7, #0]
 80086f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	1c5a      	adds	r2, r3, #1
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	601a      	str	r2, [r3, #0]
}
 8008706:	bf00      	nop
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr

08008712 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008712:	b480      	push	{r7}
 8008714:	b085      	sub	sp, #20
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
 800871a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008728:	d103      	bne.n	8008732 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	e00c      	b.n	800874c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	3308      	adds	r3, #8
 8008736:	60fb      	str	r3, [r7, #12]
 8008738:	e002      	b.n	8008740 <vListInsert+0x2e>
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	60fb      	str	r3, [r7, #12]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	429a      	cmp	r2, r3
 800874a:	d2f6      	bcs.n	800873a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	685a      	ldr	r2, [r3, #4]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	683a      	ldr	r2, [r7, #0]
 800875a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	683a      	ldr	r2, [r7, #0]
 8008766:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	1c5a      	adds	r2, r3, #1
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	601a      	str	r2, [r3, #0]
}
 8008778:	bf00      	nop
 800877a:	3714      	adds	r7, #20
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	6892      	ldr	r2, [r2, #8]
 800879a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	6852      	ldr	r2, [r2, #4]
 80087a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d103      	bne.n	80087b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689a      	ldr	r2, [r3, #8]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	1e5a      	subs	r2, r3, #1
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3714      	adds	r7, #20
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10d      	bne.n	8008808 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80087ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f0:	b672      	cpsid	i
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	b662      	cpsie	i
 8008800:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008802:	bf00      	nop
 8008804:	bf00      	nop
 8008806:	e7fd      	b.n	8008804 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8008808:	f002 f8d8 	bl	800a9bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008814:	68f9      	ldr	r1, [r7, #12]
 8008816:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008818:	fb01 f303 	mul.w	r3, r1, r3
 800881c:	441a      	add	r2, r3
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008838:	3b01      	subs	r3, #1
 800883a:	68f9      	ldr	r1, [r7, #12]
 800883c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800883e:	fb01 f303 	mul.w	r3, r1, r3
 8008842:	441a      	add	r2, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	22ff      	movs	r2, #255	@ 0xff
 800884c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	22ff      	movs	r2, #255	@ 0xff
 8008854:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d114      	bne.n	8008888 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d01a      	beq.n	800889c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	3310      	adds	r3, #16
 800886a:	4618      	mov	r0, r3
 800886c:	f001 f978 	bl	8009b60 <xTaskRemoveFromEventList>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d012      	beq.n	800889c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008876:	4b0d      	ldr	r3, [pc, #52]	@ (80088ac <xQueueGenericReset+0xd4>)
 8008878:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800887c:	601a      	str	r2, [r3, #0]
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	e009      	b.n	800889c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	3310      	adds	r3, #16
 800888c:	4618      	mov	r0, r3
 800888e:	f7ff feef 	bl	8008670 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	3324      	adds	r3, #36	@ 0x24
 8008896:	4618      	mov	r0, r3
 8008898:	f7ff feea 	bl	8008670 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800889c:	f002 f8c4 	bl	800aa28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80088a0:	2301      	movs	r3, #1
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	e000ed04 	.word	0xe000ed04

080088b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b08e      	sub	sp, #56	@ 0x38
 80088b4:	af02      	add	r7, sp, #8
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
 80088bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10d      	bne.n	80088e0 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80088c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c8:	b672      	cpsid	i
 80088ca:	f383 8811 	msr	BASEPRI, r3
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	b662      	cpsie	i
 80088d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80088da:	bf00      	nop
 80088dc:	bf00      	nop
 80088de:	e7fd      	b.n	80088dc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d10d      	bne.n	8008902 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80088e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ea:	b672      	cpsid	i
 80088ec:	f383 8811 	msr	BASEPRI, r3
 80088f0:	f3bf 8f6f 	isb	sy
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	b662      	cpsie	i
 80088fa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80088fc:	bf00      	nop
 80088fe:	bf00      	nop
 8008900:	e7fd      	b.n	80088fe <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d002      	beq.n	800890e <xQueueGenericCreateStatic+0x5e>
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d001      	beq.n	8008912 <xQueueGenericCreateStatic+0x62>
 800890e:	2301      	movs	r3, #1
 8008910:	e000      	b.n	8008914 <xQueueGenericCreateStatic+0x64>
 8008912:	2300      	movs	r3, #0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d10d      	bne.n	8008934 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8008918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800891c:	b672      	cpsid	i
 800891e:	f383 8811 	msr	BASEPRI, r3
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	b662      	cpsie	i
 800892c:	623b      	str	r3, [r7, #32]
}
 800892e:	bf00      	nop
 8008930:	bf00      	nop
 8008932:	e7fd      	b.n	8008930 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d102      	bne.n	8008940 <xQueueGenericCreateStatic+0x90>
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d101      	bne.n	8008944 <xQueueGenericCreateStatic+0x94>
 8008940:	2301      	movs	r3, #1
 8008942:	e000      	b.n	8008946 <xQueueGenericCreateStatic+0x96>
 8008944:	2300      	movs	r3, #0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d10d      	bne.n	8008966 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800894a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800894e:	b672      	cpsid	i
 8008950:	f383 8811 	msr	BASEPRI, r3
 8008954:	f3bf 8f6f 	isb	sy
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	b662      	cpsie	i
 800895e:	61fb      	str	r3, [r7, #28]
}
 8008960:	bf00      	nop
 8008962:	bf00      	nop
 8008964:	e7fd      	b.n	8008962 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008966:	2350      	movs	r3, #80	@ 0x50
 8008968:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	2b50      	cmp	r3, #80	@ 0x50
 800896e:	d00d      	beq.n	800898c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008974:	b672      	cpsid	i
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	b662      	cpsie	i
 8008984:	61bb      	str	r3, [r7, #24]
}
 8008986:	bf00      	nop
 8008988:	bf00      	nop
 800898a:	e7fd      	b.n	8008988 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800898c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00d      	beq.n	80089b4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800899a:	2201      	movs	r2, #1
 800899c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80089a0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80089a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	4613      	mov	r3, r2
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	68b9      	ldr	r1, [r7, #8]
 80089ae:	68f8      	ldr	r0, [r7, #12]
 80089b0:	f000 f805 	bl	80089be <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80089b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3730      	adds	r7, #48	@ 0x30
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b084      	sub	sp, #16
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	60f8      	str	r0, [r7, #12]
 80089c6:	60b9      	str	r1, [r7, #8]
 80089c8:	607a      	str	r2, [r7, #4]
 80089ca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d103      	bne.n	80089da <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	69ba      	ldr	r2, [r7, #24]
 80089d6:	601a      	str	r2, [r3, #0]
 80089d8:	e002      	b.n	80089e0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80089ec:	2101      	movs	r1, #1
 80089ee:	69b8      	ldr	r0, [r7, #24]
 80089f0:	f7ff fef2 	bl	80087d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	78fa      	ldrb	r2, [r7, #3]
 80089f8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80089fc:	bf00      	nop
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b08e      	sub	sp, #56	@ 0x38
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
 8008a10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008a12:	2300      	movs	r3, #0
 8008a14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d10d      	bne.n	8008a3c <xQueueGenericSend+0x38>
	__asm volatile
 8008a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a24:	b672      	cpsid	i
 8008a26:	f383 8811 	msr	BASEPRI, r3
 8008a2a:	f3bf 8f6f 	isb	sy
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	b662      	cpsie	i
 8008a34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008a36:	bf00      	nop
 8008a38:	bf00      	nop
 8008a3a:	e7fd      	b.n	8008a38 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d103      	bne.n	8008a4a <xQueueGenericSend+0x46>
 8008a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d101      	bne.n	8008a4e <xQueueGenericSend+0x4a>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e000      	b.n	8008a50 <xQueueGenericSend+0x4c>
 8008a4e:	2300      	movs	r3, #0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10d      	bne.n	8008a70 <xQueueGenericSend+0x6c>
	__asm volatile
 8008a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a58:	b672      	cpsid	i
 8008a5a:	f383 8811 	msr	BASEPRI, r3
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	b662      	cpsie	i
 8008a68:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008a6a:	bf00      	nop
 8008a6c:	bf00      	nop
 8008a6e:	e7fd      	b.n	8008a6c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d103      	bne.n	8008a7e <xQueueGenericSend+0x7a>
 8008a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d101      	bne.n	8008a82 <xQueueGenericSend+0x7e>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e000      	b.n	8008a84 <xQueueGenericSend+0x80>
 8008a82:	2300      	movs	r3, #0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10d      	bne.n	8008aa4 <xQueueGenericSend+0xa0>
	__asm volatile
 8008a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a8c:	b672      	cpsid	i
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	b662      	cpsie	i
 8008a9c:	623b      	str	r3, [r7, #32]
}
 8008a9e:	bf00      	nop
 8008aa0:	bf00      	nop
 8008aa2:	e7fd      	b.n	8008aa0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008aa4:	f001 fa2a 	bl	8009efc <xTaskGetSchedulerState>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d102      	bne.n	8008ab4 <xQueueGenericSend+0xb0>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d101      	bne.n	8008ab8 <xQueueGenericSend+0xb4>
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e000      	b.n	8008aba <xQueueGenericSend+0xb6>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10d      	bne.n	8008ada <xQueueGenericSend+0xd6>
	__asm volatile
 8008abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac2:	b672      	cpsid	i
 8008ac4:	f383 8811 	msr	BASEPRI, r3
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	b662      	cpsie	i
 8008ad2:	61fb      	str	r3, [r7, #28]
}
 8008ad4:	bf00      	nop
 8008ad6:	bf00      	nop
 8008ad8:	e7fd      	b.n	8008ad6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ada:	f001 ff6f 	bl	800a9bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d302      	bcc.n	8008af0 <xQueueGenericSend+0xec>
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d129      	bne.n	8008b44 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	68b9      	ldr	r1, [r7, #8]
 8008af4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008af6:	f000 fa1b 	bl	8008f30 <prvCopyDataToQueue>
 8008afa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d010      	beq.n	8008b26 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b06:	3324      	adds	r3, #36	@ 0x24
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f001 f829 	bl	8009b60 <xTaskRemoveFromEventList>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d013      	beq.n	8008b3c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008b14:	4b3f      	ldr	r3, [pc, #252]	@ (8008c14 <xQueueGenericSend+0x210>)
 8008b16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	f3bf 8f6f 	isb	sy
 8008b24:	e00a      	b.n	8008b3c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d007      	beq.n	8008b3c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008b2c:	4b39      	ldr	r3, [pc, #228]	@ (8008c14 <xQueueGenericSend+0x210>)
 8008b2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b32:	601a      	str	r2, [r3, #0]
 8008b34:	f3bf 8f4f 	dsb	sy
 8008b38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008b3c:	f001 ff74 	bl	800aa28 <vPortExitCritical>
				return pdPASS;
 8008b40:	2301      	movs	r3, #1
 8008b42:	e063      	b.n	8008c0c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d103      	bne.n	8008b52 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b4a:	f001 ff6d 	bl	800aa28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	e05c      	b.n	8008c0c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d106      	bne.n	8008b66 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b58:	f107 0314 	add.w	r3, r7, #20
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f001 f865 	bl	8009c2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b62:	2301      	movs	r3, #1
 8008b64:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b66:	f001 ff5f 	bl	800aa28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b6a:	f000 fdc1 	bl	80096f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b6e:	f001 ff25 	bl	800a9bc <vPortEnterCritical>
 8008b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b78:	b25b      	sxtb	r3, r3
 8008b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b7e:	d103      	bne.n	8008b88 <xQueueGenericSend+0x184>
 8008b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b8e:	b25b      	sxtb	r3, r3
 8008b90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b94:	d103      	bne.n	8008b9e <xQueueGenericSend+0x19a>
 8008b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b9e:	f001 ff43 	bl	800aa28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ba2:	1d3a      	adds	r2, r7, #4
 8008ba4:	f107 0314 	add.w	r3, r7, #20
 8008ba8:	4611      	mov	r1, r2
 8008baa:	4618      	mov	r0, r3
 8008bac:	f001 f854 	bl	8009c58 <xTaskCheckForTimeOut>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d124      	bne.n	8008c00 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008bb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008bb8:	f000 fab2 	bl	8009120 <prvIsQueueFull>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d018      	beq.n	8008bf4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc4:	3310      	adds	r3, #16
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	4611      	mov	r1, r2
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f000 ff72 	bl	8009ab4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008bd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008bd2:	f000 fa3d 	bl	8009050 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008bd6:	f000 fd99 	bl	800970c <xTaskResumeAll>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f47f af7c 	bne.w	8008ada <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8008be2:	4b0c      	ldr	r3, [pc, #48]	@ (8008c14 <xQueueGenericSend+0x210>)
 8008be4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008be8:	601a      	str	r2, [r3, #0]
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	e772      	b.n	8008ada <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008bf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008bf6:	f000 fa2b 	bl	8009050 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008bfa:	f000 fd87 	bl	800970c <xTaskResumeAll>
 8008bfe:	e76c      	b.n	8008ada <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008c00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c02:	f000 fa25 	bl	8009050 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c06:	f000 fd81 	bl	800970c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008c0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3738      	adds	r7, #56	@ 0x38
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	e000ed04 	.word	0xe000ed04

08008c18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b08e      	sub	sp, #56	@ 0x38
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	607a      	str	r2, [r7, #4]
 8008c24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10d      	bne.n	8008c4c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8008c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c34:	b672      	cpsid	i
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	b662      	cpsie	i
 8008c44:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008c46:	bf00      	nop
 8008c48:	bf00      	nop
 8008c4a:	e7fd      	b.n	8008c48 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d103      	bne.n	8008c5a <xQueueGenericSendFromISR+0x42>
 8008c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d101      	bne.n	8008c5e <xQueueGenericSendFromISR+0x46>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e000      	b.n	8008c60 <xQueueGenericSendFromISR+0x48>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10d      	bne.n	8008c80 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8008c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c68:	b672      	cpsid	i
 8008c6a:	f383 8811 	msr	BASEPRI, r3
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	f3bf 8f4f 	dsb	sy
 8008c76:	b662      	cpsie	i
 8008c78:	623b      	str	r3, [r7, #32]
}
 8008c7a:	bf00      	nop
 8008c7c:	bf00      	nop
 8008c7e:	e7fd      	b.n	8008c7c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d103      	bne.n	8008c8e <xQueueGenericSendFromISR+0x76>
 8008c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d101      	bne.n	8008c92 <xQueueGenericSendFromISR+0x7a>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e000      	b.n	8008c94 <xQueueGenericSendFromISR+0x7c>
 8008c92:	2300      	movs	r3, #0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10d      	bne.n	8008cb4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8008c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c9c:	b672      	cpsid	i
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	b662      	cpsie	i
 8008cac:	61fb      	str	r3, [r7, #28]
}
 8008cae:	bf00      	nop
 8008cb0:	bf00      	nop
 8008cb2:	e7fd      	b.n	8008cb0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008cb4:	f001 ff6a 	bl	800ab8c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008cb8:	f3ef 8211 	mrs	r2, BASEPRI
 8008cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc0:	b672      	cpsid	i
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	b662      	cpsie	i
 8008cd0:	61ba      	str	r2, [r7, #24]
 8008cd2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008cd4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d302      	bcc.n	8008cea <xQueueGenericSendFromISR+0xd2>
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d12c      	bne.n	8008d44 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008cf0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008cf4:	683a      	ldr	r2, [r7, #0]
 8008cf6:	68b9      	ldr	r1, [r7, #8]
 8008cf8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cfa:	f000 f919 	bl	8008f30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008cfe:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008d02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d06:	d112      	bne.n	8008d2e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d016      	beq.n	8008d3e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d12:	3324      	adds	r3, #36	@ 0x24
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 ff23 	bl	8009b60 <xTaskRemoveFromEventList>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00e      	beq.n	8008d3e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00b      	beq.n	8008d3e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	601a      	str	r2, [r3, #0]
 8008d2c:	e007      	b.n	8008d3e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008d2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008d32:	3301      	adds	r3, #1
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	b25a      	sxtb	r2, r3
 8008d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8008d42:	e001      	b.n	8008d48 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008d44:	2300      	movs	r3, #0
 8008d46:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d4a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008d52:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3738      	adds	r7, #56	@ 0x38
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
	...

08008d60 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b08c      	sub	sp, #48	@ 0x30
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10d      	bne.n	8008d96 <xQueueReceive+0x36>
	__asm volatile
 8008d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d7e:	b672      	cpsid	i
 8008d80:	f383 8811 	msr	BASEPRI, r3
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	b662      	cpsie	i
 8008d8e:	623b      	str	r3, [r7, #32]
}
 8008d90:	bf00      	nop
 8008d92:	bf00      	nop
 8008d94:	e7fd      	b.n	8008d92 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d103      	bne.n	8008da4 <xQueueReceive+0x44>
 8008d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d101      	bne.n	8008da8 <xQueueReceive+0x48>
 8008da4:	2301      	movs	r3, #1
 8008da6:	e000      	b.n	8008daa <xQueueReceive+0x4a>
 8008da8:	2300      	movs	r3, #0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10d      	bne.n	8008dca <xQueueReceive+0x6a>
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db2:	b672      	cpsid	i
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	b662      	cpsie	i
 8008dc2:	61fb      	str	r3, [r7, #28]
}
 8008dc4:	bf00      	nop
 8008dc6:	bf00      	nop
 8008dc8:	e7fd      	b.n	8008dc6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008dca:	f001 f897 	bl	8009efc <xTaskGetSchedulerState>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d102      	bne.n	8008dda <xQueueReceive+0x7a>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <xQueueReceive+0x7e>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e000      	b.n	8008de0 <xQueueReceive+0x80>
 8008dde:	2300      	movs	r3, #0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10d      	bne.n	8008e00 <xQueueReceive+0xa0>
	__asm volatile
 8008de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de8:	b672      	cpsid	i
 8008dea:	f383 8811 	msr	BASEPRI, r3
 8008dee:	f3bf 8f6f 	isb	sy
 8008df2:	f3bf 8f4f 	dsb	sy
 8008df6:	b662      	cpsie	i
 8008df8:	61bb      	str	r3, [r7, #24]
}
 8008dfa:	bf00      	nop
 8008dfc:	bf00      	nop
 8008dfe:	e7fd      	b.n	8008dfc <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e00:	f001 fddc 	bl	800a9bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e08:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d01f      	beq.n	8008e50 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e10:	68b9      	ldr	r1, [r7, #8]
 8008e12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e14:	f000 f8f6 	bl	8009004 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e1a:	1e5a      	subs	r2, r3, #1
 8008e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e1e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d00f      	beq.n	8008e48 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e2a:	3310      	adds	r3, #16
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f000 fe97 	bl	8009b60 <xTaskRemoveFromEventList>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d007      	beq.n	8008e48 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e38:	4b3c      	ldr	r3, [pc, #240]	@ (8008f2c <xQueueReceive+0x1cc>)
 8008e3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e3e:	601a      	str	r2, [r3, #0]
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e48:	f001 fdee 	bl	800aa28 <vPortExitCritical>
				return pdPASS;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e069      	b.n	8008f24 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d103      	bne.n	8008e5e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e56:	f001 fde7 	bl	800aa28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	e062      	b.n	8008f24 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d106      	bne.n	8008e72 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e64:	f107 0310 	add.w	r3, r7, #16
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 fedf 	bl	8009c2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e72:	f001 fdd9 	bl	800aa28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e76:	f000 fc3b 	bl	80096f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e7a:	f001 fd9f 	bl	800a9bc <vPortEnterCritical>
 8008e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e84:	b25b      	sxtb	r3, r3
 8008e86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e8a:	d103      	bne.n	8008e94 <xQueueReceive+0x134>
 8008e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e9a:	b25b      	sxtb	r3, r3
 8008e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ea0:	d103      	bne.n	8008eaa <xQueueReceive+0x14a>
 8008ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008eaa:	f001 fdbd 	bl	800aa28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008eae:	1d3a      	adds	r2, r7, #4
 8008eb0:	f107 0310 	add.w	r3, r7, #16
 8008eb4:	4611      	mov	r1, r2
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 fece 	bl	8009c58 <xTaskCheckForTimeOut>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d123      	bne.n	8008f0a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ec2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ec4:	f000 f916 	bl	80090f4 <prvIsQueueEmpty>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d017      	beq.n	8008efe <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed0:	3324      	adds	r3, #36	@ 0x24
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	4611      	mov	r1, r2
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f000 fdec 	bl	8009ab4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008edc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ede:	f000 f8b7 	bl	8009050 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ee2:	f000 fc13 	bl	800970c <xTaskResumeAll>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d189      	bne.n	8008e00 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8008eec:	4b0f      	ldr	r3, [pc, #60]	@ (8008f2c <xQueueReceive+0x1cc>)
 8008eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ef2:	601a      	str	r2, [r3, #0]
 8008ef4:	f3bf 8f4f 	dsb	sy
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	e780      	b.n	8008e00 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008efe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f00:	f000 f8a6 	bl	8009050 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f04:	f000 fc02 	bl	800970c <xTaskResumeAll>
 8008f08:	e77a      	b.n	8008e00 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008f0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f0c:	f000 f8a0 	bl	8009050 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f10:	f000 fbfc 	bl	800970c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f16:	f000 f8ed 	bl	80090f4 <prvIsQueueEmpty>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f43f af6f 	beq.w	8008e00 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f22:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3730      	adds	r7, #48	@ 0x30
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	e000ed04 	.word	0xe000ed04

08008f30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d10d      	bne.n	8008f6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d14d      	bne.n	8008ff2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f000 ffec 	bl	8009f38 <xTaskPriorityDisinherit>
 8008f60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2200      	movs	r2, #0
 8008f66:	609a      	str	r2, [r3, #8]
 8008f68:	e043      	b.n	8008ff2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d119      	bne.n	8008fa4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6858      	ldr	r0, [r3, #4]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f78:	461a      	mov	r2, r3
 8008f7a:	68b9      	ldr	r1, [r7, #8]
 8008f7c:	f002 ff24 	bl	800bdc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	685a      	ldr	r2, [r3, #4]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f88:	441a      	add	r2, r3
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	685a      	ldr	r2, [r3, #4]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d32b      	bcc.n	8008ff2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	605a      	str	r2, [r3, #4]
 8008fa2:	e026      	b.n	8008ff2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	68d8      	ldr	r0, [r3, #12]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fac:	461a      	mov	r2, r3
 8008fae:	68b9      	ldr	r1, [r7, #8]
 8008fb0:	f002 ff0a 	bl	800bdc8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	68da      	ldr	r2, [r3, #12]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fbc:	425b      	negs	r3, r3
 8008fbe:	441a      	add	r2, r3
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	68da      	ldr	r2, [r3, #12]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d207      	bcs.n	8008fe0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	689a      	ldr	r2, [r3, #8]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fd8:	425b      	negs	r3, r3
 8008fda:	441a      	add	r2, r3
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d105      	bne.n	8008ff2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d002      	beq.n	8008ff2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	1c5a      	adds	r2, r3, #1
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008ffa:	697b      	ldr	r3, [r7, #20]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3718      	adds	r7, #24
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009012:	2b00      	cmp	r3, #0
 8009014:	d018      	beq.n	8009048 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	68da      	ldr	r2, [r3, #12]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800901e:	441a      	add	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	68da      	ldr	r2, [r3, #12]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	429a      	cmp	r2, r3
 800902e:	d303      	bcc.n	8009038 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	68d9      	ldr	r1, [r3, #12]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009040:	461a      	mov	r2, r3
 8009042:	6838      	ldr	r0, [r7, #0]
 8009044:	f002 fec0 	bl	800bdc8 <memcpy>
	}
}
 8009048:	bf00      	nop
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009058:	f001 fcb0 	bl	800a9bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009062:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009064:	e011      	b.n	800908a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800906a:	2b00      	cmp	r3, #0
 800906c:	d012      	beq.n	8009094 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	3324      	adds	r3, #36	@ 0x24
 8009072:	4618      	mov	r0, r3
 8009074:	f000 fd74 	bl	8009b60 <xTaskRemoveFromEventList>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d001      	beq.n	8009082 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800907e:	f000 fe53 	bl	8009d28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009082:	7bfb      	ldrb	r3, [r7, #15]
 8009084:	3b01      	subs	r3, #1
 8009086:	b2db      	uxtb	r3, r3
 8009088:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800908a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800908e:	2b00      	cmp	r3, #0
 8009090:	dce9      	bgt.n	8009066 <prvUnlockQueue+0x16>
 8009092:	e000      	b.n	8009096 <prvUnlockQueue+0x46>
					break;
 8009094:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	22ff      	movs	r2, #255	@ 0xff
 800909a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800909e:	f001 fcc3 	bl	800aa28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80090a2:	f001 fc8b 	bl	800a9bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80090ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090ae:	e011      	b.n	80090d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d012      	beq.n	80090de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	3310      	adds	r3, #16
 80090bc:	4618      	mov	r0, r3
 80090be:	f000 fd4f 	bl	8009b60 <xTaskRemoveFromEventList>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d001      	beq.n	80090cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80090c8:	f000 fe2e 	bl	8009d28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80090cc:	7bbb      	ldrb	r3, [r7, #14]
 80090ce:	3b01      	subs	r3, #1
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	dce9      	bgt.n	80090b0 <prvUnlockQueue+0x60>
 80090dc:	e000      	b.n	80090e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80090de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	22ff      	movs	r2, #255	@ 0xff
 80090e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80090e8:	f001 fc9e 	bl	800aa28 <vPortExitCritical>
}
 80090ec:	bf00      	nop
 80090ee:	3710      	adds	r7, #16
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090fc:	f001 fc5e 	bl	800a9bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009104:	2b00      	cmp	r3, #0
 8009106:	d102      	bne.n	800910e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009108:	2301      	movs	r3, #1
 800910a:	60fb      	str	r3, [r7, #12]
 800910c:	e001      	b.n	8009112 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800910e:	2300      	movs	r3, #0
 8009110:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009112:	f001 fc89 	bl	800aa28 <vPortExitCritical>

	return xReturn;
 8009116:	68fb      	ldr	r3, [r7, #12]
}
 8009118:	4618      	mov	r0, r3
 800911a:	3710      	adds	r7, #16
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009128:	f001 fc48 	bl	800a9bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009134:	429a      	cmp	r2, r3
 8009136:	d102      	bne.n	800913e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009138:	2301      	movs	r3, #1
 800913a:	60fb      	str	r3, [r7, #12]
 800913c:	e001      	b.n	8009142 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800913e:	2300      	movs	r3, #0
 8009140:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009142:	f001 fc71 	bl	800aa28 <vPortExitCritical>

	return xReturn;
 8009146:	68fb      	ldr	r3, [r7, #12]
}
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800915a:	2300      	movs	r3, #0
 800915c:	60fb      	str	r3, [r7, #12]
 800915e:	e014      	b.n	800918a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009160:	4a0f      	ldr	r2, [pc, #60]	@ (80091a0 <vQueueAddToRegistry+0x50>)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10b      	bne.n	8009184 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800916c:	490c      	ldr	r1, [pc, #48]	@ (80091a0 <vQueueAddToRegistry+0x50>)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	683a      	ldr	r2, [r7, #0]
 8009172:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009176:	4a0a      	ldr	r2, [pc, #40]	@ (80091a0 <vQueueAddToRegistry+0x50>)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	00db      	lsls	r3, r3, #3
 800917c:	4413      	add	r3, r2
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009182:	e006      	b.n	8009192 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	3301      	adds	r3, #1
 8009188:	60fb      	str	r3, [r7, #12]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2b07      	cmp	r3, #7
 800918e:	d9e7      	bls.n	8009160 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009190:	bf00      	nop
 8009192:	bf00      	nop
 8009194:	3714      	adds	r7, #20
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	20000a3c 	.word	0x20000a3c

080091a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80091b4:	f001 fc02 	bl	800a9bc <vPortEnterCritical>
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80091be:	b25b      	sxtb	r3, r3
 80091c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091c4:	d103      	bne.n	80091ce <vQueueWaitForMessageRestricted+0x2a>
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80091d4:	b25b      	sxtb	r3, r3
 80091d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091da:	d103      	bne.n	80091e4 <vQueueWaitForMessageRestricted+0x40>
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	2200      	movs	r2, #0
 80091e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80091e4:	f001 fc20 	bl	800aa28 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d106      	bne.n	80091fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	3324      	adds	r3, #36	@ 0x24
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	68b9      	ldr	r1, [r7, #8]
 80091f8:	4618      	mov	r0, r3
 80091fa:	f000 fc83 	bl	8009b04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80091fe:	6978      	ldr	r0, [r7, #20]
 8009200:	f7ff ff26 	bl	8009050 <prvUnlockQueue>
	}
 8009204:	bf00      	nop
 8009206:	3718      	adds	r7, #24
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800920c:	b580      	push	{r7, lr}
 800920e:	b08e      	sub	sp, #56	@ 0x38
 8009210:	af04      	add	r7, sp, #16
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	607a      	str	r2, [r7, #4]
 8009218:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800921a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800921c:	2b00      	cmp	r3, #0
 800921e:	d10d      	bne.n	800923c <xTaskCreateStatic+0x30>
	__asm volatile
 8009220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009224:	b672      	cpsid	i
 8009226:	f383 8811 	msr	BASEPRI, r3
 800922a:	f3bf 8f6f 	isb	sy
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	b662      	cpsie	i
 8009234:	623b      	str	r3, [r7, #32]
}
 8009236:	bf00      	nop
 8009238:	bf00      	nop
 800923a:	e7fd      	b.n	8009238 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800923c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800923e:	2b00      	cmp	r3, #0
 8009240:	d10d      	bne.n	800925e <xTaskCreateStatic+0x52>
	__asm volatile
 8009242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009246:	b672      	cpsid	i
 8009248:	f383 8811 	msr	BASEPRI, r3
 800924c:	f3bf 8f6f 	isb	sy
 8009250:	f3bf 8f4f 	dsb	sy
 8009254:	b662      	cpsie	i
 8009256:	61fb      	str	r3, [r7, #28]
}
 8009258:	bf00      	nop
 800925a:	bf00      	nop
 800925c:	e7fd      	b.n	800925a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800925e:	23a8      	movs	r3, #168	@ 0xa8
 8009260:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	2ba8      	cmp	r3, #168	@ 0xa8
 8009266:	d00d      	beq.n	8009284 <xTaskCreateStatic+0x78>
	__asm volatile
 8009268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800926c:	b672      	cpsid	i
 800926e:	f383 8811 	msr	BASEPRI, r3
 8009272:	f3bf 8f6f 	isb	sy
 8009276:	f3bf 8f4f 	dsb	sy
 800927a:	b662      	cpsie	i
 800927c:	61bb      	str	r3, [r7, #24]
}
 800927e:	bf00      	nop
 8009280:	bf00      	nop
 8009282:	e7fd      	b.n	8009280 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009284:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009288:	2b00      	cmp	r3, #0
 800928a:	d01e      	beq.n	80092ca <xTaskCreateStatic+0xbe>
 800928c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800928e:	2b00      	cmp	r3, #0
 8009290:	d01b      	beq.n	80092ca <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009294:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009298:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800929a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800929c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800929e:	2202      	movs	r2, #2
 80092a0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80092a4:	2300      	movs	r3, #0
 80092a6:	9303      	str	r3, [sp, #12]
 80092a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092aa:	9302      	str	r3, [sp, #8]
 80092ac:	f107 0314 	add.w	r3, r7, #20
 80092b0:	9301      	str	r3, [sp, #4]
 80092b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	68b9      	ldr	r1, [r7, #8]
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f000 f851 	bl	8009364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80092c4:	f000 f8f8 	bl	80094b8 <prvAddNewTaskToReadyList>
 80092c8:	e001      	b.n	80092ce <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80092ca:	2300      	movs	r3, #0
 80092cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80092ce:	697b      	ldr	r3, [r7, #20]
	}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3728      	adds	r7, #40	@ 0x28
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b08c      	sub	sp, #48	@ 0x30
 80092dc:	af04      	add	r7, sp, #16
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	603b      	str	r3, [r7, #0]
 80092e4:	4613      	mov	r3, r2
 80092e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80092e8:	88fb      	ldrh	r3, [r7, #6]
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	4618      	mov	r0, r3
 80092ee:	f001 fc93 	bl	800ac18 <pvPortMalloc>
 80092f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00e      	beq.n	8009318 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80092fa:	20a8      	movs	r0, #168	@ 0xa8
 80092fc:	f001 fc8c 	bl	800ac18 <pvPortMalloc>
 8009300:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d003      	beq.n	8009310 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	697a      	ldr	r2, [r7, #20]
 800930c:	631a      	str	r2, [r3, #48]	@ 0x30
 800930e:	e005      	b.n	800931c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009310:	6978      	ldr	r0, [r7, #20]
 8009312:	f001 fd4f 	bl	800adb4 <vPortFree>
 8009316:	e001      	b.n	800931c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009318:	2300      	movs	r3, #0
 800931a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d017      	beq.n	8009352 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800932a:	88fa      	ldrh	r2, [r7, #6]
 800932c:	2300      	movs	r3, #0
 800932e:	9303      	str	r3, [sp, #12]
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	9302      	str	r3, [sp, #8]
 8009334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009336:	9301      	str	r3, [sp, #4]
 8009338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	68b9      	ldr	r1, [r7, #8]
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f000 f80f 	bl	8009364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009346:	69f8      	ldr	r0, [r7, #28]
 8009348:	f000 f8b6 	bl	80094b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800934c:	2301      	movs	r3, #1
 800934e:	61bb      	str	r3, [r7, #24]
 8009350:	e002      	b.n	8009358 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009352:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009356:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009358:	69bb      	ldr	r3, [r7, #24]
	}
 800935a:	4618      	mov	r0, r3
 800935c:	3720      	adds	r7, #32
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
	...

08009364 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b088      	sub	sp, #32
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
 8009370:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009374:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	461a      	mov	r2, r3
 800937c:	21a5      	movs	r1, #165	@ 0xa5
 800937e:	f002 fc89 	bl	800bc94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009384:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009386:	6879      	ldr	r1, [r7, #4]
 8009388:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800938c:	440b      	add	r3, r1
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	4413      	add	r3, r2
 8009392:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	f023 0307 	bic.w	r3, r3, #7
 800939a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	f003 0307 	and.w	r3, r3, #7
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00d      	beq.n	80093c2 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80093a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093aa:	b672      	cpsid	i
 80093ac:	f383 8811 	msr	BASEPRI, r3
 80093b0:	f3bf 8f6f 	isb	sy
 80093b4:	f3bf 8f4f 	dsb	sy
 80093b8:	b662      	cpsie	i
 80093ba:	617b      	str	r3, [r7, #20]
}
 80093bc:	bf00      	nop
 80093be:	bf00      	nop
 80093c0:	e7fd      	b.n	80093be <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d01f      	beq.n	8009408 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093c8:	2300      	movs	r3, #0
 80093ca:	61fb      	str	r3, [r7, #28]
 80093cc:	e012      	b.n	80093f4 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80093ce:	68ba      	ldr	r2, [r7, #8]
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	4413      	add	r3, r2
 80093d4:	7819      	ldrb	r1, [r3, #0]
 80093d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	4413      	add	r3, r2
 80093dc:	3334      	adds	r3, #52	@ 0x34
 80093de:	460a      	mov	r2, r1
 80093e0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80093e2:	68ba      	ldr	r2, [r7, #8]
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	4413      	add	r3, r2
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d006      	beq.n	80093fc <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	3301      	adds	r3, #1
 80093f2:	61fb      	str	r3, [r7, #28]
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	2b0f      	cmp	r3, #15
 80093f8:	d9e9      	bls.n	80093ce <prvInitialiseNewTask+0x6a>
 80093fa:	e000      	b.n	80093fe <prvInitialiseNewTask+0x9a>
			{
				break;
 80093fc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80093fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009400:	2200      	movs	r2, #0
 8009402:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009406:	e003      	b.n	8009410 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940a:	2200      	movs	r2, #0
 800940c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009412:	2b37      	cmp	r3, #55	@ 0x37
 8009414:	d901      	bls.n	800941a <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009416:	2337      	movs	r3, #55	@ 0x37
 8009418:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800941a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800941c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800941e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009422:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009424:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009428:	2200      	movs	r2, #0
 800942a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800942c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800942e:	3304      	adds	r3, #4
 8009430:	4618      	mov	r0, r3
 8009432:	f7ff f93d 	bl	80086b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009438:	3318      	adds	r3, #24
 800943a:	4618      	mov	r0, r3
 800943c:	f7ff f938 	bl	80086b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009442:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009444:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009448:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800944c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800944e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009452:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009454:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009458:	2200      	movs	r2, #0
 800945a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800945e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009460:	2200      	movs	r2, #0
 8009462:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009468:	3354      	adds	r3, #84	@ 0x54
 800946a:	224c      	movs	r2, #76	@ 0x4c
 800946c:	2100      	movs	r1, #0
 800946e:	4618      	mov	r0, r3
 8009470:	f002 fc10 	bl	800bc94 <memset>
 8009474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009476:	4a0d      	ldr	r2, [pc, #52]	@ (80094ac <prvInitialiseNewTask+0x148>)
 8009478:	659a      	str	r2, [r3, #88]	@ 0x58
 800947a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800947c:	4a0c      	ldr	r2, [pc, #48]	@ (80094b0 <prvInitialiseNewTask+0x14c>)
 800947e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009482:	4a0c      	ldr	r2, [pc, #48]	@ (80094b4 <prvInitialiseNewTask+0x150>)
 8009484:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009486:	683a      	ldr	r2, [r7, #0]
 8009488:	68f9      	ldr	r1, [r7, #12]
 800948a:	69b8      	ldr	r0, [r7, #24]
 800948c:	f001 f984 	bl	800a798 <pxPortInitialiseStack>
 8009490:	4602      	mov	r2, r0
 8009492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009494:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009498:	2b00      	cmp	r3, #0
 800949a:	d002      	beq.n	80094a2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800949c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800949e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094a2:	bf00      	nop
 80094a4:	3720      	adds	r7, #32
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	200066b4 	.word	0x200066b4
 80094b0:	2000671c 	.word	0x2000671c
 80094b4:	20006784 	.word	0x20006784

080094b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80094c0:	f001 fa7c 	bl	800a9bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80094c4:	4b2d      	ldr	r3, [pc, #180]	@ (800957c <prvAddNewTaskToReadyList+0xc4>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	3301      	adds	r3, #1
 80094ca:	4a2c      	ldr	r2, [pc, #176]	@ (800957c <prvAddNewTaskToReadyList+0xc4>)
 80094cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80094ce:	4b2c      	ldr	r3, [pc, #176]	@ (8009580 <prvAddNewTaskToReadyList+0xc8>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d109      	bne.n	80094ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80094d6:	4a2a      	ldr	r2, [pc, #168]	@ (8009580 <prvAddNewTaskToReadyList+0xc8>)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80094dc:	4b27      	ldr	r3, [pc, #156]	@ (800957c <prvAddNewTaskToReadyList+0xc4>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d110      	bne.n	8009506 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80094e4:	f000 fc44 	bl	8009d70 <prvInitialiseTaskLists>
 80094e8:	e00d      	b.n	8009506 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80094ea:	4b26      	ldr	r3, [pc, #152]	@ (8009584 <prvAddNewTaskToReadyList+0xcc>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d109      	bne.n	8009506 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80094f2:	4b23      	ldr	r3, [pc, #140]	@ (8009580 <prvAddNewTaskToReadyList+0xc8>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d802      	bhi.n	8009506 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009500:	4a1f      	ldr	r2, [pc, #124]	@ (8009580 <prvAddNewTaskToReadyList+0xc8>)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009506:	4b20      	ldr	r3, [pc, #128]	@ (8009588 <prvAddNewTaskToReadyList+0xd0>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	3301      	adds	r3, #1
 800950c:	4a1e      	ldr	r2, [pc, #120]	@ (8009588 <prvAddNewTaskToReadyList+0xd0>)
 800950e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009510:	4b1d      	ldr	r3, [pc, #116]	@ (8009588 <prvAddNewTaskToReadyList+0xd0>)
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800951c:	4b1b      	ldr	r3, [pc, #108]	@ (800958c <prvAddNewTaskToReadyList+0xd4>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	429a      	cmp	r2, r3
 8009522:	d903      	bls.n	800952c <prvAddNewTaskToReadyList+0x74>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009528:	4a18      	ldr	r2, [pc, #96]	@ (800958c <prvAddNewTaskToReadyList+0xd4>)
 800952a:	6013      	str	r3, [r2, #0]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009530:	4613      	mov	r3, r2
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	4413      	add	r3, r2
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	4a15      	ldr	r2, [pc, #84]	@ (8009590 <prvAddNewTaskToReadyList+0xd8>)
 800953a:	441a      	add	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	3304      	adds	r3, #4
 8009540:	4619      	mov	r1, r3
 8009542:	4610      	mov	r0, r2
 8009544:	f7ff f8c1 	bl	80086ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009548:	f001 fa6e 	bl	800aa28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800954c:	4b0d      	ldr	r3, [pc, #52]	@ (8009584 <prvAddNewTaskToReadyList+0xcc>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00e      	beq.n	8009572 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009554:	4b0a      	ldr	r3, [pc, #40]	@ (8009580 <prvAddNewTaskToReadyList+0xc8>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800955e:	429a      	cmp	r2, r3
 8009560:	d207      	bcs.n	8009572 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009562:	4b0c      	ldr	r3, [pc, #48]	@ (8009594 <prvAddNewTaskToReadyList+0xdc>)
 8009564:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009568:	601a      	str	r2, [r3, #0]
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009572:	bf00      	nop
 8009574:	3708      	adds	r7, #8
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	20000f50 	.word	0x20000f50
 8009580:	20000a7c 	.word	0x20000a7c
 8009584:	20000f5c 	.word	0x20000f5c
 8009588:	20000f6c 	.word	0x20000f6c
 800958c:	20000f58 	.word	0x20000f58
 8009590:	20000a80 	.word	0x20000a80
 8009594:	e000ed04 	.word	0xe000ed04

08009598 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80095a0:	2300      	movs	r3, #0
 80095a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d01a      	beq.n	80095e0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80095aa:	4b15      	ldr	r3, [pc, #84]	@ (8009600 <vTaskDelay+0x68>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00d      	beq.n	80095ce <vTaskDelay+0x36>
	__asm volatile
 80095b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b6:	b672      	cpsid	i
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	b662      	cpsie	i
 80095c6:	60bb      	str	r3, [r7, #8]
}
 80095c8:	bf00      	nop
 80095ca:	bf00      	nop
 80095cc:	e7fd      	b.n	80095ca <vTaskDelay+0x32>
			vTaskSuspendAll();
 80095ce:	f000 f88f 	bl	80096f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80095d2:	2100      	movs	r1, #0
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fd23 	bl	800a020 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80095da:	f000 f897 	bl	800970c <xTaskResumeAll>
 80095de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d107      	bne.n	80095f6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80095e6:	4b07      	ldr	r3, [pc, #28]	@ (8009604 <vTaskDelay+0x6c>)
 80095e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	f3bf 8f4f 	dsb	sy
 80095f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095f6:	bf00      	nop
 80095f8:	3710      	adds	r7, #16
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	20000f78 	.word	0x20000f78
 8009604:	e000ed04 	.word	0xe000ed04

08009608 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b08a      	sub	sp, #40	@ 0x28
 800960c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800960e:	2300      	movs	r3, #0
 8009610:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009612:	2300      	movs	r3, #0
 8009614:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009616:	463a      	mov	r2, r7
 8009618:	1d39      	adds	r1, r7, #4
 800961a:	f107 0308 	add.w	r3, r7, #8
 800961e:	4618      	mov	r0, r3
 8009620:	f7fe fff2 	bl	8008608 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009624:	6839      	ldr	r1, [r7, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68ba      	ldr	r2, [r7, #8]
 800962a:	9202      	str	r2, [sp, #8]
 800962c:	9301      	str	r3, [sp, #4]
 800962e:	2300      	movs	r3, #0
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	2300      	movs	r3, #0
 8009634:	460a      	mov	r2, r1
 8009636:	4926      	ldr	r1, [pc, #152]	@ (80096d0 <vTaskStartScheduler+0xc8>)
 8009638:	4826      	ldr	r0, [pc, #152]	@ (80096d4 <vTaskStartScheduler+0xcc>)
 800963a:	f7ff fde7 	bl	800920c <xTaskCreateStatic>
 800963e:	4603      	mov	r3, r0
 8009640:	4a25      	ldr	r2, [pc, #148]	@ (80096d8 <vTaskStartScheduler+0xd0>)
 8009642:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009644:	4b24      	ldr	r3, [pc, #144]	@ (80096d8 <vTaskStartScheduler+0xd0>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d002      	beq.n	8009652 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800964c:	2301      	movs	r3, #1
 800964e:	617b      	str	r3, [r7, #20]
 8009650:	e001      	b.n	8009656 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009652:	2300      	movs	r3, #0
 8009654:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d102      	bne.n	8009662 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800965c:	f000 fd34 	bl	800a0c8 <xTimerCreateTimerTask>
 8009660:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	2b01      	cmp	r3, #1
 8009666:	d11d      	bne.n	80096a4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8009668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800966c:	b672      	cpsid	i
 800966e:	f383 8811 	msr	BASEPRI, r3
 8009672:	f3bf 8f6f 	isb	sy
 8009676:	f3bf 8f4f 	dsb	sy
 800967a:	b662      	cpsie	i
 800967c:	613b      	str	r3, [r7, #16]
}
 800967e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009680:	4b16      	ldr	r3, [pc, #88]	@ (80096dc <vTaskStartScheduler+0xd4>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	3354      	adds	r3, #84	@ 0x54
 8009686:	4a16      	ldr	r2, [pc, #88]	@ (80096e0 <vTaskStartScheduler+0xd8>)
 8009688:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800968a:	4b16      	ldr	r3, [pc, #88]	@ (80096e4 <vTaskStartScheduler+0xdc>)
 800968c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009690:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009692:	4b15      	ldr	r3, [pc, #84]	@ (80096e8 <vTaskStartScheduler+0xe0>)
 8009694:	2201      	movs	r2, #1
 8009696:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009698:	4b14      	ldr	r3, [pc, #80]	@ (80096ec <vTaskStartScheduler+0xe4>)
 800969a:	2200      	movs	r2, #0
 800969c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800969e:	f001 f90f 	bl	800a8c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80096a2:	e011      	b.n	80096c8 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096aa:	d10d      	bne.n	80096c8 <vTaskStartScheduler+0xc0>
	__asm volatile
 80096ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b0:	b672      	cpsid	i
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	b662      	cpsie	i
 80096c0:	60fb      	str	r3, [r7, #12]
}
 80096c2:	bf00      	nop
 80096c4:	bf00      	nop
 80096c6:	e7fd      	b.n	80096c4 <vTaskStartScheduler+0xbc>
}
 80096c8:	bf00      	nop
 80096ca:	3718      	adds	r7, #24
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	0800bed4 	.word	0x0800bed4
 80096d4:	08009d41 	.word	0x08009d41
 80096d8:	20000f74 	.word	0x20000f74
 80096dc:	20000a7c 	.word	0x20000a7c
 80096e0:	20000110 	.word	0x20000110
 80096e4:	20000f70 	.word	0x20000f70
 80096e8:	20000f5c 	.word	0x20000f5c
 80096ec:	20000f54 	.word	0x20000f54

080096f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80096f0:	b480      	push	{r7}
 80096f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80096f4:	4b04      	ldr	r3, [pc, #16]	@ (8009708 <vTaskSuspendAll+0x18>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	3301      	adds	r3, #1
 80096fa:	4a03      	ldr	r2, [pc, #12]	@ (8009708 <vTaskSuspendAll+0x18>)
 80096fc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80096fe:	bf00      	nop
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr
 8009708:	20000f78 	.word	0x20000f78

0800970c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009712:	2300      	movs	r3, #0
 8009714:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009716:	2300      	movs	r3, #0
 8009718:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800971a:	4b43      	ldr	r3, [pc, #268]	@ (8009828 <xTaskResumeAll+0x11c>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10d      	bne.n	800973e <xTaskResumeAll+0x32>
	__asm volatile
 8009722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009726:	b672      	cpsid	i
 8009728:	f383 8811 	msr	BASEPRI, r3
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	b662      	cpsie	i
 8009736:	603b      	str	r3, [r7, #0]
}
 8009738:	bf00      	nop
 800973a:	bf00      	nop
 800973c:	e7fd      	b.n	800973a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800973e:	f001 f93d 	bl	800a9bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009742:	4b39      	ldr	r3, [pc, #228]	@ (8009828 <xTaskResumeAll+0x11c>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	3b01      	subs	r3, #1
 8009748:	4a37      	ldr	r2, [pc, #220]	@ (8009828 <xTaskResumeAll+0x11c>)
 800974a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800974c:	4b36      	ldr	r3, [pc, #216]	@ (8009828 <xTaskResumeAll+0x11c>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d162      	bne.n	800981a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009754:	4b35      	ldr	r3, [pc, #212]	@ (800982c <xTaskResumeAll+0x120>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d05e      	beq.n	800981a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800975c:	e02f      	b.n	80097be <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800975e:	4b34      	ldr	r3, [pc, #208]	@ (8009830 <xTaskResumeAll+0x124>)
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	3318      	adds	r3, #24
 800976a:	4618      	mov	r0, r3
 800976c:	f7ff f80a 	bl	8008784 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	3304      	adds	r3, #4
 8009774:	4618      	mov	r0, r3
 8009776:	f7ff f805 	bl	8008784 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800977e:	4b2d      	ldr	r3, [pc, #180]	@ (8009834 <xTaskResumeAll+0x128>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	429a      	cmp	r2, r3
 8009784:	d903      	bls.n	800978e <xTaskResumeAll+0x82>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800978a:	4a2a      	ldr	r2, [pc, #168]	@ (8009834 <xTaskResumeAll+0x128>)
 800978c:	6013      	str	r3, [r2, #0]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009792:	4613      	mov	r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	4413      	add	r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	4a27      	ldr	r2, [pc, #156]	@ (8009838 <xTaskResumeAll+0x12c>)
 800979c:	441a      	add	r2, r3
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	3304      	adds	r3, #4
 80097a2:	4619      	mov	r1, r3
 80097a4:	4610      	mov	r0, r2
 80097a6:	f7fe ff90 	bl	80086ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097ae:	4b23      	ldr	r3, [pc, #140]	@ (800983c <xTaskResumeAll+0x130>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d302      	bcc.n	80097be <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80097b8:	4b21      	ldr	r3, [pc, #132]	@ (8009840 <xTaskResumeAll+0x134>)
 80097ba:	2201      	movs	r2, #1
 80097bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097be:	4b1c      	ldr	r3, [pc, #112]	@ (8009830 <xTaskResumeAll+0x124>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1cb      	bne.n	800975e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d001      	beq.n	80097d0 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80097cc:	f000 fb76 	bl	8009ebc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80097d0:	4b1c      	ldr	r3, [pc, #112]	@ (8009844 <xTaskResumeAll+0x138>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d010      	beq.n	80097fe <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80097dc:	f000 f846 	bl	800986c <xTaskIncrementTick>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d002      	beq.n	80097ec <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80097e6:	4b16      	ldr	r3, [pc, #88]	@ (8009840 <xTaskResumeAll+0x134>)
 80097e8:	2201      	movs	r2, #1
 80097ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	3b01      	subs	r3, #1
 80097f0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d1f1      	bne.n	80097dc <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80097f8:	4b12      	ldr	r3, [pc, #72]	@ (8009844 <xTaskResumeAll+0x138>)
 80097fa:	2200      	movs	r2, #0
 80097fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80097fe:	4b10      	ldr	r3, [pc, #64]	@ (8009840 <xTaskResumeAll+0x134>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d009      	beq.n	800981a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009806:	2301      	movs	r3, #1
 8009808:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800980a:	4b0f      	ldr	r3, [pc, #60]	@ (8009848 <xTaskResumeAll+0x13c>)
 800980c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009810:	601a      	str	r2, [r3, #0]
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800981a:	f001 f905 	bl	800aa28 <vPortExitCritical>

	return xAlreadyYielded;
 800981e:	68bb      	ldr	r3, [r7, #8]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3710      	adds	r7, #16
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	20000f78 	.word	0x20000f78
 800982c:	20000f50 	.word	0x20000f50
 8009830:	20000f10 	.word	0x20000f10
 8009834:	20000f58 	.word	0x20000f58
 8009838:	20000a80 	.word	0x20000a80
 800983c:	20000a7c 	.word	0x20000a7c
 8009840:	20000f64 	.word	0x20000f64
 8009844:	20000f60 	.word	0x20000f60
 8009848:	e000ed04 	.word	0xe000ed04

0800984c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009852:	4b05      	ldr	r3, [pc, #20]	@ (8009868 <xTaskGetTickCount+0x1c>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009858:	687b      	ldr	r3, [r7, #4]
}
 800985a:	4618      	mov	r0, r3
 800985c:	370c      	adds	r7, #12
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	20000f54 	.word	0x20000f54

0800986c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009872:	2300      	movs	r3, #0
 8009874:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009876:	4b50      	ldr	r3, [pc, #320]	@ (80099b8 <xTaskIncrementTick+0x14c>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2b00      	cmp	r3, #0
 800987c:	f040 808c 	bne.w	8009998 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009880:	4b4e      	ldr	r3, [pc, #312]	@ (80099bc <xTaskIncrementTick+0x150>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	3301      	adds	r3, #1
 8009886:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009888:	4a4c      	ldr	r2, [pc, #304]	@ (80099bc <xTaskIncrementTick+0x150>)
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d123      	bne.n	80098dc <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8009894:	4b4a      	ldr	r3, [pc, #296]	@ (80099c0 <xTaskIncrementTick+0x154>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00d      	beq.n	80098ba <xTaskIncrementTick+0x4e>
	__asm volatile
 800989e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a2:	b672      	cpsid	i
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	b662      	cpsie	i
 80098b2:	603b      	str	r3, [r7, #0]
}
 80098b4:	bf00      	nop
 80098b6:	bf00      	nop
 80098b8:	e7fd      	b.n	80098b6 <xTaskIncrementTick+0x4a>
 80098ba:	4b41      	ldr	r3, [pc, #260]	@ (80099c0 <xTaskIncrementTick+0x154>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	60fb      	str	r3, [r7, #12]
 80098c0:	4b40      	ldr	r3, [pc, #256]	@ (80099c4 <xTaskIncrementTick+0x158>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a3e      	ldr	r2, [pc, #248]	@ (80099c0 <xTaskIncrementTick+0x154>)
 80098c6:	6013      	str	r3, [r2, #0]
 80098c8:	4a3e      	ldr	r2, [pc, #248]	@ (80099c4 <xTaskIncrementTick+0x158>)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6013      	str	r3, [r2, #0]
 80098ce:	4b3e      	ldr	r3, [pc, #248]	@ (80099c8 <xTaskIncrementTick+0x15c>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3301      	adds	r3, #1
 80098d4:	4a3c      	ldr	r2, [pc, #240]	@ (80099c8 <xTaskIncrementTick+0x15c>)
 80098d6:	6013      	str	r3, [r2, #0]
 80098d8:	f000 faf0 	bl	8009ebc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80098dc:	4b3b      	ldr	r3, [pc, #236]	@ (80099cc <xTaskIncrementTick+0x160>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	693a      	ldr	r2, [r7, #16]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d349      	bcc.n	800997a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098e6:	4b36      	ldr	r3, [pc, #216]	@ (80099c0 <xTaskIncrementTick+0x154>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d104      	bne.n	80098fa <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098f0:	4b36      	ldr	r3, [pc, #216]	@ (80099cc <xTaskIncrementTick+0x160>)
 80098f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80098f6:	601a      	str	r2, [r3, #0]
					break;
 80098f8:	e03f      	b.n	800997a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098fa:	4b31      	ldr	r3, [pc, #196]	@ (80099c0 <xTaskIncrementTick+0x154>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800990a:	693a      	ldr	r2, [r7, #16]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	429a      	cmp	r2, r3
 8009910:	d203      	bcs.n	800991a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009912:	4a2e      	ldr	r2, [pc, #184]	@ (80099cc <xTaskIncrementTick+0x160>)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009918:	e02f      	b.n	800997a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	3304      	adds	r3, #4
 800991e:	4618      	mov	r0, r3
 8009920:	f7fe ff30 	bl	8008784 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009928:	2b00      	cmp	r3, #0
 800992a:	d004      	beq.n	8009936 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	3318      	adds	r3, #24
 8009930:	4618      	mov	r0, r3
 8009932:	f7fe ff27 	bl	8008784 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800993a:	4b25      	ldr	r3, [pc, #148]	@ (80099d0 <xTaskIncrementTick+0x164>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	429a      	cmp	r2, r3
 8009940:	d903      	bls.n	800994a <xTaskIncrementTick+0xde>
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009946:	4a22      	ldr	r2, [pc, #136]	@ (80099d0 <xTaskIncrementTick+0x164>)
 8009948:	6013      	str	r3, [r2, #0]
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800994e:	4613      	mov	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	4413      	add	r3, r2
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	4a1f      	ldr	r2, [pc, #124]	@ (80099d4 <xTaskIncrementTick+0x168>)
 8009958:	441a      	add	r2, r3
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	3304      	adds	r3, #4
 800995e:	4619      	mov	r1, r3
 8009960:	4610      	mov	r0, r2
 8009962:	f7fe feb2 	bl	80086ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800996a:	4b1b      	ldr	r3, [pc, #108]	@ (80099d8 <xTaskIncrementTick+0x16c>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009970:	429a      	cmp	r2, r3
 8009972:	d3b8      	bcc.n	80098e6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8009974:	2301      	movs	r3, #1
 8009976:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009978:	e7b5      	b.n	80098e6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800997a:	4b17      	ldr	r3, [pc, #92]	@ (80099d8 <xTaskIncrementTick+0x16c>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009980:	4914      	ldr	r1, [pc, #80]	@ (80099d4 <xTaskIncrementTick+0x168>)
 8009982:	4613      	mov	r3, r2
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	4413      	add	r3, r2
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	440b      	add	r3, r1
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2b01      	cmp	r3, #1
 8009990:	d907      	bls.n	80099a2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8009992:	2301      	movs	r3, #1
 8009994:	617b      	str	r3, [r7, #20]
 8009996:	e004      	b.n	80099a2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009998:	4b10      	ldr	r3, [pc, #64]	@ (80099dc <xTaskIncrementTick+0x170>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	3301      	adds	r3, #1
 800999e:	4a0f      	ldr	r2, [pc, #60]	@ (80099dc <xTaskIncrementTick+0x170>)
 80099a0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80099a2:	4b0f      	ldr	r3, [pc, #60]	@ (80099e0 <xTaskIncrementTick+0x174>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80099aa:	2301      	movs	r3, #1
 80099ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80099ae:	697b      	ldr	r3, [r7, #20]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3718      	adds	r7, #24
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	20000f78 	.word	0x20000f78
 80099bc:	20000f54 	.word	0x20000f54
 80099c0:	20000f08 	.word	0x20000f08
 80099c4:	20000f0c 	.word	0x20000f0c
 80099c8:	20000f68 	.word	0x20000f68
 80099cc:	20000f70 	.word	0x20000f70
 80099d0:	20000f58 	.word	0x20000f58
 80099d4:	20000a80 	.word	0x20000a80
 80099d8:	20000a7c 	.word	0x20000a7c
 80099dc:	20000f60 	.word	0x20000f60
 80099e0:	20000f64 	.word	0x20000f64

080099e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80099ea:	4b2c      	ldr	r3, [pc, #176]	@ (8009a9c <vTaskSwitchContext+0xb8>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d003      	beq.n	80099fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80099f2:	4b2b      	ldr	r3, [pc, #172]	@ (8009aa0 <vTaskSwitchContext+0xbc>)
 80099f4:	2201      	movs	r2, #1
 80099f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80099f8:	e049      	b.n	8009a8e <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 80099fa:	4b29      	ldr	r3, [pc, #164]	@ (8009aa0 <vTaskSwitchContext+0xbc>)
 80099fc:	2200      	movs	r2, #0
 80099fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a00:	4b28      	ldr	r3, [pc, #160]	@ (8009aa4 <vTaskSwitchContext+0xc0>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	60fb      	str	r3, [r7, #12]
 8009a06:	e013      	b.n	8009a30 <vTaskSwitchContext+0x4c>
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10d      	bne.n	8009a2a <vTaskSwitchContext+0x46>
	__asm volatile
 8009a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a12:	b672      	cpsid	i
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	b662      	cpsie	i
 8009a22:	607b      	str	r3, [r7, #4]
}
 8009a24:	bf00      	nop
 8009a26:	bf00      	nop
 8009a28:	e7fd      	b.n	8009a26 <vTaskSwitchContext+0x42>
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	60fb      	str	r3, [r7, #12]
 8009a30:	491d      	ldr	r1, [pc, #116]	@ (8009aa8 <vTaskSwitchContext+0xc4>)
 8009a32:	68fa      	ldr	r2, [r7, #12]
 8009a34:	4613      	mov	r3, r2
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	4413      	add	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	440b      	add	r3, r1
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d0e1      	beq.n	8009a08 <vTaskSwitchContext+0x24>
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	4613      	mov	r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	4413      	add	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	4a16      	ldr	r2, [pc, #88]	@ (8009aa8 <vTaskSwitchContext+0xc4>)
 8009a50:	4413      	add	r3, r2
 8009a52:	60bb      	str	r3, [r7, #8]
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	685a      	ldr	r2, [r3, #4]
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	605a      	str	r2, [r3, #4]
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	685a      	ldr	r2, [r3, #4]
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	3308      	adds	r3, #8
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d104      	bne.n	8009a74 <vTaskSwitchContext+0x90>
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	685a      	ldr	r2, [r3, #4]
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	605a      	str	r2, [r3, #4]
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	68db      	ldr	r3, [r3, #12]
 8009a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8009aac <vTaskSwitchContext+0xc8>)
 8009a7c:	6013      	str	r3, [r2, #0]
 8009a7e:	4a09      	ldr	r2, [pc, #36]	@ (8009aa4 <vTaskSwitchContext+0xc0>)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009a84:	4b09      	ldr	r3, [pc, #36]	@ (8009aac <vTaskSwitchContext+0xc8>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	3354      	adds	r3, #84	@ 0x54
 8009a8a:	4a09      	ldr	r2, [pc, #36]	@ (8009ab0 <vTaskSwitchContext+0xcc>)
 8009a8c:	6013      	str	r3, [r2, #0]
}
 8009a8e:	bf00      	nop
 8009a90:	3714      	adds	r7, #20
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	20000f78 	.word	0x20000f78
 8009aa0:	20000f64 	.word	0x20000f64
 8009aa4:	20000f58 	.word	0x20000f58
 8009aa8:	20000a80 	.word	0x20000a80
 8009aac:	20000a7c 	.word	0x20000a7c
 8009ab0:	20000110 	.word	0x20000110

08009ab4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10d      	bne.n	8009ae0 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac8:	b672      	cpsid	i
 8009aca:	f383 8811 	msr	BASEPRI, r3
 8009ace:	f3bf 8f6f 	isb	sy
 8009ad2:	f3bf 8f4f 	dsb	sy
 8009ad6:	b662      	cpsie	i
 8009ad8:	60fb      	str	r3, [r7, #12]
}
 8009ada:	bf00      	nop
 8009adc:	bf00      	nop
 8009ade:	e7fd      	b.n	8009adc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ae0:	4b07      	ldr	r3, [pc, #28]	@ (8009b00 <vTaskPlaceOnEventList+0x4c>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	3318      	adds	r3, #24
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f7fe fe12 	bl	8008712 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009aee:	2101      	movs	r1, #1
 8009af0:	6838      	ldr	r0, [r7, #0]
 8009af2:	f000 fa95 	bl	800a020 <prvAddCurrentTaskToDelayedList>
}
 8009af6:	bf00      	nop
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	20000a7c 	.word	0x20000a7c

08009b04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d10d      	bne.n	8009b32 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8009b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b1a:	b672      	cpsid	i
 8009b1c:	f383 8811 	msr	BASEPRI, r3
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	f3bf 8f4f 	dsb	sy
 8009b28:	b662      	cpsie	i
 8009b2a:	617b      	str	r3, [r7, #20]
}
 8009b2c:	bf00      	nop
 8009b2e:	bf00      	nop
 8009b30:	e7fd      	b.n	8009b2e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b32:	4b0a      	ldr	r3, [pc, #40]	@ (8009b5c <vTaskPlaceOnEventListRestricted+0x58>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	3318      	adds	r3, #24
 8009b38:	4619      	mov	r1, r3
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f7fe fdc5 	bl	80086ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d002      	beq.n	8009b4c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8009b46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009b4a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b4c:	6879      	ldr	r1, [r7, #4]
 8009b4e:	68b8      	ldr	r0, [r7, #8]
 8009b50:	f000 fa66 	bl	800a020 <prvAddCurrentTaskToDelayedList>
	}
 8009b54:	bf00      	nop
 8009b56:	3718      	adds	r7, #24
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	20000a7c 	.word	0x20000a7c

08009b60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b086      	sub	sp, #24
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	68db      	ldr	r3, [r3, #12]
 8009b6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d10d      	bne.n	8009b92 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8009b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b7a:	b672      	cpsid	i
 8009b7c:	f383 8811 	msr	BASEPRI, r3
 8009b80:	f3bf 8f6f 	isb	sy
 8009b84:	f3bf 8f4f 	dsb	sy
 8009b88:	b662      	cpsie	i
 8009b8a:	60fb      	str	r3, [r7, #12]
}
 8009b8c:	bf00      	nop
 8009b8e:	bf00      	nop
 8009b90:	e7fd      	b.n	8009b8e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	3318      	adds	r3, #24
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7fe fdf4 	bl	8008784 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8009c14 <xTaskRemoveFromEventList+0xb4>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d11d      	bne.n	8009be0 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	3304      	adds	r3, #4
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7fe fdeb 	bl	8008784 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bb2:	4b19      	ldr	r3, [pc, #100]	@ (8009c18 <xTaskRemoveFromEventList+0xb8>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d903      	bls.n	8009bc2 <xTaskRemoveFromEventList+0x62>
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bbe:	4a16      	ldr	r2, [pc, #88]	@ (8009c18 <xTaskRemoveFromEventList+0xb8>)
 8009bc0:	6013      	str	r3, [r2, #0]
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	4413      	add	r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	4a13      	ldr	r2, [pc, #76]	@ (8009c1c <xTaskRemoveFromEventList+0xbc>)
 8009bd0:	441a      	add	r2, r3
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	3304      	adds	r3, #4
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	4610      	mov	r0, r2
 8009bda:	f7fe fd76 	bl	80086ca <vListInsertEnd>
 8009bde:	e005      	b.n	8009bec <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	3318      	adds	r3, #24
 8009be4:	4619      	mov	r1, r3
 8009be6:	480e      	ldr	r0, [pc, #56]	@ (8009c20 <xTaskRemoveFromEventList+0xc0>)
 8009be8:	f7fe fd6f 	bl	80086ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8009c24 <xTaskRemoveFromEventList+0xc4>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d905      	bls.n	8009c06 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8009c28 <xTaskRemoveFromEventList+0xc8>)
 8009c00:	2201      	movs	r2, #1
 8009c02:	601a      	str	r2, [r3, #0]
 8009c04:	e001      	b.n	8009c0a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8009c06:	2300      	movs	r3, #0
 8009c08:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009c0a:	697b      	ldr	r3, [r7, #20]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3718      	adds	r7, #24
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	20000f78 	.word	0x20000f78
 8009c18:	20000f58 	.word	0x20000f58
 8009c1c:	20000a80 	.word	0x20000a80
 8009c20:	20000f10 	.word	0x20000f10
 8009c24:	20000a7c 	.word	0x20000a7c
 8009c28:	20000f64 	.word	0x20000f64

08009c2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c34:	4b06      	ldr	r3, [pc, #24]	@ (8009c50 <vTaskInternalSetTimeOutState+0x24>)
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c3c:	4b05      	ldr	r3, [pc, #20]	@ (8009c54 <vTaskInternalSetTimeOutState+0x28>)
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	605a      	str	r2, [r3, #4]
}
 8009c44:	bf00      	nop
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	20000f68 	.word	0x20000f68
 8009c54:	20000f54 	.word	0x20000f54

08009c58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b088      	sub	sp, #32
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d10d      	bne.n	8009c84 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8009c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c6c:	b672      	cpsid	i
 8009c6e:	f383 8811 	msr	BASEPRI, r3
 8009c72:	f3bf 8f6f 	isb	sy
 8009c76:	f3bf 8f4f 	dsb	sy
 8009c7a:	b662      	cpsie	i
 8009c7c:	613b      	str	r3, [r7, #16]
}
 8009c7e:	bf00      	nop
 8009c80:	bf00      	nop
 8009c82:	e7fd      	b.n	8009c80 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d10d      	bne.n	8009ca6 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8009c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c8e:	b672      	cpsid	i
 8009c90:	f383 8811 	msr	BASEPRI, r3
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	b662      	cpsie	i
 8009c9e:	60fb      	str	r3, [r7, #12]
}
 8009ca0:	bf00      	nop
 8009ca2:	bf00      	nop
 8009ca4:	e7fd      	b.n	8009ca2 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8009ca6:	f000 fe89 	bl	800a9bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009caa:	4b1d      	ldr	r3, [pc, #116]	@ (8009d20 <xTaskCheckForTimeOut+0xc8>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	69ba      	ldr	r2, [r7, #24]
 8009cb6:	1ad3      	subs	r3, r2, r3
 8009cb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009cc2:	d102      	bne.n	8009cca <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	61fb      	str	r3, [r7, #28]
 8009cc8:	e023      	b.n	8009d12 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	4b15      	ldr	r3, [pc, #84]	@ (8009d24 <xTaskCheckForTimeOut+0xcc>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d007      	beq.n	8009ce6 <xTaskCheckForTimeOut+0x8e>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	69ba      	ldr	r2, [r7, #24]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d302      	bcc.n	8009ce6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	61fb      	str	r3, [r7, #28]
 8009ce4:	e015      	b.n	8009d12 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	697a      	ldr	r2, [r7, #20]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d20b      	bcs.n	8009d08 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	1ad2      	subs	r2, r2, r3
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f7ff ff95 	bl	8009c2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d02:	2300      	movs	r3, #0
 8009d04:	61fb      	str	r3, [r7, #28]
 8009d06:	e004      	b.n	8009d12 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d12:	f000 fe89 	bl	800aa28 <vPortExitCritical>

	return xReturn;
 8009d16:	69fb      	ldr	r3, [r7, #28]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3720      	adds	r7, #32
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}
 8009d20:	20000f54 	.word	0x20000f54
 8009d24:	20000f68 	.word	0x20000f68

08009d28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d28:	b480      	push	{r7}
 8009d2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d2c:	4b03      	ldr	r3, [pc, #12]	@ (8009d3c <vTaskMissedYield+0x14>)
 8009d2e:	2201      	movs	r2, #1
 8009d30:	601a      	str	r2, [r3, #0]
}
 8009d32:	bf00      	nop
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr
 8009d3c:	20000f64 	.word	0x20000f64

08009d40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d48:	f000 f852 	bl	8009df0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d4c:	4b06      	ldr	r3, [pc, #24]	@ (8009d68 <prvIdleTask+0x28>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d9f9      	bls.n	8009d48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009d54:	4b05      	ldr	r3, [pc, #20]	@ (8009d6c <prvIdleTask+0x2c>)
 8009d56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d5a:	601a      	str	r2, [r3, #0]
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009d64:	e7f0      	b.n	8009d48 <prvIdleTask+0x8>
 8009d66:	bf00      	nop
 8009d68:	20000a80 	.word	0x20000a80
 8009d6c:	e000ed04 	.word	0xe000ed04

08009d70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d76:	2300      	movs	r3, #0
 8009d78:	607b      	str	r3, [r7, #4]
 8009d7a:	e00c      	b.n	8009d96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	4413      	add	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	4a12      	ldr	r2, [pc, #72]	@ (8009dd0 <prvInitialiseTaskLists+0x60>)
 8009d88:	4413      	add	r3, r2
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7fe fc70 	bl	8008670 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	3301      	adds	r3, #1
 8009d94:	607b      	str	r3, [r7, #4]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2b37      	cmp	r3, #55	@ 0x37
 8009d9a:	d9ef      	bls.n	8009d7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009d9c:	480d      	ldr	r0, [pc, #52]	@ (8009dd4 <prvInitialiseTaskLists+0x64>)
 8009d9e:	f7fe fc67 	bl	8008670 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009da2:	480d      	ldr	r0, [pc, #52]	@ (8009dd8 <prvInitialiseTaskLists+0x68>)
 8009da4:	f7fe fc64 	bl	8008670 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009da8:	480c      	ldr	r0, [pc, #48]	@ (8009ddc <prvInitialiseTaskLists+0x6c>)
 8009daa:	f7fe fc61 	bl	8008670 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009dae:	480c      	ldr	r0, [pc, #48]	@ (8009de0 <prvInitialiseTaskLists+0x70>)
 8009db0:	f7fe fc5e 	bl	8008670 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009db4:	480b      	ldr	r0, [pc, #44]	@ (8009de4 <prvInitialiseTaskLists+0x74>)
 8009db6:	f7fe fc5b 	bl	8008670 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009dba:	4b0b      	ldr	r3, [pc, #44]	@ (8009de8 <prvInitialiseTaskLists+0x78>)
 8009dbc:	4a05      	ldr	r2, [pc, #20]	@ (8009dd4 <prvInitialiseTaskLists+0x64>)
 8009dbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8009dec <prvInitialiseTaskLists+0x7c>)
 8009dc2:	4a05      	ldr	r2, [pc, #20]	@ (8009dd8 <prvInitialiseTaskLists+0x68>)
 8009dc4:	601a      	str	r2, [r3, #0]
}
 8009dc6:	bf00      	nop
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	20000a80 	.word	0x20000a80
 8009dd4:	20000ee0 	.word	0x20000ee0
 8009dd8:	20000ef4 	.word	0x20000ef4
 8009ddc:	20000f10 	.word	0x20000f10
 8009de0:	20000f24 	.word	0x20000f24
 8009de4:	20000f3c 	.word	0x20000f3c
 8009de8:	20000f08 	.word	0x20000f08
 8009dec:	20000f0c 	.word	0x20000f0c

08009df0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009df6:	e019      	b.n	8009e2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009df8:	f000 fde0 	bl	800a9bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dfc:	4b10      	ldr	r3, [pc, #64]	@ (8009e40 <prvCheckTasksWaitingTermination+0x50>)
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	3304      	adds	r3, #4
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7fe fcbb 	bl	8008784 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8009e44 <prvCheckTasksWaitingTermination+0x54>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	3b01      	subs	r3, #1
 8009e14:	4a0b      	ldr	r2, [pc, #44]	@ (8009e44 <prvCheckTasksWaitingTermination+0x54>)
 8009e16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e18:	4b0b      	ldr	r3, [pc, #44]	@ (8009e48 <prvCheckTasksWaitingTermination+0x58>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	3b01      	subs	r3, #1
 8009e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8009e48 <prvCheckTasksWaitingTermination+0x58>)
 8009e20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e22:	f000 fe01 	bl	800aa28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 f810 	bl	8009e4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e2c:	4b06      	ldr	r3, [pc, #24]	@ (8009e48 <prvCheckTasksWaitingTermination+0x58>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d1e1      	bne.n	8009df8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e34:	bf00      	nop
 8009e36:	bf00      	nop
 8009e38:	3708      	adds	r7, #8
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	20000f24 	.word	0x20000f24
 8009e44:	20000f50 	.word	0x20000f50
 8009e48:	20000f38 	.word	0x20000f38

08009e4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	3354      	adds	r3, #84	@ 0x54
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f001 ff23 	bl	800bca4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d108      	bne.n	8009e7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f000 ffa1 	bl	800adb4 <vPortFree>
				vPortFree( pxTCB );
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 ff9e 	bl	800adb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009e78:	e01b      	b.n	8009eb2 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d103      	bne.n	8009e8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 ff95 	bl	800adb4 <vPortFree>
	}
 8009e8a:	e012      	b.n	8009eb2 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d00d      	beq.n	8009eb2 <prvDeleteTCB+0x66>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9a:	b672      	cpsid	i
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	b662      	cpsie	i
 8009eaa:	60fb      	str	r3, [r7, #12]
}
 8009eac:	bf00      	nop
 8009eae:	bf00      	nop
 8009eb0:	e7fd      	b.n	8009eae <prvDeleteTCB+0x62>
	}
 8009eb2:	bf00      	nop
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
	...

08009ebc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8009ef4 <prvResetNextTaskUnblockTime+0x38>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d104      	bne.n	8009ed6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8009ef8 <prvResetNextTaskUnblockTime+0x3c>)
 8009ece:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009ed2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009ed4:	e008      	b.n	8009ee8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ed6:	4b07      	ldr	r3, [pc, #28]	@ (8009ef4 <prvResetNextTaskUnblockTime+0x38>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	4a04      	ldr	r2, [pc, #16]	@ (8009ef8 <prvResetNextTaskUnblockTime+0x3c>)
 8009ee6:	6013      	str	r3, [r2, #0]
}
 8009ee8:	bf00      	nop
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr
 8009ef4:	20000f08 	.word	0x20000f08
 8009ef8:	20000f70 	.word	0x20000f70

08009efc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f02:	4b0b      	ldr	r3, [pc, #44]	@ (8009f30 <xTaskGetSchedulerState+0x34>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d102      	bne.n	8009f10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	607b      	str	r3, [r7, #4]
 8009f0e:	e008      	b.n	8009f22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f10:	4b08      	ldr	r3, [pc, #32]	@ (8009f34 <xTaskGetSchedulerState+0x38>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d102      	bne.n	8009f1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f18:	2302      	movs	r3, #2
 8009f1a:	607b      	str	r3, [r7, #4]
 8009f1c:	e001      	b.n	8009f22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f22:	687b      	ldr	r3, [r7, #4]
	}
 8009f24:	4618      	mov	r0, r3
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr
 8009f30:	20000f5c 	.word	0x20000f5c
 8009f34:	20000f78 	.word	0x20000f78

08009f38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b086      	sub	sp, #24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009f44:	2300      	movs	r3, #0
 8009f46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d05c      	beq.n	800a008 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009f4e:	4b31      	ldr	r3, [pc, #196]	@ (800a014 <xTaskPriorityDisinherit+0xdc>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d00d      	beq.n	8009f74 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8009f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f5c:	b672      	cpsid	i
 8009f5e:	f383 8811 	msr	BASEPRI, r3
 8009f62:	f3bf 8f6f 	isb	sy
 8009f66:	f3bf 8f4f 	dsb	sy
 8009f6a:	b662      	cpsie	i
 8009f6c:	60fb      	str	r3, [r7, #12]
}
 8009f6e:	bf00      	nop
 8009f70:	bf00      	nop
 8009f72:	e7fd      	b.n	8009f70 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d10d      	bne.n	8009f98 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8009f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f80:	b672      	cpsid	i
 8009f82:	f383 8811 	msr	BASEPRI, r3
 8009f86:	f3bf 8f6f 	isb	sy
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	b662      	cpsie	i
 8009f90:	60bb      	str	r3, [r7, #8]
}
 8009f92:	bf00      	nop
 8009f94:	bf00      	nop
 8009f96:	e7fd      	b.n	8009f94 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f9c:	1e5a      	subs	r2, r3, #1
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d02c      	beq.n	800a008 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d128      	bne.n	800a008 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	3304      	adds	r3, #4
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fe fbe2 	bl	8008784 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fcc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fd8:	4b0f      	ldr	r3, [pc, #60]	@ (800a018 <xTaskPriorityDisinherit+0xe0>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d903      	bls.n	8009fe8 <xTaskPriorityDisinherit+0xb0>
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fe4:	4a0c      	ldr	r2, [pc, #48]	@ (800a018 <xTaskPriorityDisinherit+0xe0>)
 8009fe6:	6013      	str	r3, [r2, #0]
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fec:	4613      	mov	r3, r2
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	4413      	add	r3, r2
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	4a09      	ldr	r2, [pc, #36]	@ (800a01c <xTaskPriorityDisinherit+0xe4>)
 8009ff6:	441a      	add	r2, r3
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	3304      	adds	r3, #4
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	4610      	mov	r0, r2
 800a000:	f7fe fb63 	bl	80086ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a004:	2301      	movs	r3, #1
 800a006:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a008:	697b      	ldr	r3, [r7, #20]
	}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3718      	adds	r7, #24
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	20000a7c 	.word	0x20000a7c
 800a018:	20000f58 	.word	0x20000f58
 800a01c:	20000a80 	.word	0x20000a80

0800a020 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a02a:	4b21      	ldr	r3, [pc, #132]	@ (800a0b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a030:	4b20      	ldr	r3, [pc, #128]	@ (800a0b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	3304      	adds	r3, #4
 800a036:	4618      	mov	r0, r3
 800a038:	f7fe fba4 	bl	8008784 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a042:	d10a      	bne.n	800a05a <prvAddCurrentTaskToDelayedList+0x3a>
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d007      	beq.n	800a05a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a04a:	4b1a      	ldr	r3, [pc, #104]	@ (800a0b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	3304      	adds	r3, #4
 800a050:	4619      	mov	r1, r3
 800a052:	4819      	ldr	r0, [pc, #100]	@ (800a0b8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a054:	f7fe fb39 	bl	80086ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a058:	e026      	b.n	800a0a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	4413      	add	r3, r2
 800a060:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a062:	4b14      	ldr	r3, [pc, #80]	@ (800a0b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	68ba      	ldr	r2, [r7, #8]
 800a068:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a06a:	68ba      	ldr	r2, [r7, #8]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	429a      	cmp	r2, r3
 800a070:	d209      	bcs.n	800a086 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a072:	4b12      	ldr	r3, [pc, #72]	@ (800a0bc <prvAddCurrentTaskToDelayedList+0x9c>)
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	4b0f      	ldr	r3, [pc, #60]	@ (800a0b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	3304      	adds	r3, #4
 800a07c:	4619      	mov	r1, r3
 800a07e:	4610      	mov	r0, r2
 800a080:	f7fe fb47 	bl	8008712 <vListInsert>
}
 800a084:	e010      	b.n	800a0a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a086:	4b0e      	ldr	r3, [pc, #56]	@ (800a0c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	4b0a      	ldr	r3, [pc, #40]	@ (800a0b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	3304      	adds	r3, #4
 800a090:	4619      	mov	r1, r3
 800a092:	4610      	mov	r0, r2
 800a094:	f7fe fb3d 	bl	8008712 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a098:	4b0a      	ldr	r3, [pc, #40]	@ (800a0c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	68ba      	ldr	r2, [r7, #8]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d202      	bcs.n	800a0a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a0a2:	4a08      	ldr	r2, [pc, #32]	@ (800a0c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	6013      	str	r3, [r2, #0]
}
 800a0a8:	bf00      	nop
 800a0aa:	3710      	adds	r7, #16
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	20000f54 	.word	0x20000f54
 800a0b4:	20000a7c 	.word	0x20000a7c
 800a0b8:	20000f3c 	.word	0x20000f3c
 800a0bc:	20000f0c 	.word	0x20000f0c
 800a0c0:	20000f08 	.word	0x20000f08
 800a0c4:	20000f70 	.word	0x20000f70

0800a0c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b08a      	sub	sp, #40	@ 0x28
 800a0cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a0d2:	f000 fb21 	bl	800a718 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a0d6:	4b1e      	ldr	r3, [pc, #120]	@ (800a150 <xTimerCreateTimerTask+0x88>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d021      	beq.n	800a122 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a0e6:	1d3a      	adds	r2, r7, #4
 800a0e8:	f107 0108 	add.w	r1, r7, #8
 800a0ec:	f107 030c 	add.w	r3, r7, #12
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7fe faa3 	bl	800863c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a0f6:	6879      	ldr	r1, [r7, #4]
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	68fa      	ldr	r2, [r7, #12]
 800a0fc:	9202      	str	r2, [sp, #8]
 800a0fe:	9301      	str	r3, [sp, #4]
 800a100:	2302      	movs	r3, #2
 800a102:	9300      	str	r3, [sp, #0]
 800a104:	2300      	movs	r3, #0
 800a106:	460a      	mov	r2, r1
 800a108:	4912      	ldr	r1, [pc, #72]	@ (800a154 <xTimerCreateTimerTask+0x8c>)
 800a10a:	4813      	ldr	r0, [pc, #76]	@ (800a158 <xTimerCreateTimerTask+0x90>)
 800a10c:	f7ff f87e 	bl	800920c <xTaskCreateStatic>
 800a110:	4603      	mov	r3, r0
 800a112:	4a12      	ldr	r2, [pc, #72]	@ (800a15c <xTimerCreateTimerTask+0x94>)
 800a114:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a116:	4b11      	ldr	r3, [pc, #68]	@ (800a15c <xTimerCreateTimerTask+0x94>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d001      	beq.n	800a122 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a11e:	2301      	movs	r3, #1
 800a120:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d10d      	bne.n	800a144 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800a128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a12c:	b672      	cpsid	i
 800a12e:	f383 8811 	msr	BASEPRI, r3
 800a132:	f3bf 8f6f 	isb	sy
 800a136:	f3bf 8f4f 	dsb	sy
 800a13a:	b662      	cpsie	i
 800a13c:	613b      	str	r3, [r7, #16]
}
 800a13e:	bf00      	nop
 800a140:	bf00      	nop
 800a142:	e7fd      	b.n	800a140 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800a144:	697b      	ldr	r3, [r7, #20]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3718      	adds	r7, #24
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	20000fac 	.word	0x20000fac
 800a154:	0800bedc 	.word	0x0800bedc
 800a158:	0800a2a1 	.word	0x0800a2a1
 800a15c:	20000fb0 	.word	0x20000fb0

0800a160 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b08a      	sub	sp, #40	@ 0x28
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
 800a16c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a16e:	2300      	movs	r3, #0
 800a170:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d10d      	bne.n	800a194 <xTimerGenericCommand+0x34>
	__asm volatile
 800a178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a17c:	b672      	cpsid	i
 800a17e:	f383 8811 	msr	BASEPRI, r3
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	f3bf 8f4f 	dsb	sy
 800a18a:	b662      	cpsie	i
 800a18c:	623b      	str	r3, [r7, #32]
}
 800a18e:	bf00      	nop
 800a190:	bf00      	nop
 800a192:	e7fd      	b.n	800a190 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a194:	4b19      	ldr	r3, [pc, #100]	@ (800a1fc <xTimerGenericCommand+0x9c>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d02a      	beq.n	800a1f2 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	2b05      	cmp	r3, #5
 800a1ac:	dc18      	bgt.n	800a1e0 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a1ae:	f7ff fea5 	bl	8009efc <xTaskGetSchedulerState>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b02      	cmp	r3, #2
 800a1b6:	d109      	bne.n	800a1cc <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a1b8:	4b10      	ldr	r3, [pc, #64]	@ (800a1fc <xTimerGenericCommand+0x9c>)
 800a1ba:	6818      	ldr	r0, [r3, #0]
 800a1bc:	f107 0110 	add.w	r1, r7, #16
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1c4:	f7fe fc1e 	bl	8008a04 <xQueueGenericSend>
 800a1c8:	6278      	str	r0, [r7, #36]	@ 0x24
 800a1ca:	e012      	b.n	800a1f2 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a1cc:	4b0b      	ldr	r3, [pc, #44]	@ (800a1fc <xTimerGenericCommand+0x9c>)
 800a1ce:	6818      	ldr	r0, [r3, #0]
 800a1d0:	f107 0110 	add.w	r1, r7, #16
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f7fe fc14 	bl	8008a04 <xQueueGenericSend>
 800a1dc:	6278      	str	r0, [r7, #36]	@ 0x24
 800a1de:	e008      	b.n	800a1f2 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a1e0:	4b06      	ldr	r3, [pc, #24]	@ (800a1fc <xTimerGenericCommand+0x9c>)
 800a1e2:	6818      	ldr	r0, [r3, #0]
 800a1e4:	f107 0110 	add.w	r1, r7, #16
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	683a      	ldr	r2, [r7, #0]
 800a1ec:	f7fe fd14 	bl	8008c18 <xQueueGenericSendFromISR>
 800a1f0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3728      	adds	r7, #40	@ 0x28
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	20000fac 	.word	0x20000fac

0800a200 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b088      	sub	sp, #32
 800a204:	af02      	add	r7, sp, #8
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a20a:	4b24      	ldr	r3, [pc, #144]	@ (800a29c <prvProcessExpiredTimer+0x9c>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	3304      	adds	r3, #4
 800a218:	4618      	mov	r0, r3
 800a21a:	f7fe fab3 	bl	8008784 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a224:	f003 0304 	and.w	r3, r3, #4
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d025      	beq.n	800a278 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	699a      	ldr	r2, [r3, #24]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	18d1      	adds	r1, r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	683a      	ldr	r2, [r7, #0]
 800a238:	6978      	ldr	r0, [r7, #20]
 800a23a:	f000 f8d7 	bl	800a3ec <prvInsertTimerInActiveList>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d022      	beq.n	800a28a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a244:	2300      	movs	r3, #0
 800a246:	9300      	str	r3, [sp, #0]
 800a248:	2300      	movs	r3, #0
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	2100      	movs	r1, #0
 800a24e:	6978      	ldr	r0, [r7, #20]
 800a250:	f7ff ff86 	bl	800a160 <xTimerGenericCommand>
 800a254:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d116      	bne.n	800a28a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800a25c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a260:	b672      	cpsid	i
 800a262:	f383 8811 	msr	BASEPRI, r3
 800a266:	f3bf 8f6f 	isb	sy
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	b662      	cpsie	i
 800a270:	60fb      	str	r3, [r7, #12]
}
 800a272:	bf00      	nop
 800a274:	bf00      	nop
 800a276:	e7fd      	b.n	800a274 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a27e:	f023 0301 	bic.w	r3, r3, #1
 800a282:	b2da      	uxtb	r2, r3
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	6a1b      	ldr	r3, [r3, #32]
 800a28e:	6978      	ldr	r0, [r7, #20]
 800a290:	4798      	blx	r3
}
 800a292:	bf00      	nop
 800a294:	3718      	adds	r7, #24
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	20000fa4 	.word	0x20000fa4

0800a2a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a2a8:	f107 0308 	add.w	r3, r7, #8
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f000 f859 	bl	800a364 <prvGetNextExpireTime>
 800a2b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	68f8      	ldr	r0, [r7, #12]
 800a2ba:	f000 f805 	bl	800a2c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a2be:	f000 f8d7 	bl	800a470 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a2c2:	bf00      	nop
 800a2c4:	e7f0      	b.n	800a2a8 <prvTimerTask+0x8>
	...

0800a2c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a2d2:	f7ff fa0d 	bl	80096f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a2d6:	f107 0308 	add.w	r3, r7, #8
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f000 f866 	bl	800a3ac <prvSampleTimeNow>
 800a2e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d130      	bne.n	800a34a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d10a      	bne.n	800a304 <prvProcessTimerOrBlockTask+0x3c>
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d806      	bhi.n	800a304 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a2f6:	f7ff fa09 	bl	800970c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a2fa:	68f9      	ldr	r1, [r7, #12]
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f7ff ff7f 	bl	800a200 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a302:	e024      	b.n	800a34e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d008      	beq.n	800a31c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a30a:	4b13      	ldr	r3, [pc, #76]	@ (800a358 <prvProcessTimerOrBlockTask+0x90>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d101      	bne.n	800a318 <prvProcessTimerOrBlockTask+0x50>
 800a314:	2301      	movs	r3, #1
 800a316:	e000      	b.n	800a31a <prvProcessTimerOrBlockTask+0x52>
 800a318:	2300      	movs	r3, #0
 800a31a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a31c:	4b0f      	ldr	r3, [pc, #60]	@ (800a35c <prvProcessTimerOrBlockTask+0x94>)
 800a31e:	6818      	ldr	r0, [r3, #0]
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	1ad3      	subs	r3, r2, r3
 800a326:	683a      	ldr	r2, [r7, #0]
 800a328:	4619      	mov	r1, r3
 800a32a:	f7fe ff3b 	bl	80091a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a32e:	f7ff f9ed 	bl	800970c <xTaskResumeAll>
 800a332:	4603      	mov	r3, r0
 800a334:	2b00      	cmp	r3, #0
 800a336:	d10a      	bne.n	800a34e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a338:	4b09      	ldr	r3, [pc, #36]	@ (800a360 <prvProcessTimerOrBlockTask+0x98>)
 800a33a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a33e:	601a      	str	r2, [r3, #0]
 800a340:	f3bf 8f4f 	dsb	sy
 800a344:	f3bf 8f6f 	isb	sy
}
 800a348:	e001      	b.n	800a34e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a34a:	f7ff f9df 	bl	800970c <xTaskResumeAll>
}
 800a34e:	bf00      	nop
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	20000fa8 	.word	0x20000fa8
 800a35c:	20000fac 	.word	0x20000fac
 800a360:	e000ed04 	.word	0xe000ed04

0800a364 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a36c:	4b0e      	ldr	r3, [pc, #56]	@ (800a3a8 <prvGetNextExpireTime+0x44>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d101      	bne.n	800a37a <prvGetNextExpireTime+0x16>
 800a376:	2201      	movs	r2, #1
 800a378:	e000      	b.n	800a37c <prvGetNextExpireTime+0x18>
 800a37a:	2200      	movs	r2, #0
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d105      	bne.n	800a394 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a388:	4b07      	ldr	r3, [pc, #28]	@ (800a3a8 <prvGetNextExpireTime+0x44>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	68db      	ldr	r3, [r3, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	60fb      	str	r3, [r7, #12]
 800a392:	e001      	b.n	800a398 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a394:	2300      	movs	r3, #0
 800a396:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a398:	68fb      	ldr	r3, [r7, #12]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3714      	adds	r7, #20
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr
 800a3a6:	bf00      	nop
 800a3a8:	20000fa4 	.word	0x20000fa4

0800a3ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a3b4:	f7ff fa4a 	bl	800984c <xTaskGetTickCount>
 800a3b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a3ba:	4b0b      	ldr	r3, [pc, #44]	@ (800a3e8 <prvSampleTimeNow+0x3c>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d205      	bcs.n	800a3d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a3c4:	f000 f940 	bl	800a648 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	601a      	str	r2, [r3, #0]
 800a3ce:	e002      	b.n	800a3d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a3d6:	4a04      	ldr	r2, [pc, #16]	@ (800a3e8 <prvSampleTimeNow+0x3c>)
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	20000fb4 	.word	0x20000fb4

0800a3ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b086      	sub	sp, #24
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
 800a3f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	68ba      	ldr	r2, [r7, #8]
 800a402:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d812      	bhi.n	800a438 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	1ad2      	subs	r2, r2, r3
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	699b      	ldr	r3, [r3, #24]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d302      	bcc.n	800a426 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a420:	2301      	movs	r3, #1
 800a422:	617b      	str	r3, [r7, #20]
 800a424:	e01b      	b.n	800a45e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a426:	4b10      	ldr	r3, [pc, #64]	@ (800a468 <prvInsertTimerInActiveList+0x7c>)
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	3304      	adds	r3, #4
 800a42e:	4619      	mov	r1, r3
 800a430:	4610      	mov	r0, r2
 800a432:	f7fe f96e 	bl	8008712 <vListInsert>
 800a436:	e012      	b.n	800a45e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d206      	bcs.n	800a44e <prvInsertTimerInActiveList+0x62>
 800a440:	68ba      	ldr	r2, [r7, #8]
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	429a      	cmp	r2, r3
 800a446:	d302      	bcc.n	800a44e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a448:	2301      	movs	r3, #1
 800a44a:	617b      	str	r3, [r7, #20]
 800a44c:	e007      	b.n	800a45e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a44e:	4b07      	ldr	r3, [pc, #28]	@ (800a46c <prvInsertTimerInActiveList+0x80>)
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	3304      	adds	r3, #4
 800a456:	4619      	mov	r1, r3
 800a458:	4610      	mov	r0, r2
 800a45a:	f7fe f95a 	bl	8008712 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a45e:	697b      	ldr	r3, [r7, #20]
}
 800a460:	4618      	mov	r0, r3
 800a462:	3718      	adds	r7, #24
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	20000fa8 	.word	0x20000fa8
 800a46c:	20000fa4 	.word	0x20000fa4

0800a470 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b08e      	sub	sp, #56	@ 0x38
 800a474:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a476:	e0d4      	b.n	800a622 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	da1b      	bge.n	800a4b6 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a47e:	1d3b      	adds	r3, r7, #4
 800a480:	3304      	adds	r3, #4
 800a482:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a486:	2b00      	cmp	r3, #0
 800a488:	d10d      	bne.n	800a4a6 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800a48a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a48e:	b672      	cpsid	i
 800a490:	f383 8811 	msr	BASEPRI, r3
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	b662      	cpsie	i
 800a49e:	61fb      	str	r3, [r7, #28]
}
 800a4a0:	bf00      	nop
 800a4a2:	bf00      	nop
 800a4a4:	e7fd      	b.n	800a4a2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4ac:	6850      	ldr	r0, [r2, #4]
 800a4ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4b0:	6892      	ldr	r2, [r2, #8]
 800a4b2:	4611      	mov	r1, r2
 800a4b4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	f2c0 80b2 	blt.w	800a622 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a4c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4c4:	695b      	ldr	r3, [r3, #20]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d004      	beq.n	800a4d4 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4cc:	3304      	adds	r3, #4
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7fe f958 	bl	8008784 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4d4:	463b      	mov	r3, r7
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7ff ff68 	bl	800a3ac <prvSampleTimeNow>
 800a4dc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2b09      	cmp	r3, #9
 800a4e2:	f200 809b 	bhi.w	800a61c <prvProcessReceivedCommands+0x1ac>
 800a4e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a4ec <prvProcessReceivedCommands+0x7c>)
 800a4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ec:	0800a515 	.word	0x0800a515
 800a4f0:	0800a515 	.word	0x0800a515
 800a4f4:	0800a515 	.word	0x0800a515
 800a4f8:	0800a58f 	.word	0x0800a58f
 800a4fc:	0800a5a3 	.word	0x0800a5a3
 800a500:	0800a5f3 	.word	0x0800a5f3
 800a504:	0800a515 	.word	0x0800a515
 800a508:	0800a515 	.word	0x0800a515
 800a50c:	0800a58f 	.word	0x0800a58f
 800a510:	0800a5a3 	.word	0x0800a5a3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a516:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a51a:	f043 0301 	orr.w	r3, r3, #1
 800a51e:	b2da      	uxtb	r2, r3
 800a520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a522:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a526:	68ba      	ldr	r2, [r7, #8]
 800a528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a52a:	699b      	ldr	r3, [r3, #24]
 800a52c:	18d1      	adds	r1, r2, r3
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a532:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a534:	f7ff ff5a 	bl	800a3ec <prvInsertTimerInActiveList>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d070      	beq.n	800a620 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a53e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a540:	6a1b      	ldr	r3, [r3, #32]
 800a542:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a544:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a548:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a54c:	f003 0304 	and.w	r3, r3, #4
 800a550:	2b00      	cmp	r3, #0
 800a552:	d065      	beq.n	800a620 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a554:	68ba      	ldr	r2, [r7, #8]
 800a556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	441a      	add	r2, r3
 800a55c:	2300      	movs	r3, #0
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	2300      	movs	r3, #0
 800a562:	2100      	movs	r1, #0
 800a564:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a566:	f7ff fdfb 	bl	800a160 <xTimerGenericCommand>
 800a56a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a56c:	6a3b      	ldr	r3, [r7, #32]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d156      	bne.n	800a620 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800a572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a576:	b672      	cpsid	i
 800a578:	f383 8811 	msr	BASEPRI, r3
 800a57c:	f3bf 8f6f 	isb	sy
 800a580:	f3bf 8f4f 	dsb	sy
 800a584:	b662      	cpsie	i
 800a586:	61bb      	str	r3, [r7, #24]
}
 800a588:	bf00      	nop
 800a58a:	bf00      	nop
 800a58c:	e7fd      	b.n	800a58a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a590:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a594:	f023 0301 	bic.w	r3, r3, #1
 800a598:	b2da      	uxtb	r2, r3
 800a59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a59c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a5a0:	e03f      	b.n	800a622 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5a8:	f043 0301 	orr.w	r3, r3, #1
 800a5ac:	b2da      	uxtb	r2, r3
 800a5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a5b4:	68ba      	ldr	r2, [r7, #8]
 800a5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5bc:	699b      	ldr	r3, [r3, #24]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d10d      	bne.n	800a5de <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800a5c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5c6:	b672      	cpsid	i
 800a5c8:	f383 8811 	msr	BASEPRI, r3
 800a5cc:	f3bf 8f6f 	isb	sy
 800a5d0:	f3bf 8f4f 	dsb	sy
 800a5d4:	b662      	cpsie	i
 800a5d6:	617b      	str	r3, [r7, #20]
}
 800a5d8:	bf00      	nop
 800a5da:	bf00      	nop
 800a5dc:	e7fd      	b.n	800a5da <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a5de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e0:	699a      	ldr	r2, [r3, #24]
 800a5e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e4:	18d1      	adds	r1, r2, r3
 800a5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5ec:	f7ff fefe 	bl	800a3ec <prvInsertTimerInActiveList>
					break;
 800a5f0:	e017      	b.n	800a622 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5f8:	f003 0302 	and.w	r3, r3, #2
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d103      	bne.n	800a608 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800a600:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a602:	f000 fbd7 	bl	800adb4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a606:	e00c      	b.n	800a622 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a60a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a60e:	f023 0301 	bic.w	r3, r3, #1
 800a612:	b2da      	uxtb	r2, r3
 800a614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a616:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a61a:	e002      	b.n	800a622 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800a61c:	bf00      	nop
 800a61e:	e000      	b.n	800a622 <prvProcessReceivedCommands+0x1b2>
					break;
 800a620:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a622:	4b08      	ldr	r3, [pc, #32]	@ (800a644 <prvProcessReceivedCommands+0x1d4>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	1d39      	adds	r1, r7, #4
 800a628:	2200      	movs	r2, #0
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7fe fb98 	bl	8008d60 <xQueueReceive>
 800a630:	4603      	mov	r3, r0
 800a632:	2b00      	cmp	r3, #0
 800a634:	f47f af20 	bne.w	800a478 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a638:	bf00      	nop
 800a63a:	bf00      	nop
 800a63c:	3730      	adds	r7, #48	@ 0x30
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	20000fac 	.word	0x20000fac

0800a648 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b088      	sub	sp, #32
 800a64c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a64e:	e04b      	b.n	800a6e8 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a650:	4b2f      	ldr	r3, [pc, #188]	@ (800a710 <prvSwitchTimerLists+0xc8>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a65a:	4b2d      	ldr	r3, [pc, #180]	@ (800a710 <prvSwitchTimerLists+0xc8>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	68db      	ldr	r3, [r3, #12]
 800a662:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	3304      	adds	r3, #4
 800a668:	4618      	mov	r0, r3
 800a66a:	f7fe f88b 	bl	8008784 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6a1b      	ldr	r3, [r3, #32]
 800a672:	68f8      	ldr	r0, [r7, #12]
 800a674:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a67c:	f003 0304 	and.w	r3, r3, #4
 800a680:	2b00      	cmp	r3, #0
 800a682:	d031      	beq.n	800a6e8 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	699b      	ldr	r3, [r3, #24]
 800a688:	693a      	ldr	r2, [r7, #16]
 800a68a:	4413      	add	r3, r2
 800a68c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a68e:	68ba      	ldr	r2, [r7, #8]
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	429a      	cmp	r2, r3
 800a694:	d90e      	bls.n	800a6b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	68ba      	ldr	r2, [r7, #8]
 800a69a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6a2:	4b1b      	ldr	r3, [pc, #108]	@ (800a710 <prvSwitchTimerLists+0xc8>)
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	3304      	adds	r3, #4
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	4610      	mov	r0, r2
 800a6ae:	f7fe f830 	bl	8008712 <vListInsert>
 800a6b2:	e019      	b.n	800a6e8 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	9300      	str	r3, [sp, #0]
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	693a      	ldr	r2, [r7, #16]
 800a6bc:	2100      	movs	r1, #0
 800a6be:	68f8      	ldr	r0, [r7, #12]
 800a6c0:	f7ff fd4e 	bl	800a160 <xTimerGenericCommand>
 800a6c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d10d      	bne.n	800a6e8 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800a6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6d0:	b672      	cpsid	i
 800a6d2:	f383 8811 	msr	BASEPRI, r3
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	f3bf 8f4f 	dsb	sy
 800a6de:	b662      	cpsie	i
 800a6e0:	603b      	str	r3, [r7, #0]
}
 800a6e2:	bf00      	nop
 800a6e4:	bf00      	nop
 800a6e6:	e7fd      	b.n	800a6e4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a6e8:	4b09      	ldr	r3, [pc, #36]	@ (800a710 <prvSwitchTimerLists+0xc8>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1ae      	bne.n	800a650 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a6f2:	4b07      	ldr	r3, [pc, #28]	@ (800a710 <prvSwitchTimerLists+0xc8>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a6f8:	4b06      	ldr	r3, [pc, #24]	@ (800a714 <prvSwitchTimerLists+0xcc>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a04      	ldr	r2, [pc, #16]	@ (800a710 <prvSwitchTimerLists+0xc8>)
 800a6fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a700:	4a04      	ldr	r2, [pc, #16]	@ (800a714 <prvSwitchTimerLists+0xcc>)
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	6013      	str	r3, [r2, #0]
}
 800a706:	bf00      	nop
 800a708:	3718      	adds	r7, #24
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	20000fa4 	.word	0x20000fa4
 800a714:	20000fa8 	.word	0x20000fa8

0800a718 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a71e:	f000 f94d 	bl	800a9bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a722:	4b15      	ldr	r3, [pc, #84]	@ (800a778 <prvCheckForValidListAndQueue+0x60>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d120      	bne.n	800a76c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a72a:	4814      	ldr	r0, [pc, #80]	@ (800a77c <prvCheckForValidListAndQueue+0x64>)
 800a72c:	f7fd ffa0 	bl	8008670 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a730:	4813      	ldr	r0, [pc, #76]	@ (800a780 <prvCheckForValidListAndQueue+0x68>)
 800a732:	f7fd ff9d 	bl	8008670 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a736:	4b13      	ldr	r3, [pc, #76]	@ (800a784 <prvCheckForValidListAndQueue+0x6c>)
 800a738:	4a10      	ldr	r2, [pc, #64]	@ (800a77c <prvCheckForValidListAndQueue+0x64>)
 800a73a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a73c:	4b12      	ldr	r3, [pc, #72]	@ (800a788 <prvCheckForValidListAndQueue+0x70>)
 800a73e:	4a10      	ldr	r2, [pc, #64]	@ (800a780 <prvCheckForValidListAndQueue+0x68>)
 800a740:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a742:	2300      	movs	r3, #0
 800a744:	9300      	str	r3, [sp, #0]
 800a746:	4b11      	ldr	r3, [pc, #68]	@ (800a78c <prvCheckForValidListAndQueue+0x74>)
 800a748:	4a11      	ldr	r2, [pc, #68]	@ (800a790 <prvCheckForValidListAndQueue+0x78>)
 800a74a:	2110      	movs	r1, #16
 800a74c:	200a      	movs	r0, #10
 800a74e:	f7fe f8af 	bl	80088b0 <xQueueGenericCreateStatic>
 800a752:	4603      	mov	r3, r0
 800a754:	4a08      	ldr	r2, [pc, #32]	@ (800a778 <prvCheckForValidListAndQueue+0x60>)
 800a756:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a758:	4b07      	ldr	r3, [pc, #28]	@ (800a778 <prvCheckForValidListAndQueue+0x60>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d005      	beq.n	800a76c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a760:	4b05      	ldr	r3, [pc, #20]	@ (800a778 <prvCheckForValidListAndQueue+0x60>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	490b      	ldr	r1, [pc, #44]	@ (800a794 <prvCheckForValidListAndQueue+0x7c>)
 800a766:	4618      	mov	r0, r3
 800a768:	f7fe fcf2 	bl	8009150 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a76c:	f000 f95c 	bl	800aa28 <vPortExitCritical>
}
 800a770:	bf00      	nop
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	20000fac 	.word	0x20000fac
 800a77c:	20000f7c 	.word	0x20000f7c
 800a780:	20000f90 	.word	0x20000f90
 800a784:	20000fa4 	.word	0x20000fa4
 800a788:	20000fa8 	.word	0x20000fa8
 800a78c:	20001058 	.word	0x20001058
 800a790:	20000fb8 	.word	0x20000fb8
 800a794:	0800bee4 	.word	0x0800bee4

0800a798 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a798:	b480      	push	{r7}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	3b04      	subs	r3, #4
 800a7a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a7b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	3b04      	subs	r3, #4
 800a7b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	f023 0201 	bic.w	r2, r3, #1
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	3b04      	subs	r3, #4
 800a7c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a7c8:	4a0c      	ldr	r2, [pc, #48]	@ (800a7fc <pxPortInitialiseStack+0x64>)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	3b14      	subs	r3, #20
 800a7d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	3b04      	subs	r3, #4
 800a7de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f06f 0202 	mvn.w	r2, #2
 800a7e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	3b20      	subs	r3, #32
 800a7ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3714      	adds	r7, #20
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr
 800a7fc:	0800a801 	.word	0x0800a801

0800a800 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a800:	b480      	push	{r7}
 800a802:	b085      	sub	sp, #20
 800a804:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a806:	2300      	movs	r3, #0
 800a808:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a80a:	4b15      	ldr	r3, [pc, #84]	@ (800a860 <prvTaskExitError+0x60>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a812:	d00d      	beq.n	800a830 <prvTaskExitError+0x30>
	__asm volatile
 800a814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a818:	b672      	cpsid	i
 800a81a:	f383 8811 	msr	BASEPRI, r3
 800a81e:	f3bf 8f6f 	isb	sy
 800a822:	f3bf 8f4f 	dsb	sy
 800a826:	b662      	cpsie	i
 800a828:	60fb      	str	r3, [r7, #12]
}
 800a82a:	bf00      	nop
 800a82c:	bf00      	nop
 800a82e:	e7fd      	b.n	800a82c <prvTaskExitError+0x2c>
	__asm volatile
 800a830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a834:	b672      	cpsid	i
 800a836:	f383 8811 	msr	BASEPRI, r3
 800a83a:	f3bf 8f6f 	isb	sy
 800a83e:	f3bf 8f4f 	dsb	sy
 800a842:	b662      	cpsie	i
 800a844:	60bb      	str	r3, [r7, #8]
}
 800a846:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a848:	bf00      	nop
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d0fc      	beq.n	800a84a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a850:	bf00      	nop
 800a852:	bf00      	nop
 800a854:	3714      	adds	r7, #20
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop
 800a860:	20000098 	.word	0x20000098
	...

0800a870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a870:	4b07      	ldr	r3, [pc, #28]	@ (800a890 <pxCurrentTCBConst2>)
 800a872:	6819      	ldr	r1, [r3, #0]
 800a874:	6808      	ldr	r0, [r1, #0]
 800a876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a87a:	f380 8809 	msr	PSP, r0
 800a87e:	f3bf 8f6f 	isb	sy
 800a882:	f04f 0000 	mov.w	r0, #0
 800a886:	f380 8811 	msr	BASEPRI, r0
 800a88a:	4770      	bx	lr
 800a88c:	f3af 8000 	nop.w

0800a890 <pxCurrentTCBConst2>:
 800a890:	20000a7c 	.word	0x20000a7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a894:	bf00      	nop
 800a896:	bf00      	nop

0800a898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a898:	4808      	ldr	r0, [pc, #32]	@ (800a8bc <prvPortStartFirstTask+0x24>)
 800a89a:	6800      	ldr	r0, [r0, #0]
 800a89c:	6800      	ldr	r0, [r0, #0]
 800a89e:	f380 8808 	msr	MSP, r0
 800a8a2:	f04f 0000 	mov.w	r0, #0
 800a8a6:	f380 8814 	msr	CONTROL, r0
 800a8aa:	b662      	cpsie	i
 800a8ac:	b661      	cpsie	f
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	f3bf 8f6f 	isb	sy
 800a8b6:	df00      	svc	0
 800a8b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a8ba:	bf00      	nop
 800a8bc:	e000ed08 	.word	0xe000ed08

0800a8c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a8c6:	4b37      	ldr	r3, [pc, #220]	@ (800a9a4 <xPortStartScheduler+0xe4>)
 800a8c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	22ff      	movs	r2, #255	@ 0xff
 800a8d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a8e0:	78fb      	ldrb	r3, [r7, #3]
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a8e8:	b2da      	uxtb	r2, r3
 800a8ea:	4b2f      	ldr	r3, [pc, #188]	@ (800a9a8 <xPortStartScheduler+0xe8>)
 800a8ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a8ee:	4b2f      	ldr	r3, [pc, #188]	@ (800a9ac <xPortStartScheduler+0xec>)
 800a8f0:	2207      	movs	r2, #7
 800a8f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8f4:	e009      	b.n	800a90a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a8f6:	4b2d      	ldr	r3, [pc, #180]	@ (800a9ac <xPortStartScheduler+0xec>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	4a2b      	ldr	r2, [pc, #172]	@ (800a9ac <xPortStartScheduler+0xec>)
 800a8fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a900:	78fb      	ldrb	r3, [r7, #3]
 800a902:	b2db      	uxtb	r3, r3
 800a904:	005b      	lsls	r3, r3, #1
 800a906:	b2db      	uxtb	r3, r3
 800a908:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a90a:	78fb      	ldrb	r3, [r7, #3]
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a912:	2b80      	cmp	r3, #128	@ 0x80
 800a914:	d0ef      	beq.n	800a8f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a916:	4b25      	ldr	r3, [pc, #148]	@ (800a9ac <xPortStartScheduler+0xec>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f1c3 0307 	rsb	r3, r3, #7
 800a91e:	2b04      	cmp	r3, #4
 800a920:	d00d      	beq.n	800a93e <xPortStartScheduler+0x7e>
	__asm volatile
 800a922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a926:	b672      	cpsid	i
 800a928:	f383 8811 	msr	BASEPRI, r3
 800a92c:	f3bf 8f6f 	isb	sy
 800a930:	f3bf 8f4f 	dsb	sy
 800a934:	b662      	cpsie	i
 800a936:	60bb      	str	r3, [r7, #8]
}
 800a938:	bf00      	nop
 800a93a:	bf00      	nop
 800a93c:	e7fd      	b.n	800a93a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a93e:	4b1b      	ldr	r3, [pc, #108]	@ (800a9ac <xPortStartScheduler+0xec>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	021b      	lsls	r3, r3, #8
 800a944:	4a19      	ldr	r2, [pc, #100]	@ (800a9ac <xPortStartScheduler+0xec>)
 800a946:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a948:	4b18      	ldr	r3, [pc, #96]	@ (800a9ac <xPortStartScheduler+0xec>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a950:	4a16      	ldr	r2, [pc, #88]	@ (800a9ac <xPortStartScheduler+0xec>)
 800a952:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	b2da      	uxtb	r2, r3
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a95c:	4b14      	ldr	r3, [pc, #80]	@ (800a9b0 <xPortStartScheduler+0xf0>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a13      	ldr	r2, [pc, #76]	@ (800a9b0 <xPortStartScheduler+0xf0>)
 800a962:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a966:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a968:	4b11      	ldr	r3, [pc, #68]	@ (800a9b0 <xPortStartScheduler+0xf0>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a10      	ldr	r2, [pc, #64]	@ (800a9b0 <xPortStartScheduler+0xf0>)
 800a96e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a972:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a974:	f000 f8dc 	bl	800ab30 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a978:	4b0e      	ldr	r3, [pc, #56]	@ (800a9b4 <xPortStartScheduler+0xf4>)
 800a97a:	2200      	movs	r2, #0
 800a97c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a97e:	f000 f8fb 	bl	800ab78 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a982:	4b0d      	ldr	r3, [pc, #52]	@ (800a9b8 <xPortStartScheduler+0xf8>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4a0c      	ldr	r2, [pc, #48]	@ (800a9b8 <xPortStartScheduler+0xf8>)
 800a988:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a98c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a98e:	f7ff ff83 	bl	800a898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a992:	f7ff f827 	bl	80099e4 <vTaskSwitchContext>
	prvTaskExitError();
 800a996:	f7ff ff33 	bl	800a800 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a99a:	2300      	movs	r3, #0
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3710      	adds	r7, #16
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	e000e400 	.word	0xe000e400
 800a9a8:	200010a8 	.word	0x200010a8
 800a9ac:	200010ac 	.word	0x200010ac
 800a9b0:	e000ed20 	.word	0xe000ed20
 800a9b4:	20000098 	.word	0x20000098
 800a9b8:	e000ef34 	.word	0xe000ef34

0800a9bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
	__asm volatile
 800a9c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c6:	b672      	cpsid	i
 800a9c8:	f383 8811 	msr	BASEPRI, r3
 800a9cc:	f3bf 8f6f 	isb	sy
 800a9d0:	f3bf 8f4f 	dsb	sy
 800a9d4:	b662      	cpsie	i
 800a9d6:	607b      	str	r3, [r7, #4]
}
 800a9d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a9da:	4b11      	ldr	r3, [pc, #68]	@ (800aa20 <vPortEnterCritical+0x64>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	4a0f      	ldr	r2, [pc, #60]	@ (800aa20 <vPortEnterCritical+0x64>)
 800a9e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a9e4:	4b0e      	ldr	r3, [pc, #56]	@ (800aa20 <vPortEnterCritical+0x64>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d112      	bne.n	800aa12 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a9ec:	4b0d      	ldr	r3, [pc, #52]	@ (800aa24 <vPortEnterCritical+0x68>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00d      	beq.n	800aa12 <vPortEnterCritical+0x56>
	__asm volatile
 800a9f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9fa:	b672      	cpsid	i
 800a9fc:	f383 8811 	msr	BASEPRI, r3
 800aa00:	f3bf 8f6f 	isb	sy
 800aa04:	f3bf 8f4f 	dsb	sy
 800aa08:	b662      	cpsie	i
 800aa0a:	603b      	str	r3, [r7, #0]
}
 800aa0c:	bf00      	nop
 800aa0e:	bf00      	nop
 800aa10:	e7fd      	b.n	800aa0e <vPortEnterCritical+0x52>
	}
}
 800aa12:	bf00      	nop
 800aa14:	370c      	adds	r7, #12
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop
 800aa20:	20000098 	.word	0x20000098
 800aa24:	e000ed04 	.word	0xe000ed04

0800aa28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa2e:	4b13      	ldr	r3, [pc, #76]	@ (800aa7c <vPortExitCritical+0x54>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d10d      	bne.n	800aa52 <vPortExitCritical+0x2a>
	__asm volatile
 800aa36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa3a:	b672      	cpsid	i
 800aa3c:	f383 8811 	msr	BASEPRI, r3
 800aa40:	f3bf 8f6f 	isb	sy
 800aa44:	f3bf 8f4f 	dsb	sy
 800aa48:	b662      	cpsie	i
 800aa4a:	607b      	str	r3, [r7, #4]
}
 800aa4c:	bf00      	nop
 800aa4e:	bf00      	nop
 800aa50:	e7fd      	b.n	800aa4e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800aa52:	4b0a      	ldr	r3, [pc, #40]	@ (800aa7c <vPortExitCritical+0x54>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	3b01      	subs	r3, #1
 800aa58:	4a08      	ldr	r2, [pc, #32]	@ (800aa7c <vPortExitCritical+0x54>)
 800aa5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa5c:	4b07      	ldr	r3, [pc, #28]	@ (800aa7c <vPortExitCritical+0x54>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d105      	bne.n	800aa70 <vPortExitCritical+0x48>
 800aa64:	2300      	movs	r3, #0
 800aa66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	f383 8811 	msr	BASEPRI, r3
}
 800aa6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aa70:	bf00      	nop
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr
 800aa7c:	20000098 	.word	0x20000098

0800aa80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa80:	f3ef 8009 	mrs	r0, PSP
 800aa84:	f3bf 8f6f 	isb	sy
 800aa88:	4b15      	ldr	r3, [pc, #84]	@ (800aae0 <pxCurrentTCBConst>)
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	f01e 0f10 	tst.w	lr, #16
 800aa90:	bf08      	it	eq
 800aa92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa9a:	6010      	str	r0, [r2, #0]
 800aa9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aaa0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800aaa4:	b672      	cpsid	i
 800aaa6:	f380 8811 	msr	BASEPRI, r0
 800aaaa:	f3bf 8f4f 	dsb	sy
 800aaae:	f3bf 8f6f 	isb	sy
 800aab2:	b662      	cpsie	i
 800aab4:	f7fe ff96 	bl	80099e4 <vTaskSwitchContext>
 800aab8:	f04f 0000 	mov.w	r0, #0
 800aabc:	f380 8811 	msr	BASEPRI, r0
 800aac0:	bc09      	pop	{r0, r3}
 800aac2:	6819      	ldr	r1, [r3, #0]
 800aac4:	6808      	ldr	r0, [r1, #0]
 800aac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaca:	f01e 0f10 	tst.w	lr, #16
 800aace:	bf08      	it	eq
 800aad0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aad4:	f380 8809 	msr	PSP, r0
 800aad8:	f3bf 8f6f 	isb	sy
 800aadc:	4770      	bx	lr
 800aade:	bf00      	nop

0800aae0 <pxCurrentTCBConst>:
 800aae0:	20000a7c 	.word	0x20000a7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aae4:	bf00      	nop
 800aae6:	bf00      	nop

0800aae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
	__asm volatile
 800aaee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaf2:	b672      	cpsid	i
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	b662      	cpsie	i
 800ab02:	607b      	str	r3, [r7, #4]
}
 800ab04:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab06:	f7fe feb1 	bl	800986c <xTaskIncrementTick>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d003      	beq.n	800ab18 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ab10:	4b06      	ldr	r3, [pc, #24]	@ (800ab2c <SysTick_Handler+0x44>)
 800ab12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab16:	601a      	str	r2, [r3, #0]
 800ab18:	2300      	movs	r3, #0
 800ab1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	f383 8811 	msr	BASEPRI, r3
}
 800ab22:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab24:	bf00      	nop
 800ab26:	3708      	adds	r7, #8
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	e000ed04 	.word	0xe000ed04

0800ab30 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ab30:	b480      	push	{r7}
 800ab32:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab34:	4b0b      	ldr	r3, [pc, #44]	@ (800ab64 <vPortSetupTimerInterrupt+0x34>)
 800ab36:	2200      	movs	r2, #0
 800ab38:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab3a:	4b0b      	ldr	r3, [pc, #44]	@ (800ab68 <vPortSetupTimerInterrupt+0x38>)
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab40:	4b0a      	ldr	r3, [pc, #40]	@ (800ab6c <vPortSetupTimerInterrupt+0x3c>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4a0a      	ldr	r2, [pc, #40]	@ (800ab70 <vPortSetupTimerInterrupt+0x40>)
 800ab46:	fba2 2303 	umull	r2, r3, r2, r3
 800ab4a:	099b      	lsrs	r3, r3, #6
 800ab4c:	4a09      	ldr	r2, [pc, #36]	@ (800ab74 <vPortSetupTimerInterrupt+0x44>)
 800ab4e:	3b01      	subs	r3, #1
 800ab50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab52:	4b04      	ldr	r3, [pc, #16]	@ (800ab64 <vPortSetupTimerInterrupt+0x34>)
 800ab54:	2207      	movs	r2, #7
 800ab56:	601a      	str	r2, [r3, #0]
}
 800ab58:	bf00      	nop
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	e000e010 	.word	0xe000e010
 800ab68:	e000e018 	.word	0xe000e018
 800ab6c:	20000000 	.word	0x20000000
 800ab70:	10624dd3 	.word	0x10624dd3
 800ab74:	e000e014 	.word	0xe000e014

0800ab78 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ab78:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ab88 <vPortEnableVFP+0x10>
 800ab7c:	6801      	ldr	r1, [r0, #0]
 800ab7e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ab82:	6001      	str	r1, [r0, #0]
 800ab84:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ab86:	bf00      	nop
 800ab88:	e000ed88 	.word	0xe000ed88

0800ab8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab92:	f3ef 8305 	mrs	r3, IPSR
 800ab96:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2b0f      	cmp	r3, #15
 800ab9c:	d917      	bls.n	800abce <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab9e:	4a1a      	ldr	r2, [pc, #104]	@ (800ac08 <vPortValidateInterruptPriority+0x7c>)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	4413      	add	r3, r2
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aba8:	4b18      	ldr	r3, [pc, #96]	@ (800ac0c <vPortValidateInterruptPriority+0x80>)
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	7afa      	ldrb	r2, [r7, #11]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d20d      	bcs.n	800abce <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800abb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb6:	b672      	cpsid	i
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	b662      	cpsie	i
 800abc6:	607b      	str	r3, [r7, #4]
}
 800abc8:	bf00      	nop
 800abca:	bf00      	nop
 800abcc:	e7fd      	b.n	800abca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800abce:	4b10      	ldr	r3, [pc, #64]	@ (800ac10 <vPortValidateInterruptPriority+0x84>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800abd6:	4b0f      	ldr	r3, [pc, #60]	@ (800ac14 <vPortValidateInterruptPriority+0x88>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d90d      	bls.n	800abfa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800abde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe2:	b672      	cpsid	i
 800abe4:	f383 8811 	msr	BASEPRI, r3
 800abe8:	f3bf 8f6f 	isb	sy
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	b662      	cpsie	i
 800abf2:	603b      	str	r3, [r7, #0]
}
 800abf4:	bf00      	nop
 800abf6:	bf00      	nop
 800abf8:	e7fd      	b.n	800abf6 <vPortValidateInterruptPriority+0x6a>
	}
 800abfa:	bf00      	nop
 800abfc:	3714      	adds	r7, #20
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	e000e3f0 	.word	0xe000e3f0
 800ac0c:	200010a8 	.word	0x200010a8
 800ac10:	e000ed0c 	.word	0xe000ed0c
 800ac14:	200010ac 	.word	0x200010ac

0800ac18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b08a      	sub	sp, #40	@ 0x28
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ac20:	2300      	movs	r3, #0
 800ac22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ac24:	f7fe fd64 	bl	80096f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ac28:	4b5d      	ldr	r3, [pc, #372]	@ (800ada0 <pvPortMalloc+0x188>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d101      	bne.n	800ac34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ac30:	f000 f920 	bl	800ae74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ac34:	4b5b      	ldr	r3, [pc, #364]	@ (800ada4 <pvPortMalloc+0x18c>)
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4013      	ands	r3, r2
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f040 8094 	bne.w	800ad6a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d020      	beq.n	800ac8a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800ac48:	2208      	movs	r2, #8
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f003 0307 	and.w	r3, r3, #7
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d017      	beq.n	800ac8a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f023 0307 	bic.w	r3, r3, #7
 800ac60:	3308      	adds	r3, #8
 800ac62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f003 0307 	and.w	r3, r3, #7
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d00d      	beq.n	800ac8a <pvPortMalloc+0x72>
	__asm volatile
 800ac6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac72:	b672      	cpsid	i
 800ac74:	f383 8811 	msr	BASEPRI, r3
 800ac78:	f3bf 8f6f 	isb	sy
 800ac7c:	f3bf 8f4f 	dsb	sy
 800ac80:	b662      	cpsie	i
 800ac82:	617b      	str	r3, [r7, #20]
}
 800ac84:	bf00      	nop
 800ac86:	bf00      	nop
 800ac88:	e7fd      	b.n	800ac86 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d06c      	beq.n	800ad6a <pvPortMalloc+0x152>
 800ac90:	4b45      	ldr	r3, [pc, #276]	@ (800ada8 <pvPortMalloc+0x190>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d867      	bhi.n	800ad6a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac9a:	4b44      	ldr	r3, [pc, #272]	@ (800adac <pvPortMalloc+0x194>)
 800ac9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac9e:	4b43      	ldr	r3, [pc, #268]	@ (800adac <pvPortMalloc+0x194>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aca4:	e004      	b.n	800acb0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800aca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800acaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800acb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d903      	bls.n	800acc2 <pvPortMalloc+0xaa>
 800acba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1f1      	bne.n	800aca6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800acc2:	4b37      	ldr	r3, [pc, #220]	@ (800ada0 <pvPortMalloc+0x188>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acc8:	429a      	cmp	r2, r3
 800acca:	d04e      	beq.n	800ad6a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800accc:	6a3b      	ldr	r3, [r7, #32]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2208      	movs	r2, #8
 800acd2:	4413      	add	r3, r2
 800acd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800acd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	6a3b      	ldr	r3, [r7, #32]
 800acdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800acde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace0:	685a      	ldr	r2, [r3, #4]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	1ad2      	subs	r2, r2, r3
 800ace6:	2308      	movs	r3, #8
 800ace8:	005b      	lsls	r3, r3, #1
 800acea:	429a      	cmp	r2, r3
 800acec:	d922      	bls.n	800ad34 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800acee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	4413      	add	r3, r2
 800acf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	f003 0307 	and.w	r3, r3, #7
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d00d      	beq.n	800ad1c <pvPortMalloc+0x104>
	__asm volatile
 800ad00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad04:	b672      	cpsid	i
 800ad06:	f383 8811 	msr	BASEPRI, r3
 800ad0a:	f3bf 8f6f 	isb	sy
 800ad0e:	f3bf 8f4f 	dsb	sy
 800ad12:	b662      	cpsie	i
 800ad14:	613b      	str	r3, [r7, #16]
}
 800ad16:	bf00      	nop
 800ad18:	bf00      	nop
 800ad1a:	e7fd      	b.n	800ad18 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ad1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad1e:	685a      	ldr	r2, [r3, #4]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	1ad2      	subs	r2, r2, r3
 800ad24:	69bb      	ldr	r3, [r7, #24]
 800ad26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ad28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ad2e:	69b8      	ldr	r0, [r7, #24]
 800ad30:	f000 f902 	bl	800af38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ad34:	4b1c      	ldr	r3, [pc, #112]	@ (800ada8 <pvPortMalloc+0x190>)
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	1ad3      	subs	r3, r2, r3
 800ad3e:	4a1a      	ldr	r2, [pc, #104]	@ (800ada8 <pvPortMalloc+0x190>)
 800ad40:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ad42:	4b19      	ldr	r3, [pc, #100]	@ (800ada8 <pvPortMalloc+0x190>)
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	4b1a      	ldr	r3, [pc, #104]	@ (800adb0 <pvPortMalloc+0x198>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d203      	bcs.n	800ad56 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ad4e:	4b16      	ldr	r3, [pc, #88]	@ (800ada8 <pvPortMalloc+0x190>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a17      	ldr	r2, [pc, #92]	@ (800adb0 <pvPortMalloc+0x198>)
 800ad54:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ad56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad58:	685a      	ldr	r2, [r3, #4]
 800ad5a:	4b12      	ldr	r3, [pc, #72]	@ (800ada4 <pvPortMalloc+0x18c>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	431a      	orrs	r2, r3
 800ad60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad62:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ad64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad66:	2200      	movs	r2, #0
 800ad68:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ad6a:	f7fe fccf 	bl	800970c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	f003 0307 	and.w	r3, r3, #7
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00d      	beq.n	800ad94 <pvPortMalloc+0x17c>
	__asm volatile
 800ad78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad7c:	b672      	cpsid	i
 800ad7e:	f383 8811 	msr	BASEPRI, r3
 800ad82:	f3bf 8f6f 	isb	sy
 800ad86:	f3bf 8f4f 	dsb	sy
 800ad8a:	b662      	cpsie	i
 800ad8c:	60fb      	str	r3, [r7, #12]
}
 800ad8e:	bf00      	nop
 800ad90:	bf00      	nop
 800ad92:	e7fd      	b.n	800ad90 <pvPortMalloc+0x178>
	return pvReturn;
 800ad94:	69fb      	ldr	r3, [r7, #28]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3728      	adds	r7, #40	@ 0x28
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	20004cb8 	.word	0x20004cb8
 800ada4:	20004cc4 	.word	0x20004cc4
 800ada8:	20004cbc 	.word	0x20004cbc
 800adac:	20004cb0 	.word	0x20004cb0
 800adb0:	20004cc0 	.word	0x20004cc0

0800adb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b086      	sub	sp, #24
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d04e      	beq.n	800ae64 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800adc6:	2308      	movs	r3, #8
 800adc8:	425b      	negs	r3, r3
 800adca:	697a      	ldr	r2, [r7, #20]
 800adcc:	4413      	add	r3, r2
 800adce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	685a      	ldr	r2, [r3, #4]
 800add8:	4b24      	ldr	r3, [pc, #144]	@ (800ae6c <vPortFree+0xb8>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4013      	ands	r3, r2
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d10d      	bne.n	800adfe <vPortFree+0x4a>
	__asm volatile
 800ade2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ade6:	b672      	cpsid	i
 800ade8:	f383 8811 	msr	BASEPRI, r3
 800adec:	f3bf 8f6f 	isb	sy
 800adf0:	f3bf 8f4f 	dsb	sy
 800adf4:	b662      	cpsie	i
 800adf6:	60fb      	str	r3, [r7, #12]
}
 800adf8:	bf00      	nop
 800adfa:	bf00      	nop
 800adfc:	e7fd      	b.n	800adfa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00d      	beq.n	800ae22 <vPortFree+0x6e>
	__asm volatile
 800ae06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae0a:	b672      	cpsid	i
 800ae0c:	f383 8811 	msr	BASEPRI, r3
 800ae10:	f3bf 8f6f 	isb	sy
 800ae14:	f3bf 8f4f 	dsb	sy
 800ae18:	b662      	cpsie	i
 800ae1a:	60bb      	str	r3, [r7, #8]
}
 800ae1c:	bf00      	nop
 800ae1e:	bf00      	nop
 800ae20:	e7fd      	b.n	800ae1e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	685a      	ldr	r2, [r3, #4]
 800ae26:	4b11      	ldr	r3, [pc, #68]	@ (800ae6c <vPortFree+0xb8>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4013      	ands	r3, r2
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d019      	beq.n	800ae64 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d115      	bne.n	800ae64 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	685a      	ldr	r2, [r3, #4]
 800ae3c:	4b0b      	ldr	r3, [pc, #44]	@ (800ae6c <vPortFree+0xb8>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	43db      	mvns	r3, r3
 800ae42:	401a      	ands	r2, r3
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ae48:	f7fe fc52 	bl	80096f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	685a      	ldr	r2, [r3, #4]
 800ae50:	4b07      	ldr	r3, [pc, #28]	@ (800ae70 <vPortFree+0xbc>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4413      	add	r3, r2
 800ae56:	4a06      	ldr	r2, [pc, #24]	@ (800ae70 <vPortFree+0xbc>)
 800ae58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ae5a:	6938      	ldr	r0, [r7, #16]
 800ae5c:	f000 f86c 	bl	800af38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ae60:	f7fe fc54 	bl	800970c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ae64:	bf00      	nop
 800ae66:	3718      	adds	r7, #24
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	20004cc4 	.word	0x20004cc4
 800ae70:	20004cbc 	.word	0x20004cbc

0800ae74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ae74:	b480      	push	{r7}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae7a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ae7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae80:	4b27      	ldr	r3, [pc, #156]	@ (800af20 <prvHeapInit+0xac>)
 800ae82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f003 0307 	and.w	r3, r3, #7
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00c      	beq.n	800aea8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	3307      	adds	r3, #7
 800ae92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f023 0307 	bic.w	r3, r3, #7
 800ae9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae9c:	68ba      	ldr	r2, [r7, #8]
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	1ad3      	subs	r3, r2, r3
 800aea2:	4a1f      	ldr	r2, [pc, #124]	@ (800af20 <prvHeapInit+0xac>)
 800aea4:	4413      	add	r3, r2
 800aea6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aeac:	4a1d      	ldr	r2, [pc, #116]	@ (800af24 <prvHeapInit+0xb0>)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aeb2:	4b1c      	ldr	r3, [pc, #112]	@ (800af24 <prvHeapInit+0xb0>)
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	4413      	add	r3, r2
 800aebe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aec0:	2208      	movs	r2, #8
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	1a9b      	subs	r3, r3, r2
 800aec6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f023 0307 	bic.w	r3, r3, #7
 800aece:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	4a15      	ldr	r2, [pc, #84]	@ (800af28 <prvHeapInit+0xb4>)
 800aed4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aed6:	4b14      	ldr	r3, [pc, #80]	@ (800af28 <prvHeapInit+0xb4>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	2200      	movs	r2, #0
 800aedc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aede:	4b12      	ldr	r3, [pc, #72]	@ (800af28 <prvHeapInit+0xb4>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2200      	movs	r2, #0
 800aee4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	68fa      	ldr	r2, [r7, #12]
 800aeee:	1ad2      	subs	r2, r2, r3
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aef4:	4b0c      	ldr	r3, [pc, #48]	@ (800af28 <prvHeapInit+0xb4>)
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	4a0a      	ldr	r2, [pc, #40]	@ (800af2c <prvHeapInit+0xb8>)
 800af02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	4a09      	ldr	r2, [pc, #36]	@ (800af30 <prvHeapInit+0xbc>)
 800af0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800af0c:	4b09      	ldr	r3, [pc, #36]	@ (800af34 <prvHeapInit+0xc0>)
 800af0e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800af12:	601a      	str	r2, [r3, #0]
}
 800af14:	bf00      	nop
 800af16:	3714      	adds	r7, #20
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr
 800af20:	200010b0 	.word	0x200010b0
 800af24:	20004cb0 	.word	0x20004cb0
 800af28:	20004cb8 	.word	0x20004cb8
 800af2c:	20004cc0 	.word	0x20004cc0
 800af30:	20004cbc 	.word	0x20004cbc
 800af34:	20004cc4 	.word	0x20004cc4

0800af38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800af38:	b480      	push	{r7}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800af40:	4b28      	ldr	r3, [pc, #160]	@ (800afe4 <prvInsertBlockIntoFreeList+0xac>)
 800af42:	60fb      	str	r3, [r7, #12]
 800af44:	e002      	b.n	800af4c <prvInsertBlockIntoFreeList+0x14>
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	60fb      	str	r3, [r7, #12]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	429a      	cmp	r2, r3
 800af54:	d8f7      	bhi.n	800af46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	68ba      	ldr	r2, [r7, #8]
 800af60:	4413      	add	r3, r2
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	429a      	cmp	r2, r3
 800af66:	d108      	bne.n	800af7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	685a      	ldr	r2, [r3, #4]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	441a      	add	r2, r3
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	68ba      	ldr	r2, [r7, #8]
 800af84:	441a      	add	r2, r3
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d118      	bne.n	800afc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	4b15      	ldr	r3, [pc, #84]	@ (800afe8 <prvInsertBlockIntoFreeList+0xb0>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	429a      	cmp	r2, r3
 800af98:	d00d      	beq.n	800afb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	685a      	ldr	r2, [r3, #4]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	441a      	add	r2, r3
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	601a      	str	r2, [r3, #0]
 800afb4:	e008      	b.n	800afc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800afb6:	4b0c      	ldr	r3, [pc, #48]	@ (800afe8 <prvInsertBlockIntoFreeList+0xb0>)
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	601a      	str	r2, [r3, #0]
 800afbe:	e003      	b.n	800afc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d002      	beq.n	800afd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afd6:	bf00      	nop
 800afd8:	3714      	adds	r7, #20
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr
 800afe2:	bf00      	nop
 800afe4:	20004cb0 	.word	0x20004cb0
 800afe8:	20004cb8 	.word	0x20004cb8

0800afec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800aff0:	2200      	movs	r2, #0
 800aff2:	4912      	ldr	r1, [pc, #72]	@ (800b03c <MX_USB_DEVICE_Init+0x50>)
 800aff4:	4812      	ldr	r0, [pc, #72]	@ (800b040 <MX_USB_DEVICE_Init+0x54>)
 800aff6:	f7fb fea7 	bl	8006d48 <USBD_Init>
 800affa:	4603      	mov	r3, r0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d001      	beq.n	800b004 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b000:	f7f5 fc6c 	bl	80008dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b004:	490f      	ldr	r1, [pc, #60]	@ (800b044 <MX_USB_DEVICE_Init+0x58>)
 800b006:	480e      	ldr	r0, [pc, #56]	@ (800b040 <MX_USB_DEVICE_Init+0x54>)
 800b008:	f7fb fece 	bl	8006da8 <USBD_RegisterClass>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d001      	beq.n	800b016 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b012:	f7f5 fc63 	bl	80008dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b016:	490c      	ldr	r1, [pc, #48]	@ (800b048 <MX_USB_DEVICE_Init+0x5c>)
 800b018:	4809      	ldr	r0, [pc, #36]	@ (800b040 <MX_USB_DEVICE_Init+0x54>)
 800b01a:	f7fb fdc5 	bl	8006ba8 <USBD_CDC_RegisterInterface>
 800b01e:	4603      	mov	r3, r0
 800b020:	2b00      	cmp	r3, #0
 800b022:	d001      	beq.n	800b028 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b024:	f7f5 fc5a 	bl	80008dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b028:	4805      	ldr	r0, [pc, #20]	@ (800b040 <MX_USB_DEVICE_Init+0x54>)
 800b02a:	f7fb fef3 	bl	8006e14 <USBD_Start>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d001      	beq.n	800b038 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b034:	f7f5 fc52 	bl	80008dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b038:	bf00      	nop
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	200000b0 	.word	0x200000b0
 800b040:	20004cc8 	.word	0x20004cc8
 800b044:	20000018 	.word	0x20000018
 800b048:	2000009c 	.word	0x2000009c

0800b04c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b050:	2200      	movs	r2, #0
 800b052:	4905      	ldr	r1, [pc, #20]	@ (800b068 <CDC_Init_FS+0x1c>)
 800b054:	4805      	ldr	r0, [pc, #20]	@ (800b06c <CDC_Init_FS+0x20>)
 800b056:	f7fb fdc1 	bl	8006bdc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b05a:	4905      	ldr	r1, [pc, #20]	@ (800b070 <CDC_Init_FS+0x24>)
 800b05c:	4803      	ldr	r0, [pc, #12]	@ (800b06c <CDC_Init_FS+0x20>)
 800b05e:	f7fb fddf 	bl	8006c20 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b062:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b064:	4618      	mov	r0, r3
 800b066:	bd80      	pop	{r7, pc}
 800b068:	200057a4 	.word	0x200057a4
 800b06c:	20004cc8 	.word	0x20004cc8
 800b070:	20004fa4 	.word	0x20004fa4

0800b074 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b074:	b480      	push	{r7}
 800b076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b078:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	4603      	mov	r3, r0
 800b08c:	6039      	str	r1, [r7, #0]
 800b08e:	71fb      	strb	r3, [r7, #7]
 800b090:	4613      	mov	r3, r2
 800b092:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b094:	79fb      	ldrb	r3, [r7, #7]
 800b096:	2b23      	cmp	r3, #35	@ 0x23
 800b098:	d84a      	bhi.n	800b130 <CDC_Control_FS+0xac>
 800b09a:	a201      	add	r2, pc, #4	@ (adr r2, 800b0a0 <CDC_Control_FS+0x1c>)
 800b09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a0:	0800b131 	.word	0x0800b131
 800b0a4:	0800b131 	.word	0x0800b131
 800b0a8:	0800b131 	.word	0x0800b131
 800b0ac:	0800b131 	.word	0x0800b131
 800b0b0:	0800b131 	.word	0x0800b131
 800b0b4:	0800b131 	.word	0x0800b131
 800b0b8:	0800b131 	.word	0x0800b131
 800b0bc:	0800b131 	.word	0x0800b131
 800b0c0:	0800b131 	.word	0x0800b131
 800b0c4:	0800b131 	.word	0x0800b131
 800b0c8:	0800b131 	.word	0x0800b131
 800b0cc:	0800b131 	.word	0x0800b131
 800b0d0:	0800b131 	.word	0x0800b131
 800b0d4:	0800b131 	.word	0x0800b131
 800b0d8:	0800b131 	.word	0x0800b131
 800b0dc:	0800b131 	.word	0x0800b131
 800b0e0:	0800b131 	.word	0x0800b131
 800b0e4:	0800b131 	.word	0x0800b131
 800b0e8:	0800b131 	.word	0x0800b131
 800b0ec:	0800b131 	.word	0x0800b131
 800b0f0:	0800b131 	.word	0x0800b131
 800b0f4:	0800b131 	.word	0x0800b131
 800b0f8:	0800b131 	.word	0x0800b131
 800b0fc:	0800b131 	.word	0x0800b131
 800b100:	0800b131 	.word	0x0800b131
 800b104:	0800b131 	.word	0x0800b131
 800b108:	0800b131 	.word	0x0800b131
 800b10c:	0800b131 	.word	0x0800b131
 800b110:	0800b131 	.word	0x0800b131
 800b114:	0800b131 	.word	0x0800b131
 800b118:	0800b131 	.word	0x0800b131
 800b11c:	0800b131 	.word	0x0800b131
 800b120:	0800b131 	.word	0x0800b131
 800b124:	0800b131 	.word	0x0800b131
 800b128:	0800b131 	.word	0x0800b131
 800b12c:	0800b131 	.word	0x0800b131
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b130:	bf00      	nop
  }

  return (USBD_OK);
 800b132:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b134:	4618      	mov	r0, r3
 800b136:	370c      	adds	r7, #12
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b14a:	6879      	ldr	r1, [r7, #4]
 800b14c:	4805      	ldr	r0, [pc, #20]	@ (800b164 <CDC_Receive_FS+0x24>)
 800b14e:	f7fb fd67 	bl	8006c20 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b152:	4804      	ldr	r0, [pc, #16]	@ (800b164 <CDC_Receive_FS+0x24>)
 800b154:	f7fb fdc2 	bl	8006cdc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b158:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3708      	adds	r7, #8
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	20004cc8 	.word	0x20004cc8

0800b168 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	460b      	mov	r3, r1
 800b172:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b174:	2300      	movs	r3, #0
 800b176:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b178:	4b0d      	ldr	r3, [pc, #52]	@ (800b1b0 <CDC_Transmit_FS+0x48>)
 800b17a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b17e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b186:	2b00      	cmp	r3, #0
 800b188:	d001      	beq.n	800b18e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b18a:	2301      	movs	r3, #1
 800b18c:	e00b      	b.n	800b1a6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b18e:	887b      	ldrh	r3, [r7, #2]
 800b190:	461a      	mov	r2, r3
 800b192:	6879      	ldr	r1, [r7, #4]
 800b194:	4806      	ldr	r0, [pc, #24]	@ (800b1b0 <CDC_Transmit_FS+0x48>)
 800b196:	f7fb fd21 	bl	8006bdc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b19a:	4805      	ldr	r0, [pc, #20]	@ (800b1b0 <CDC_Transmit_FS+0x48>)
 800b19c:	f7fb fd5e 	bl	8006c5c <USBD_CDC_TransmitPacket>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	20004cc8 	.word	0x20004cc8

0800b1b4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b087      	sub	sp, #28
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	4613      	mov	r3, r2
 800b1c0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b1c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	371c      	adds	r7, #28
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr
	...

0800b1d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	4603      	mov	r3, r0
 800b1e0:	6039      	str	r1, [r7, #0]
 800b1e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	2212      	movs	r2, #18
 800b1e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b1ea:	4b03      	ldr	r3, [pc, #12]	@ (800b1f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	370c      	adds	r7, #12
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr
 800b1f8:	200000d0 	.word	0x200000d0

0800b1fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	4603      	mov	r3, r0
 800b204:	6039      	str	r1, [r7, #0]
 800b206:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	2204      	movs	r2, #4
 800b20c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b20e:	4b03      	ldr	r3, [pc, #12]	@ (800b21c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b210:	4618      	mov	r0, r3
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr
 800b21c:	200000f0 	.word	0x200000f0

0800b220 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
 800b226:	4603      	mov	r3, r0
 800b228:	6039      	str	r1, [r7, #0]
 800b22a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b22c:	79fb      	ldrb	r3, [r7, #7]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d105      	bne.n	800b23e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b232:	683a      	ldr	r2, [r7, #0]
 800b234:	4907      	ldr	r1, [pc, #28]	@ (800b254 <USBD_FS_ProductStrDescriptor+0x34>)
 800b236:	4808      	ldr	r0, [pc, #32]	@ (800b258 <USBD_FS_ProductStrDescriptor+0x38>)
 800b238:	f7fc ffc0 	bl	80081bc <USBD_GetString>
 800b23c:	e004      	b.n	800b248 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b23e:	683a      	ldr	r2, [r7, #0]
 800b240:	4904      	ldr	r1, [pc, #16]	@ (800b254 <USBD_FS_ProductStrDescriptor+0x34>)
 800b242:	4805      	ldr	r0, [pc, #20]	@ (800b258 <USBD_FS_ProductStrDescriptor+0x38>)
 800b244:	f7fc ffba 	bl	80081bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b248:	4b02      	ldr	r3, [pc, #8]	@ (800b254 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3708      	adds	r7, #8
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	20005fa4 	.word	0x20005fa4
 800b258:	0800beec 	.word	0x0800beec

0800b25c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	4603      	mov	r3, r0
 800b264:	6039      	str	r1, [r7, #0]
 800b266:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b268:	683a      	ldr	r2, [r7, #0]
 800b26a:	4904      	ldr	r1, [pc, #16]	@ (800b27c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b26c:	4804      	ldr	r0, [pc, #16]	@ (800b280 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b26e:	f7fc ffa5 	bl	80081bc <USBD_GetString>
  return USBD_StrDesc;
 800b272:	4b02      	ldr	r3, [pc, #8]	@ (800b27c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b274:	4618      	mov	r0, r3
 800b276:	3708      	adds	r7, #8
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	20005fa4 	.word	0x20005fa4
 800b280:	0800bf04 	.word	0x0800bf04

0800b284 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	4603      	mov	r3, r0
 800b28c:	6039      	str	r1, [r7, #0]
 800b28e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	221a      	movs	r2, #26
 800b294:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b296:	f000 f855 	bl	800b344 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b29a:	4b02      	ldr	r3, [pc, #8]	@ (800b2a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3708      	adds	r7, #8
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}
 800b2a4:	200000f4 	.word	0x200000f4

0800b2a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	6039      	str	r1, [r7, #0]
 800b2b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b2b4:	79fb      	ldrb	r3, [r7, #7]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d105      	bne.n	800b2c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b2ba:	683a      	ldr	r2, [r7, #0]
 800b2bc:	4907      	ldr	r1, [pc, #28]	@ (800b2dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b2be:	4808      	ldr	r0, [pc, #32]	@ (800b2e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b2c0:	f7fc ff7c 	bl	80081bc <USBD_GetString>
 800b2c4:	e004      	b.n	800b2d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b2c6:	683a      	ldr	r2, [r7, #0]
 800b2c8:	4904      	ldr	r1, [pc, #16]	@ (800b2dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b2ca:	4805      	ldr	r0, [pc, #20]	@ (800b2e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b2cc:	f7fc ff76 	bl	80081bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b2d0:	4b02      	ldr	r3, [pc, #8]	@ (800b2dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3708      	adds	r7, #8
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	20005fa4 	.word	0x20005fa4
 800b2e0:	0800bf18 	.word	0x0800bf18

0800b2e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	6039      	str	r1, [r7, #0]
 800b2ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b2f0:	79fb      	ldrb	r3, [r7, #7]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d105      	bne.n	800b302 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b2f6:	683a      	ldr	r2, [r7, #0]
 800b2f8:	4907      	ldr	r1, [pc, #28]	@ (800b318 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b2fa:	4808      	ldr	r0, [pc, #32]	@ (800b31c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b2fc:	f7fc ff5e 	bl	80081bc <USBD_GetString>
 800b300:	e004      	b.n	800b30c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b302:	683a      	ldr	r2, [r7, #0]
 800b304:	4904      	ldr	r1, [pc, #16]	@ (800b318 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b306:	4805      	ldr	r0, [pc, #20]	@ (800b31c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b308:	f7fc ff58 	bl	80081bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b30c:	4b02      	ldr	r3, [pc, #8]	@ (800b318 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3708      	adds	r7, #8
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	20005fa4 	.word	0x20005fa4
 800b31c:	0800bf24 	.word	0x0800bf24

0800b320 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b320:	b480      	push	{r7}
 800b322:	b083      	sub	sp, #12
 800b324:	af00      	add	r7, sp, #0
 800b326:	4603      	mov	r3, r0
 800b328:	6039      	str	r1, [r7, #0]
 800b32a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	220c      	movs	r2, #12
 800b330:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b332:	4b03      	ldr	r3, [pc, #12]	@ (800b340 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b334:	4618      	mov	r0, r3
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr
 800b340:	200000e4 	.word	0x200000e4

0800b344 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b34a:	4b0f      	ldr	r3, [pc, #60]	@ (800b388 <Get_SerialNum+0x44>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b350:	4b0e      	ldr	r3, [pc, #56]	@ (800b38c <Get_SerialNum+0x48>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b356:	4b0e      	ldr	r3, [pc, #56]	@ (800b390 <Get_SerialNum+0x4c>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b35c:	68fa      	ldr	r2, [r7, #12]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4413      	add	r3, r2
 800b362:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d009      	beq.n	800b37e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b36a:	2208      	movs	r2, #8
 800b36c:	4909      	ldr	r1, [pc, #36]	@ (800b394 <Get_SerialNum+0x50>)
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	f000 f814 	bl	800b39c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b374:	2204      	movs	r2, #4
 800b376:	4908      	ldr	r1, [pc, #32]	@ (800b398 <Get_SerialNum+0x54>)
 800b378:	68b8      	ldr	r0, [r7, #8]
 800b37a:	f000 f80f 	bl	800b39c <IntToUnicode>
  }
}
 800b37e:	bf00      	nop
 800b380:	3710      	adds	r7, #16
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	1ff0f420 	.word	0x1ff0f420
 800b38c:	1ff0f424 	.word	0x1ff0f424
 800b390:	1ff0f428 	.word	0x1ff0f428
 800b394:	200000f6 	.word	0x200000f6
 800b398:	20000106 	.word	0x20000106

0800b39c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b087      	sub	sp, #28
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	4613      	mov	r3, r2
 800b3a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	75fb      	strb	r3, [r7, #23]
 800b3b2:	e027      	b.n	800b404 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	0f1b      	lsrs	r3, r3, #28
 800b3b8:	2b09      	cmp	r3, #9
 800b3ba:	d80b      	bhi.n	800b3d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	0f1b      	lsrs	r3, r3, #28
 800b3c0:	b2da      	uxtb	r2, r3
 800b3c2:	7dfb      	ldrb	r3, [r7, #23]
 800b3c4:	005b      	lsls	r3, r3, #1
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	440b      	add	r3, r1
 800b3cc:	3230      	adds	r2, #48	@ 0x30
 800b3ce:	b2d2      	uxtb	r2, r2
 800b3d0:	701a      	strb	r2, [r3, #0]
 800b3d2:	e00a      	b.n	800b3ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	0f1b      	lsrs	r3, r3, #28
 800b3d8:	b2da      	uxtb	r2, r3
 800b3da:	7dfb      	ldrb	r3, [r7, #23]
 800b3dc:	005b      	lsls	r3, r3, #1
 800b3de:	4619      	mov	r1, r3
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	440b      	add	r3, r1
 800b3e4:	3237      	adds	r2, #55	@ 0x37
 800b3e6:	b2d2      	uxtb	r2, r2
 800b3e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	011b      	lsls	r3, r3, #4
 800b3ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b3f0:	7dfb      	ldrb	r3, [r7, #23]
 800b3f2:	005b      	lsls	r3, r3, #1
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	68ba      	ldr	r2, [r7, #8]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b3fe:	7dfb      	ldrb	r3, [r7, #23]
 800b400:	3301      	adds	r3, #1
 800b402:	75fb      	strb	r3, [r7, #23]
 800b404:	7dfa      	ldrb	r2, [r7, #23]
 800b406:	79fb      	ldrb	r3, [r7, #7]
 800b408:	429a      	cmp	r2, r3
 800b40a:	d3d3      	bcc.n	800b3b4 <IntToUnicode+0x18>
  }
}
 800b40c:	bf00      	nop
 800b40e:	bf00      	nop
 800b410:	371c      	adds	r7, #28
 800b412:	46bd      	mov	sp, r7
 800b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b418:	4770      	bx	lr
	...

0800b41c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b0ac      	sub	sp, #176	@ 0xb0
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b424:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800b428:	2200      	movs	r2, #0
 800b42a:	601a      	str	r2, [r3, #0]
 800b42c:	605a      	str	r2, [r3, #4]
 800b42e:	609a      	str	r2, [r3, #8]
 800b430:	60da      	str	r2, [r3, #12]
 800b432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b434:	f107 0318 	add.w	r3, r7, #24
 800b438:	2284      	movs	r2, #132	@ 0x84
 800b43a:	2100      	movs	r1, #0
 800b43c:	4618      	mov	r0, r3
 800b43e:	f000 fc29 	bl	800bc94 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b44a:	d160      	bne.n	800b50e <HAL_PCD_MspInit+0xf2>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800b44c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b450:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800b452:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800b456:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800b458:	2305      	movs	r3, #5
 800b45a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800b45c:	2302      	movs	r3, #2
 800b45e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800b460:	2303      	movs	r3, #3
 800b462:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800b464:	2301      	movs	r3, #1
 800b466:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800b468:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b46c:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800b46e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b472:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b476:	f107 0318 	add.w	r3, r7, #24
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7f7 ffa2 	bl	80033c4 <HAL_RCCEx_PeriphCLKConfig>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d001      	beq.n	800b48a <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 800b486:	f7f5 fa29 	bl	80008dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b48a:	4b23      	ldr	r3, [pc, #140]	@ (800b518 <HAL_PCD_MspInit+0xfc>)
 800b48c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b48e:	4a22      	ldr	r2, [pc, #136]	@ (800b518 <HAL_PCD_MspInit+0xfc>)
 800b490:	f043 0301 	orr.w	r3, r3, #1
 800b494:	6313      	str	r3, [r2, #48]	@ 0x30
 800b496:	4b20      	ldr	r3, [pc, #128]	@ (800b518 <HAL_PCD_MspInit+0xfc>)
 800b498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b49a:	f003 0301 	and.w	r3, r3, #1
 800b49e:	617b      	str	r3, [r7, #20]
 800b4a0:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800b4a2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b4a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4aa:	2302      	movs	r3, #2
 800b4ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4b6:	2303      	movs	r3, #3
 800b4b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b4bc:	230a      	movs	r3, #10
 800b4be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b4c2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	4814      	ldr	r0, [pc, #80]	@ (800b51c <HAL_PCD_MspInit+0x100>)
 800b4ca:	f7f5 fdd7 	bl	800107c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b4ce:	4b12      	ldr	r3, [pc, #72]	@ (800b518 <HAL_PCD_MspInit+0xfc>)
 800b4d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4d2:	4a11      	ldr	r2, [pc, #68]	@ (800b518 <HAL_PCD_MspInit+0xfc>)
 800b4d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4d8:	6353      	str	r3, [r2, #52]	@ 0x34
 800b4da:	4b0f      	ldr	r3, [pc, #60]	@ (800b518 <HAL_PCD_MspInit+0xfc>)
 800b4dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4e2:	613b      	str	r3, [r7, #16]
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	4b0c      	ldr	r3, [pc, #48]	@ (800b518 <HAL_PCD_MspInit+0xfc>)
 800b4e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4ea:	4a0b      	ldr	r2, [pc, #44]	@ (800b518 <HAL_PCD_MspInit+0xfc>)
 800b4ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b4f0:	6453      	str	r3, [r2, #68]	@ 0x44
 800b4f2:	4b09      	ldr	r3, [pc, #36]	@ (800b518 <HAL_PCD_MspInit+0xfc>)
 800b4f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b4fa:	60fb      	str	r3, [r7, #12]
 800b4fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b4fe:	2200      	movs	r2, #0
 800b500:	2105      	movs	r1, #5
 800b502:	2043      	movs	r0, #67	@ 0x43
 800b504:	f7f5 fd90 	bl	8001028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b508:	2043      	movs	r0, #67	@ 0x43
 800b50a:	f7f5 fda9 	bl	8001060 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b50e:	bf00      	nop
 800b510:	37b0      	adds	r7, #176	@ 0xb0
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	40023800 	.word	0x40023800
 800b51c:	40020000 	.word	0x40020000

0800b520 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	@ 0x504
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800b534:	4619      	mov	r1, r3
 800b536:	4610      	mov	r0, r2
 800b538:	f7fb fcb9 	bl	8006eae <USBD_LL_SetupStage>
}
 800b53c:	bf00      	nop
 800b53e:	3708      	adds	r7, #8
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	460b      	mov	r3, r1
 800b54e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 0504 	ldr.w	r0, [r3, #1284]	@ 0x504
 800b556:	78fa      	ldrb	r2, [r7, #3]
 800b558:	6879      	ldr	r1, [r7, #4]
 800b55a:	4613      	mov	r3, r2
 800b55c:	00db      	lsls	r3, r3, #3
 800b55e:	4413      	add	r3, r2
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	440b      	add	r3, r1
 800b564:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	78fb      	ldrb	r3, [r7, #3]
 800b56c:	4619      	mov	r1, r3
 800b56e:	f7fb fcf3 	bl	8006f58 <USBD_LL_DataOutStage>
}
 800b572:	bf00      	nop
 800b574:	3708      	adds	r7, #8
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}

0800b57a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b082      	sub	sp, #8
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
 800b582:	460b      	mov	r3, r1
 800b584:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8d3 0504 	ldr.w	r0, [r3, #1284]	@ 0x504
 800b58c:	78fa      	ldrb	r2, [r7, #3]
 800b58e:	6879      	ldr	r1, [r7, #4]
 800b590:	4613      	mov	r3, r2
 800b592:	00db      	lsls	r3, r3, #3
 800b594:	4413      	add	r3, r2
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	440b      	add	r3, r1
 800b59a:	334c      	adds	r3, #76	@ 0x4c
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	78fb      	ldrb	r3, [r7, #3]
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	f7fb fd8c 	bl	80070be <USBD_LL_DataInStage>
}
 800b5a6:	bf00      	nop
 800b5a8:	3708      	adds	r7, #8
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b082      	sub	sp, #8
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7fb fec0 	bl	8007342 <USBD_LL_SOF>
}
 800b5c2:	bf00      	nop
 800b5c4:	3708      	adds	r7, #8
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b084      	sub	sp, #16
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	68db      	ldr	r3, [r3, #12]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d102      	bne.n	800b5e4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	73fb      	strb	r3, [r7, #15]
 800b5e2:	e008      	b.n	800b5f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	68db      	ldr	r3, [r3, #12]
 800b5e8:	2b02      	cmp	r3, #2
 800b5ea:	d102      	bne.n	800b5f2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	73fb      	strb	r3, [r7, #15]
 800b5f0:	e001      	b.n	800b5f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b5f2:	f7f5 f973 	bl	80008dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800b5fc:	7bfa      	ldrb	r2, [r7, #15]
 800b5fe:	4611      	mov	r1, r2
 800b600:	4618      	mov	r0, r3
 800b602:	f7fb fe60 	bl	80072c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7fb fe08 	bl	8007222 <USBD_LL_Reset>
}
 800b612:	bf00      	nop
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
	...

0800b61c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7fb fe5b 	bl	80072e6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	6812      	ldr	r2, [r2, #0]
 800b63e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b642:	f043 0301 	orr.w	r3, r3, #1
 800b646:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6a1b      	ldr	r3, [r3, #32]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d005      	beq.n	800b65c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b650:	4b04      	ldr	r3, [pc, #16]	@ (800b664 <HAL_PCD_SuspendCallback+0x48>)
 800b652:	691b      	ldr	r3, [r3, #16]
 800b654:	4a03      	ldr	r2, [pc, #12]	@ (800b664 <HAL_PCD_SuspendCallback+0x48>)
 800b656:	f043 0306 	orr.w	r3, r3, #6
 800b65a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b65c:	bf00      	nop
 800b65e:	3708      	adds	r7, #8
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	e000ed00 	.word	0xe000ed00

0800b668 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800b676:	4618      	mov	r0, r3
 800b678:	f7fb fe4b 	bl	8007312 <USBD_LL_Resume>
}
 800b67c:	bf00      	nop
 800b67e:	3708      	adds	r7, #8
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	460b      	mov	r3, r1
 800b68e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800b696:	78fa      	ldrb	r2, [r7, #3]
 800b698:	4611      	mov	r1, r2
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7fb fea3 	bl	80073e6 <USBD_LL_IsoOUTIncomplete>
}
 800b6a0:	bf00      	nop
 800b6a2:	3708      	adds	r7, #8
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800b6ba:	78fa      	ldrb	r2, [r7, #3]
 800b6bc:	4611      	mov	r1, r2
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7fb fe5f 	bl	8007382 <USBD_LL_IsoINIncomplete>
}
 800b6c4:	bf00      	nop
 800b6c6:	3708      	adds	r7, #8
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7fb feb5 	bl	800744a <USBD_LL_DevConnected>
}
 800b6e0:	bf00      	nop
 800b6e2:	3708      	adds	r7, #8
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7fb feb2 	bl	8007460 <USBD_LL_DevDisconnected>
}
 800b6fc:	bf00      	nop
 800b6fe:	3708      	adds	r7, #8
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}

0800b704 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d13c      	bne.n	800b78e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b714:	4a20      	ldr	r2, [pc, #128]	@ (800b798 <USBD_LL_Init+0x94>)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4a1e      	ldr	r2, [pc, #120]	@ (800b798 <USBD_LL_Init+0x94>)
 800b720:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b724:	4b1c      	ldr	r3, [pc, #112]	@ (800b798 <USBD_LL_Init+0x94>)
 800b726:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b72a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b72c:	4b1a      	ldr	r3, [pc, #104]	@ (800b798 <USBD_LL_Init+0x94>)
 800b72e:	2206      	movs	r2, #6
 800b730:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b732:	4b19      	ldr	r3, [pc, #100]	@ (800b798 <USBD_LL_Init+0x94>)
 800b734:	2202      	movs	r2, #2
 800b736:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b738:	4b17      	ldr	r3, [pc, #92]	@ (800b798 <USBD_LL_Init+0x94>)
 800b73a:	2200      	movs	r2, #0
 800b73c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b73e:	4b16      	ldr	r3, [pc, #88]	@ (800b798 <USBD_LL_Init+0x94>)
 800b740:	2202      	movs	r2, #2
 800b742:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b744:	4b14      	ldr	r3, [pc, #80]	@ (800b798 <USBD_LL_Init+0x94>)
 800b746:	2200      	movs	r2, #0
 800b748:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b74a:	4b13      	ldr	r3, [pc, #76]	@ (800b798 <USBD_LL_Init+0x94>)
 800b74c:	2200      	movs	r2, #0
 800b74e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b750:	4b11      	ldr	r3, [pc, #68]	@ (800b798 <USBD_LL_Init+0x94>)
 800b752:	2200      	movs	r2, #0
 800b754:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b756:	4b10      	ldr	r3, [pc, #64]	@ (800b798 <USBD_LL_Init+0x94>)
 800b758:	2200      	movs	r2, #0
 800b75a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b75c:	4b0e      	ldr	r3, [pc, #56]	@ (800b798 <USBD_LL_Init+0x94>)
 800b75e:	2200      	movs	r2, #0
 800b760:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b762:	480d      	ldr	r0, [pc, #52]	@ (800b798 <USBD_LL_Init+0x94>)
 800b764:	f7f5 fe69 	bl	800143a <HAL_PCD_Init>
 800b768:	4603      	mov	r3, r0
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d001      	beq.n	800b772 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b76e:	f7f5 f8b5 	bl	80008dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b772:	2180      	movs	r1, #128	@ 0x80
 800b774:	4808      	ldr	r0, [pc, #32]	@ (800b798 <USBD_LL_Init+0x94>)
 800b776:	f7f7 f8e4 	bl	8002942 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b77a:	2240      	movs	r2, #64	@ 0x40
 800b77c:	2100      	movs	r1, #0
 800b77e:	4806      	ldr	r0, [pc, #24]	@ (800b798 <USBD_LL_Init+0x94>)
 800b780:	f7f7 f898 	bl	80028b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b784:	2280      	movs	r2, #128	@ 0x80
 800b786:	2101      	movs	r1, #1
 800b788:	4803      	ldr	r0, [pc, #12]	@ (800b798 <USBD_LL_Init+0x94>)
 800b78a:	f7f7 f893 	bl	80028b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b78e:	2300      	movs	r3, #0
}
 800b790:	4618      	mov	r0, r3
 800b792:	3708      	adds	r7, #8
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	200061a4 	.word	0x200061a4

0800b79c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7f5 ff65 	bl	8001682 <HAL_PCD_Start>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7bc:	7bfb      	ldrb	r3, [r7, #15]
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f000 f97e 	bl	800bac0 <USBD_Get_USB_Status>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3710      	adds	r7, #16
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}

0800b7d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b7d2:	b580      	push	{r7, lr}
 800b7d4:	b084      	sub	sp, #16
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
 800b7da:	4608      	mov	r0, r1
 800b7dc:	4611      	mov	r1, r2
 800b7de:	461a      	mov	r2, r3
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	70fb      	strb	r3, [r7, #3]
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	70bb      	strb	r3, [r7, #2]
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b7fa:	78bb      	ldrb	r3, [r7, #2]
 800b7fc:	883a      	ldrh	r2, [r7, #0]
 800b7fe:	78f9      	ldrb	r1, [r7, #3]
 800b800:	f7f6 fc52 	bl	80020a8 <HAL_PCD_EP_Open>
 800b804:	4603      	mov	r3, r0
 800b806:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b808:	7bfb      	ldrb	r3, [r7, #15]
 800b80a:	4618      	mov	r0, r3
 800b80c:	f000 f958 	bl	800bac0 <USBD_Get_USB_Status>
 800b810:	4603      	mov	r3, r0
 800b812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b814:	7bbb      	ldrb	r3, [r7, #14]
}
 800b816:	4618      	mov	r0, r3
 800b818:	3710      	adds	r7, #16
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}

0800b81e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b81e:	b580      	push	{r7, lr}
 800b820:	b084      	sub	sp, #16
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
 800b826:	460b      	mov	r3, r1
 800b828:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b82a:	2300      	movs	r3, #0
 800b82c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b82e:	2300      	movs	r3, #0
 800b830:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b838:	78fa      	ldrb	r2, [r7, #3]
 800b83a:	4611      	mov	r1, r2
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7f6 fc9b 	bl	8002178 <HAL_PCD_EP_Close>
 800b842:	4603      	mov	r3, r0
 800b844:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b846:	7bfb      	ldrb	r3, [r7, #15]
 800b848:	4618      	mov	r0, r3
 800b84a:	f000 f939 	bl	800bac0 <USBD_Get_USB_Status>
 800b84e:	4603      	mov	r3, r0
 800b850:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b852:	7bbb      	ldrb	r3, [r7, #14]
}
 800b854:	4618      	mov	r0, r3
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b084      	sub	sp, #16
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	460b      	mov	r3, r1
 800b866:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b868:	2300      	movs	r3, #0
 800b86a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b86c:	2300      	movs	r3, #0
 800b86e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b876:	78fa      	ldrb	r2, [r7, #3]
 800b878:	4611      	mov	r1, r2
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7f6 fd73 	bl	8002366 <HAL_PCD_EP_SetStall>
 800b880:	4603      	mov	r3, r0
 800b882:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b884:	7bfb      	ldrb	r3, [r7, #15]
 800b886:	4618      	mov	r0, r3
 800b888:	f000 f91a 	bl	800bac0 <USBD_Get_USB_Status>
 800b88c:	4603      	mov	r3, r0
 800b88e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b890:	7bbb      	ldrb	r3, [r7, #14]
}
 800b892:	4618      	mov	r0, r3
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}

0800b89a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b084      	sub	sp, #16
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b8b4:	78fa      	ldrb	r2, [r7, #3]
 800b8b6:	4611      	mov	r1, r2
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7f6 fdb8 	bl	800242e <HAL_PCD_EP_ClrStall>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8c2:	7bfb      	ldrb	r3, [r7, #15]
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f000 f8fb 	bl	800bac0 <USBD_Get_USB_Status>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3710      	adds	r7, #16
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b085      	sub	sp, #20
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b8ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b8ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	da0b      	bge.n	800b90c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b8f4:	78fb      	ldrb	r3, [r7, #3]
 800b8f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b8fa:	68f9      	ldr	r1, [r7, #12]
 800b8fc:	4613      	mov	r3, r2
 800b8fe:	00db      	lsls	r3, r3, #3
 800b900:	4413      	add	r3, r2
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	440b      	add	r3, r1
 800b906:	333e      	adds	r3, #62	@ 0x3e
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	e00b      	b.n	800b924 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b90c:	78fb      	ldrb	r3, [r7, #3]
 800b90e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b912:	68f9      	ldr	r1, [r7, #12]
 800b914:	4613      	mov	r3, r2
 800b916:	00db      	lsls	r3, r3, #3
 800b918:	4413      	add	r3, r2
 800b91a:	009b      	lsls	r3, r3, #2
 800b91c:	440b      	add	r3, r1
 800b91e:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800b922:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b924:	4618      	mov	r0, r3
 800b926:	3714      	adds	r7, #20
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	460b      	mov	r3, r1
 800b93a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b93c:	2300      	movs	r3, #0
 800b93e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b940:	2300      	movs	r3, #0
 800b942:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b94a:	78fa      	ldrb	r2, [r7, #3]
 800b94c:	4611      	mov	r1, r2
 800b94e:	4618      	mov	r0, r3
 800b950:	f7f6 fb85 	bl	800205e <HAL_PCD_SetAddress>
 800b954:	4603      	mov	r3, r0
 800b956:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b958:	7bfb      	ldrb	r3, [r7, #15]
 800b95a:	4618      	mov	r0, r3
 800b95c:	f000 f8b0 	bl	800bac0 <USBD_Get_USB_Status>
 800b960:	4603      	mov	r3, r0
 800b962:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b964:	7bbb      	ldrb	r3, [r7, #14]
}
 800b966:	4618      	mov	r0, r3
 800b968:	3710      	adds	r7, #16
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}

0800b96e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b96e:	b580      	push	{r7, lr}
 800b970:	b086      	sub	sp, #24
 800b972:	af00      	add	r7, sp, #0
 800b974:	60f8      	str	r0, [r7, #12]
 800b976:	607a      	str	r2, [r7, #4]
 800b978:	603b      	str	r3, [r7, #0]
 800b97a:	460b      	mov	r3, r1
 800b97c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b97e:	2300      	movs	r3, #0
 800b980:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b982:	2300      	movs	r3, #0
 800b984:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b98c:	7af9      	ldrb	r1, [r7, #11]
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	f7f6 fc9e 	bl	80022d2 <HAL_PCD_EP_Transmit>
 800b996:	4603      	mov	r3, r0
 800b998:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b99a:	7dfb      	ldrb	r3, [r7, #23]
 800b99c:	4618      	mov	r0, r3
 800b99e:	f000 f88f 	bl	800bac0 <USBD_Get_USB_Status>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b9a6:	7dbb      	ldrb	r3, [r7, #22]
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3718      	adds	r7, #24
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b086      	sub	sp, #24
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	607a      	str	r2, [r7, #4]
 800b9ba:	603b      	str	r3, [r7, #0]
 800b9bc:	460b      	mov	r3, r1
 800b9be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b9ce:	7af9      	ldrb	r1, [r7, #11]
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	687a      	ldr	r2, [r7, #4]
 800b9d4:	f7f6 fc1a 	bl	800220c <HAL_PCD_EP_Receive>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9dc:	7dfb      	ldrb	r3, [r7, #23]
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f000 f86e 	bl	800bac0 <USBD_Get_USB_Status>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b9e8:	7dbb      	ldrb	r3, [r7, #22]
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3718      	adds	r7, #24
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b082      	sub	sp, #8
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba04:	78fa      	ldrb	r2, [r7, #3]
 800ba06:	4611      	mov	r1, r2
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7f6 fc4a 	bl	80022a2 <HAL_PCD_EP_GetRxCount>
 800ba0e:	4603      	mov	r3, r0
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3708      	adds	r7, #8
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	460b      	mov	r3, r1
 800ba22:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ba24:	78fb      	ldrb	r3, [r7, #3]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d002      	beq.n	800ba30 <HAL_PCDEx_LPM_Callback+0x18>
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d01f      	beq.n	800ba6e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ba2e:	e03b      	b.n	800baa8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6a1b      	ldr	r3, [r3, #32]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d007      	beq.n	800ba48 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ba38:	f000 f83c 	bl	800bab4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba3c:	4b1c      	ldr	r3, [pc, #112]	@ (800bab0 <HAL_PCDEx_LPM_Callback+0x98>)
 800ba3e:	691b      	ldr	r3, [r3, #16]
 800ba40:	4a1b      	ldr	r2, [pc, #108]	@ (800bab0 <HAL_PCDEx_LPM_Callback+0x98>)
 800ba42:	f023 0306 	bic.w	r3, r3, #6
 800ba46:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	6812      	ldr	r2, [r2, #0]
 800ba56:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ba5a:	f023 0301 	bic.w	r3, r3, #1
 800ba5e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7fb fc53 	bl	8007312 <USBD_LL_Resume>
    break;
 800ba6c:	e01c      	b.n	800baa8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	6812      	ldr	r2, [r2, #0]
 800ba7c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ba80:	f043 0301 	orr.w	r3, r3, #1
 800ba84:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f7fb fc2a 	bl	80072e6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6a1b      	ldr	r3, [r3, #32]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d005      	beq.n	800baa6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba9a:	4b05      	ldr	r3, [pc, #20]	@ (800bab0 <HAL_PCDEx_LPM_Callback+0x98>)
 800ba9c:	691b      	ldr	r3, [r3, #16]
 800ba9e:	4a04      	ldr	r2, [pc, #16]	@ (800bab0 <HAL_PCDEx_LPM_Callback+0x98>)
 800baa0:	f043 0306 	orr.w	r3, r3, #6
 800baa4:	6113      	str	r3, [r2, #16]
    break;
 800baa6:	bf00      	nop
}
 800baa8:	bf00      	nop
 800baaa:	3708      	adds	r7, #8
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	e000ed00 	.word	0xe000ed00

0800bab4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bab8:	f7f4 fdb8 	bl	800062c <SystemClock_Config>
}
 800babc:	bf00      	nop
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b085      	sub	sp, #20
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	4603      	mov	r3, r0
 800bac8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baca:	2300      	movs	r3, #0
 800bacc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bace:	79fb      	ldrb	r3, [r7, #7]
 800bad0:	2b03      	cmp	r3, #3
 800bad2:	d817      	bhi.n	800bb04 <USBD_Get_USB_Status+0x44>
 800bad4:	a201      	add	r2, pc, #4	@ (adr r2, 800badc <USBD_Get_USB_Status+0x1c>)
 800bad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bada:	bf00      	nop
 800badc:	0800baed 	.word	0x0800baed
 800bae0:	0800baf3 	.word	0x0800baf3
 800bae4:	0800baf9 	.word	0x0800baf9
 800bae8:	0800baff 	.word	0x0800baff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800baec:	2300      	movs	r3, #0
 800baee:	73fb      	strb	r3, [r7, #15]
    break;
 800baf0:	e00b      	b.n	800bb0a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800baf2:	2303      	movs	r3, #3
 800baf4:	73fb      	strb	r3, [r7, #15]
    break;
 800baf6:	e008      	b.n	800bb0a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800baf8:	2301      	movs	r3, #1
 800bafa:	73fb      	strb	r3, [r7, #15]
    break;
 800bafc:	e005      	b.n	800bb0a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bafe:	2303      	movs	r3, #3
 800bb00:	73fb      	strb	r3, [r7, #15]
    break;
 800bb02:	e002      	b.n	800bb0a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bb04:	2303      	movs	r3, #3
 800bb06:	73fb      	strb	r3, [r7, #15]
    break;
 800bb08:	bf00      	nop
  }
  return usb_status;
 800bb0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3714      	adds	r7, #20
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr

0800bb18 <malloc>:
 800bb18:	4b02      	ldr	r3, [pc, #8]	@ (800bb24 <malloc+0xc>)
 800bb1a:	4601      	mov	r1, r0
 800bb1c:	6818      	ldr	r0, [r3, #0]
 800bb1e:	f000 b82d 	b.w	800bb7c <_malloc_r>
 800bb22:	bf00      	nop
 800bb24:	20000110 	.word	0x20000110

0800bb28 <free>:
 800bb28:	4b02      	ldr	r3, [pc, #8]	@ (800bb34 <free+0xc>)
 800bb2a:	4601      	mov	r1, r0
 800bb2c:	6818      	ldr	r0, [r3, #0]
 800bb2e:	f000 b959 	b.w	800bde4 <_free_r>
 800bb32:	bf00      	nop
 800bb34:	20000110 	.word	0x20000110

0800bb38 <sbrk_aligned>:
 800bb38:	b570      	push	{r4, r5, r6, lr}
 800bb3a:	4e0f      	ldr	r6, [pc, #60]	@ (800bb78 <sbrk_aligned+0x40>)
 800bb3c:	460c      	mov	r4, r1
 800bb3e:	6831      	ldr	r1, [r6, #0]
 800bb40:	4605      	mov	r5, r0
 800bb42:	b911      	cbnz	r1, 800bb4a <sbrk_aligned+0x12>
 800bb44:	f000 f904 	bl	800bd50 <_sbrk_r>
 800bb48:	6030      	str	r0, [r6, #0]
 800bb4a:	4621      	mov	r1, r4
 800bb4c:	4628      	mov	r0, r5
 800bb4e:	f000 f8ff 	bl	800bd50 <_sbrk_r>
 800bb52:	1c43      	adds	r3, r0, #1
 800bb54:	d103      	bne.n	800bb5e <sbrk_aligned+0x26>
 800bb56:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bb5a:	4620      	mov	r0, r4
 800bb5c:	bd70      	pop	{r4, r5, r6, pc}
 800bb5e:	1cc4      	adds	r4, r0, #3
 800bb60:	f024 0403 	bic.w	r4, r4, #3
 800bb64:	42a0      	cmp	r0, r4
 800bb66:	d0f8      	beq.n	800bb5a <sbrk_aligned+0x22>
 800bb68:	1a21      	subs	r1, r4, r0
 800bb6a:	4628      	mov	r0, r5
 800bb6c:	f000 f8f0 	bl	800bd50 <_sbrk_r>
 800bb70:	3001      	adds	r0, #1
 800bb72:	d1f2      	bne.n	800bb5a <sbrk_aligned+0x22>
 800bb74:	e7ef      	b.n	800bb56 <sbrk_aligned+0x1e>
 800bb76:	bf00      	nop
 800bb78:	200066ac 	.word	0x200066ac

0800bb7c <_malloc_r>:
 800bb7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb80:	1ccd      	adds	r5, r1, #3
 800bb82:	f025 0503 	bic.w	r5, r5, #3
 800bb86:	3508      	adds	r5, #8
 800bb88:	2d0c      	cmp	r5, #12
 800bb8a:	bf38      	it	cc
 800bb8c:	250c      	movcc	r5, #12
 800bb8e:	2d00      	cmp	r5, #0
 800bb90:	4606      	mov	r6, r0
 800bb92:	db01      	blt.n	800bb98 <_malloc_r+0x1c>
 800bb94:	42a9      	cmp	r1, r5
 800bb96:	d904      	bls.n	800bba2 <_malloc_r+0x26>
 800bb98:	230c      	movs	r3, #12
 800bb9a:	6033      	str	r3, [r6, #0]
 800bb9c:	2000      	movs	r0, #0
 800bb9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bba2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bc78 <_malloc_r+0xfc>
 800bba6:	f000 f869 	bl	800bc7c <__malloc_lock>
 800bbaa:	f8d8 3000 	ldr.w	r3, [r8]
 800bbae:	461c      	mov	r4, r3
 800bbb0:	bb44      	cbnz	r4, 800bc04 <_malloc_r+0x88>
 800bbb2:	4629      	mov	r1, r5
 800bbb4:	4630      	mov	r0, r6
 800bbb6:	f7ff ffbf 	bl	800bb38 <sbrk_aligned>
 800bbba:	1c43      	adds	r3, r0, #1
 800bbbc:	4604      	mov	r4, r0
 800bbbe:	d158      	bne.n	800bc72 <_malloc_r+0xf6>
 800bbc0:	f8d8 4000 	ldr.w	r4, [r8]
 800bbc4:	4627      	mov	r7, r4
 800bbc6:	2f00      	cmp	r7, #0
 800bbc8:	d143      	bne.n	800bc52 <_malloc_r+0xd6>
 800bbca:	2c00      	cmp	r4, #0
 800bbcc:	d04b      	beq.n	800bc66 <_malloc_r+0xea>
 800bbce:	6823      	ldr	r3, [r4, #0]
 800bbd0:	4639      	mov	r1, r7
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	eb04 0903 	add.w	r9, r4, r3
 800bbd8:	f000 f8ba 	bl	800bd50 <_sbrk_r>
 800bbdc:	4581      	cmp	r9, r0
 800bbde:	d142      	bne.n	800bc66 <_malloc_r+0xea>
 800bbe0:	6821      	ldr	r1, [r4, #0]
 800bbe2:	1a6d      	subs	r5, r5, r1
 800bbe4:	4629      	mov	r1, r5
 800bbe6:	4630      	mov	r0, r6
 800bbe8:	f7ff ffa6 	bl	800bb38 <sbrk_aligned>
 800bbec:	3001      	adds	r0, #1
 800bbee:	d03a      	beq.n	800bc66 <_malloc_r+0xea>
 800bbf0:	6823      	ldr	r3, [r4, #0]
 800bbf2:	442b      	add	r3, r5
 800bbf4:	6023      	str	r3, [r4, #0]
 800bbf6:	f8d8 3000 	ldr.w	r3, [r8]
 800bbfa:	685a      	ldr	r2, [r3, #4]
 800bbfc:	bb62      	cbnz	r2, 800bc58 <_malloc_r+0xdc>
 800bbfe:	f8c8 7000 	str.w	r7, [r8]
 800bc02:	e00f      	b.n	800bc24 <_malloc_r+0xa8>
 800bc04:	6822      	ldr	r2, [r4, #0]
 800bc06:	1b52      	subs	r2, r2, r5
 800bc08:	d420      	bmi.n	800bc4c <_malloc_r+0xd0>
 800bc0a:	2a0b      	cmp	r2, #11
 800bc0c:	d917      	bls.n	800bc3e <_malloc_r+0xc2>
 800bc0e:	1961      	adds	r1, r4, r5
 800bc10:	42a3      	cmp	r3, r4
 800bc12:	6025      	str	r5, [r4, #0]
 800bc14:	bf18      	it	ne
 800bc16:	6059      	strne	r1, [r3, #4]
 800bc18:	6863      	ldr	r3, [r4, #4]
 800bc1a:	bf08      	it	eq
 800bc1c:	f8c8 1000 	streq.w	r1, [r8]
 800bc20:	5162      	str	r2, [r4, r5]
 800bc22:	604b      	str	r3, [r1, #4]
 800bc24:	4630      	mov	r0, r6
 800bc26:	f000 f82f 	bl	800bc88 <__malloc_unlock>
 800bc2a:	f104 000b 	add.w	r0, r4, #11
 800bc2e:	1d23      	adds	r3, r4, #4
 800bc30:	f020 0007 	bic.w	r0, r0, #7
 800bc34:	1ac2      	subs	r2, r0, r3
 800bc36:	bf1c      	itt	ne
 800bc38:	1a1b      	subne	r3, r3, r0
 800bc3a:	50a3      	strne	r3, [r4, r2]
 800bc3c:	e7af      	b.n	800bb9e <_malloc_r+0x22>
 800bc3e:	6862      	ldr	r2, [r4, #4]
 800bc40:	42a3      	cmp	r3, r4
 800bc42:	bf0c      	ite	eq
 800bc44:	f8c8 2000 	streq.w	r2, [r8]
 800bc48:	605a      	strne	r2, [r3, #4]
 800bc4a:	e7eb      	b.n	800bc24 <_malloc_r+0xa8>
 800bc4c:	4623      	mov	r3, r4
 800bc4e:	6864      	ldr	r4, [r4, #4]
 800bc50:	e7ae      	b.n	800bbb0 <_malloc_r+0x34>
 800bc52:	463c      	mov	r4, r7
 800bc54:	687f      	ldr	r7, [r7, #4]
 800bc56:	e7b6      	b.n	800bbc6 <_malloc_r+0x4a>
 800bc58:	461a      	mov	r2, r3
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	42a3      	cmp	r3, r4
 800bc5e:	d1fb      	bne.n	800bc58 <_malloc_r+0xdc>
 800bc60:	2300      	movs	r3, #0
 800bc62:	6053      	str	r3, [r2, #4]
 800bc64:	e7de      	b.n	800bc24 <_malloc_r+0xa8>
 800bc66:	230c      	movs	r3, #12
 800bc68:	6033      	str	r3, [r6, #0]
 800bc6a:	4630      	mov	r0, r6
 800bc6c:	f000 f80c 	bl	800bc88 <__malloc_unlock>
 800bc70:	e794      	b.n	800bb9c <_malloc_r+0x20>
 800bc72:	6005      	str	r5, [r0, #0]
 800bc74:	e7d6      	b.n	800bc24 <_malloc_r+0xa8>
 800bc76:	bf00      	nop
 800bc78:	200066b0 	.word	0x200066b0

0800bc7c <__malloc_lock>:
 800bc7c:	4801      	ldr	r0, [pc, #4]	@ (800bc84 <__malloc_lock+0x8>)
 800bc7e:	f000 b8a1 	b.w	800bdc4 <__retarget_lock_acquire_recursive>
 800bc82:	bf00      	nop
 800bc84:	200067f0 	.word	0x200067f0

0800bc88 <__malloc_unlock>:
 800bc88:	4801      	ldr	r0, [pc, #4]	@ (800bc90 <__malloc_unlock+0x8>)
 800bc8a:	f000 b89c 	b.w	800bdc6 <__retarget_lock_release_recursive>
 800bc8e:	bf00      	nop
 800bc90:	200067f0 	.word	0x200067f0

0800bc94 <memset>:
 800bc94:	4402      	add	r2, r0
 800bc96:	4603      	mov	r3, r0
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d100      	bne.n	800bc9e <memset+0xa>
 800bc9c:	4770      	bx	lr
 800bc9e:	f803 1b01 	strb.w	r1, [r3], #1
 800bca2:	e7f9      	b.n	800bc98 <memset+0x4>

0800bca4 <_reclaim_reent>:
 800bca4:	4b29      	ldr	r3, [pc, #164]	@ (800bd4c <_reclaim_reent+0xa8>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4283      	cmp	r3, r0
 800bcaa:	b570      	push	{r4, r5, r6, lr}
 800bcac:	4604      	mov	r4, r0
 800bcae:	d04b      	beq.n	800bd48 <_reclaim_reent+0xa4>
 800bcb0:	69c3      	ldr	r3, [r0, #28]
 800bcb2:	b1ab      	cbz	r3, 800bce0 <_reclaim_reent+0x3c>
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	b16b      	cbz	r3, 800bcd4 <_reclaim_reent+0x30>
 800bcb8:	2500      	movs	r5, #0
 800bcba:	69e3      	ldr	r3, [r4, #28]
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	5959      	ldr	r1, [r3, r5]
 800bcc0:	2900      	cmp	r1, #0
 800bcc2:	d13b      	bne.n	800bd3c <_reclaim_reent+0x98>
 800bcc4:	3504      	adds	r5, #4
 800bcc6:	2d80      	cmp	r5, #128	@ 0x80
 800bcc8:	d1f7      	bne.n	800bcba <_reclaim_reent+0x16>
 800bcca:	69e3      	ldr	r3, [r4, #28]
 800bccc:	4620      	mov	r0, r4
 800bcce:	68d9      	ldr	r1, [r3, #12]
 800bcd0:	f000 f888 	bl	800bde4 <_free_r>
 800bcd4:	69e3      	ldr	r3, [r4, #28]
 800bcd6:	6819      	ldr	r1, [r3, #0]
 800bcd8:	b111      	cbz	r1, 800bce0 <_reclaim_reent+0x3c>
 800bcda:	4620      	mov	r0, r4
 800bcdc:	f000 f882 	bl	800bde4 <_free_r>
 800bce0:	6961      	ldr	r1, [r4, #20]
 800bce2:	b111      	cbz	r1, 800bcea <_reclaim_reent+0x46>
 800bce4:	4620      	mov	r0, r4
 800bce6:	f000 f87d 	bl	800bde4 <_free_r>
 800bcea:	69e1      	ldr	r1, [r4, #28]
 800bcec:	b111      	cbz	r1, 800bcf4 <_reclaim_reent+0x50>
 800bcee:	4620      	mov	r0, r4
 800bcf0:	f000 f878 	bl	800bde4 <_free_r>
 800bcf4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bcf6:	b111      	cbz	r1, 800bcfe <_reclaim_reent+0x5a>
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	f000 f873 	bl	800bde4 <_free_r>
 800bcfe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd00:	b111      	cbz	r1, 800bd08 <_reclaim_reent+0x64>
 800bd02:	4620      	mov	r0, r4
 800bd04:	f000 f86e 	bl	800bde4 <_free_r>
 800bd08:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800bd0a:	b111      	cbz	r1, 800bd12 <_reclaim_reent+0x6e>
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	f000 f869 	bl	800bde4 <_free_r>
 800bd12:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bd14:	b111      	cbz	r1, 800bd1c <_reclaim_reent+0x78>
 800bd16:	4620      	mov	r0, r4
 800bd18:	f000 f864 	bl	800bde4 <_free_r>
 800bd1c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bd1e:	b111      	cbz	r1, 800bd26 <_reclaim_reent+0x82>
 800bd20:	4620      	mov	r0, r4
 800bd22:	f000 f85f 	bl	800bde4 <_free_r>
 800bd26:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bd28:	b111      	cbz	r1, 800bd30 <_reclaim_reent+0x8c>
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	f000 f85a 	bl	800bde4 <_free_r>
 800bd30:	6a23      	ldr	r3, [r4, #32]
 800bd32:	b14b      	cbz	r3, 800bd48 <_reclaim_reent+0xa4>
 800bd34:	4620      	mov	r0, r4
 800bd36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd3a:	4718      	bx	r3
 800bd3c:	680e      	ldr	r6, [r1, #0]
 800bd3e:	4620      	mov	r0, r4
 800bd40:	f000 f850 	bl	800bde4 <_free_r>
 800bd44:	4631      	mov	r1, r6
 800bd46:	e7bb      	b.n	800bcc0 <_reclaim_reent+0x1c>
 800bd48:	bd70      	pop	{r4, r5, r6, pc}
 800bd4a:	bf00      	nop
 800bd4c:	20000110 	.word	0x20000110

0800bd50 <_sbrk_r>:
 800bd50:	b538      	push	{r3, r4, r5, lr}
 800bd52:	4d06      	ldr	r5, [pc, #24]	@ (800bd6c <_sbrk_r+0x1c>)
 800bd54:	2300      	movs	r3, #0
 800bd56:	4604      	mov	r4, r0
 800bd58:	4608      	mov	r0, r1
 800bd5a:	602b      	str	r3, [r5, #0]
 800bd5c:	f7f4 ffda 	bl	8000d14 <_sbrk>
 800bd60:	1c43      	adds	r3, r0, #1
 800bd62:	d102      	bne.n	800bd6a <_sbrk_r+0x1a>
 800bd64:	682b      	ldr	r3, [r5, #0]
 800bd66:	b103      	cbz	r3, 800bd6a <_sbrk_r+0x1a>
 800bd68:	6023      	str	r3, [r4, #0]
 800bd6a:	bd38      	pop	{r3, r4, r5, pc}
 800bd6c:	200067ec 	.word	0x200067ec

0800bd70 <__errno>:
 800bd70:	4b01      	ldr	r3, [pc, #4]	@ (800bd78 <__errno+0x8>)
 800bd72:	6818      	ldr	r0, [r3, #0]
 800bd74:	4770      	bx	lr
 800bd76:	bf00      	nop
 800bd78:	20000110 	.word	0x20000110

0800bd7c <__libc_init_array>:
 800bd7c:	b570      	push	{r4, r5, r6, lr}
 800bd7e:	4d0d      	ldr	r5, [pc, #52]	@ (800bdb4 <__libc_init_array+0x38>)
 800bd80:	4c0d      	ldr	r4, [pc, #52]	@ (800bdb8 <__libc_init_array+0x3c>)
 800bd82:	1b64      	subs	r4, r4, r5
 800bd84:	10a4      	asrs	r4, r4, #2
 800bd86:	2600      	movs	r6, #0
 800bd88:	42a6      	cmp	r6, r4
 800bd8a:	d109      	bne.n	800bda0 <__libc_init_array+0x24>
 800bd8c:	4d0b      	ldr	r5, [pc, #44]	@ (800bdbc <__libc_init_array+0x40>)
 800bd8e:	4c0c      	ldr	r4, [pc, #48]	@ (800bdc0 <__libc_init_array+0x44>)
 800bd90:	f000 f872 	bl	800be78 <_init>
 800bd94:	1b64      	subs	r4, r4, r5
 800bd96:	10a4      	asrs	r4, r4, #2
 800bd98:	2600      	movs	r6, #0
 800bd9a:	42a6      	cmp	r6, r4
 800bd9c:	d105      	bne.n	800bdaa <__libc_init_array+0x2e>
 800bd9e:	bd70      	pop	{r4, r5, r6, pc}
 800bda0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bda4:	4798      	blx	r3
 800bda6:	3601      	adds	r6, #1
 800bda8:	e7ee      	b.n	800bd88 <__libc_init_array+0xc>
 800bdaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdae:	4798      	blx	r3
 800bdb0:	3601      	adds	r6, #1
 800bdb2:	e7f2      	b.n	800bd9a <__libc_init_array+0x1e>
 800bdb4:	0800bf78 	.word	0x0800bf78
 800bdb8:	0800bf78 	.word	0x0800bf78
 800bdbc:	0800bf78 	.word	0x0800bf78
 800bdc0:	0800bf7c 	.word	0x0800bf7c

0800bdc4 <__retarget_lock_acquire_recursive>:
 800bdc4:	4770      	bx	lr

0800bdc6 <__retarget_lock_release_recursive>:
 800bdc6:	4770      	bx	lr

0800bdc8 <memcpy>:
 800bdc8:	440a      	add	r2, r1
 800bdca:	4291      	cmp	r1, r2
 800bdcc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800bdd0:	d100      	bne.n	800bdd4 <memcpy+0xc>
 800bdd2:	4770      	bx	lr
 800bdd4:	b510      	push	{r4, lr}
 800bdd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdda:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdde:	4291      	cmp	r1, r2
 800bde0:	d1f9      	bne.n	800bdd6 <memcpy+0xe>
 800bde2:	bd10      	pop	{r4, pc}

0800bde4 <_free_r>:
 800bde4:	b538      	push	{r3, r4, r5, lr}
 800bde6:	4605      	mov	r5, r0
 800bde8:	2900      	cmp	r1, #0
 800bdea:	d041      	beq.n	800be70 <_free_r+0x8c>
 800bdec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdf0:	1f0c      	subs	r4, r1, #4
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	bfb8      	it	lt
 800bdf6:	18e4      	addlt	r4, r4, r3
 800bdf8:	f7ff ff40 	bl	800bc7c <__malloc_lock>
 800bdfc:	4a1d      	ldr	r2, [pc, #116]	@ (800be74 <_free_r+0x90>)
 800bdfe:	6813      	ldr	r3, [r2, #0]
 800be00:	b933      	cbnz	r3, 800be10 <_free_r+0x2c>
 800be02:	6063      	str	r3, [r4, #4]
 800be04:	6014      	str	r4, [r2, #0]
 800be06:	4628      	mov	r0, r5
 800be08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be0c:	f7ff bf3c 	b.w	800bc88 <__malloc_unlock>
 800be10:	42a3      	cmp	r3, r4
 800be12:	d908      	bls.n	800be26 <_free_r+0x42>
 800be14:	6820      	ldr	r0, [r4, #0]
 800be16:	1821      	adds	r1, r4, r0
 800be18:	428b      	cmp	r3, r1
 800be1a:	bf01      	itttt	eq
 800be1c:	6819      	ldreq	r1, [r3, #0]
 800be1e:	685b      	ldreq	r3, [r3, #4]
 800be20:	1809      	addeq	r1, r1, r0
 800be22:	6021      	streq	r1, [r4, #0]
 800be24:	e7ed      	b.n	800be02 <_free_r+0x1e>
 800be26:	461a      	mov	r2, r3
 800be28:	685b      	ldr	r3, [r3, #4]
 800be2a:	b10b      	cbz	r3, 800be30 <_free_r+0x4c>
 800be2c:	42a3      	cmp	r3, r4
 800be2e:	d9fa      	bls.n	800be26 <_free_r+0x42>
 800be30:	6811      	ldr	r1, [r2, #0]
 800be32:	1850      	adds	r0, r2, r1
 800be34:	42a0      	cmp	r0, r4
 800be36:	d10b      	bne.n	800be50 <_free_r+0x6c>
 800be38:	6820      	ldr	r0, [r4, #0]
 800be3a:	4401      	add	r1, r0
 800be3c:	1850      	adds	r0, r2, r1
 800be3e:	4283      	cmp	r3, r0
 800be40:	6011      	str	r1, [r2, #0]
 800be42:	d1e0      	bne.n	800be06 <_free_r+0x22>
 800be44:	6818      	ldr	r0, [r3, #0]
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	6053      	str	r3, [r2, #4]
 800be4a:	4408      	add	r0, r1
 800be4c:	6010      	str	r0, [r2, #0]
 800be4e:	e7da      	b.n	800be06 <_free_r+0x22>
 800be50:	d902      	bls.n	800be58 <_free_r+0x74>
 800be52:	230c      	movs	r3, #12
 800be54:	602b      	str	r3, [r5, #0]
 800be56:	e7d6      	b.n	800be06 <_free_r+0x22>
 800be58:	6820      	ldr	r0, [r4, #0]
 800be5a:	1821      	adds	r1, r4, r0
 800be5c:	428b      	cmp	r3, r1
 800be5e:	bf04      	itt	eq
 800be60:	6819      	ldreq	r1, [r3, #0]
 800be62:	685b      	ldreq	r3, [r3, #4]
 800be64:	6063      	str	r3, [r4, #4]
 800be66:	bf04      	itt	eq
 800be68:	1809      	addeq	r1, r1, r0
 800be6a:	6021      	streq	r1, [r4, #0]
 800be6c:	6054      	str	r4, [r2, #4]
 800be6e:	e7ca      	b.n	800be06 <_free_r+0x22>
 800be70:	bd38      	pop	{r3, r4, r5, pc}
 800be72:	bf00      	nop
 800be74:	200066b0 	.word	0x200066b0

0800be78 <_init>:
 800be78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be7a:	bf00      	nop
 800be7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be7e:	bc08      	pop	{r3}
 800be80:	469e      	mov	lr, r3
 800be82:	4770      	bx	lr

0800be84 <_fini>:
 800be84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be86:	bf00      	nop
 800be88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be8a:	bc08      	pop	{r3}
 800be8c:	469e      	mov	lr, r3
 800be8e:	4770      	bx	lr
