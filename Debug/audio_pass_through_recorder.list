
audio_pass_through_recorder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb54  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800cd24  0800cd24  0000dd24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce70  0800ce70  0000e16c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce70  0800ce70  0000de70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce78  0800ce78  0000e16c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce78  0800ce78  0000de78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ce7c  0800ce7c  0000de7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  0800ce80  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000669c  2000016c  0800cfec  0000e16c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006808  0800cfec  0000e808  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e16c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002583e  00000000  00000000  0000e19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053f6  00000000  00000000  000339da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cc0  00000000  00000000  00038dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000161d  00000000  00000000  0003aa90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007ad6  00000000  00000000  0003c0ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023979  00000000  00000000  00043b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffea9  00000000  00000000  000674fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001673a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f90  00000000  00000000  001673e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0016f378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000016c 	.word	0x2000016c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cd0c 	.word	0x0800cd0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000170 	.word	0x20000170
 800020c:	0800cd0c 	.word	0x0800cd0c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <log_send_uart_logs>:
#include "stm32f7xx_hal.h"

static UART_HandleTypeDef *_uart_log;

void log_send_uart_logs(void *data, int size)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
  if (!_uart_log)
 80005ba:	4b09      	ldr	r3, [pc, #36]	@ (80005e0 <log_send_uart_logs+0x30>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d009      	beq.n	80005d6 <log_send_uart_logs+0x26>
    return;

  HAL_UART_Transmit(_uart_log, data, size, 300);
 80005c2:	4b07      	ldr	r3, [pc, #28]	@ (80005e0 <log_send_uart_logs+0x30>)
 80005c4:	6818      	ldr	r0, [r3, #0]
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	f003 ff10 	bl	80043f4 <HAL_UART_Transmit>
 80005d4:	e000      	b.n	80005d8 <log_send_uart_logs+0x28>
    return;
 80005d6:	bf00      	nop
}
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000188 	.word	0x20000188

080005e4 <__io_putchar>:
/*
 * Re-direct printf() logs to UART1 (connected to
 * ST-link).
 */
int __io_putchar(int ch)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  char c = (char)ch;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	73fb      	strb	r3, [r7, #15]
  log_send_uart_logs(&c, sizeof(char));
 80005f2:	f107 030f 	add.w	r3, r7, #15
 80005f6:	2101      	movs	r1, #1
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff ffd9 	bl	80005b0 <log_send_uart_logs>
}
 80005fe:	bf00      	nop
 8000600:	4618      	mov	r0, r3
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <log_set_uart>:

void log_set_uart(UART_HandleTypeDef *uart)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  _uart_log = uart;
 8000610:	4a04      	ldr	r2, [pc, #16]	@ (8000624 <log_set_uart+0x1c>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6013      	str	r3, [r2, #0]
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000188 	.word	0x20000188

08000628 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800062c:	f3bf 8f4f 	dsb	sy
}
 8000630:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000632:	f3bf 8f6f 	isb	sy
}
 8000636:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000638:	4b0d      	ldr	r3, [pc, #52]	@ (8000670 <SCB_EnableICache+0x48>)
 800063a:	2200      	movs	r2, #0
 800063c:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000640:	f3bf 8f4f 	dsb	sy
}
 8000644:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000646:	f3bf 8f6f 	isb	sy
}
 800064a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800064c:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <SCB_EnableICache+0x48>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a07      	ldr	r2, [pc, #28]	@ (8000670 <SCB_EnableICache+0x48>)
 8000652:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000656:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000658:	f3bf 8f4f 	dsb	sy
}
 800065c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800065e:	f3bf 8f6f 	isb	sy
}
 8000662:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800067a:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <SCB_EnableDCache+0x84>)
 800067c:	2200      	movs	r2, #0
 800067e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000682:	f3bf 8f4f 	dsb	sy
}
 8000686:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000688:	4b1b      	ldr	r3, [pc, #108]	@ (80006f8 <SCB_EnableDCache+0x84>)
 800068a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800068e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	0b5b      	lsrs	r3, r3, #13
 8000694:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000698:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	08db      	lsrs	r3, r3, #3
 800069e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80006a2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	015a      	lsls	r2, r3, #5
 80006a8:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80006ac:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006b2:	4911      	ldr	r1, [pc, #68]	@ (80006f8 <SCB_EnableDCache+0x84>)
 80006b4:	4313      	orrs	r3, r2
 80006b6:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	1e5a      	subs	r2, r3, #1
 80006be:	60ba      	str	r2, [r7, #8]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d1ef      	bne.n	80006a4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	1e5a      	subs	r2, r3, #1
 80006c8:	60fa      	str	r2, [r7, #12]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d1e5      	bne.n	800069a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80006ce:	f3bf 8f4f 	dsb	sy
}
 80006d2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80006d4:	4b08      	ldr	r3, [pc, #32]	@ (80006f8 <SCB_EnableDCache+0x84>)
 80006d6:	695b      	ldr	r3, [r3, #20]
 80006d8:	4a07      	ldr	r2, [pc, #28]	@ (80006f8 <SCB_EnableDCache+0x84>)
 80006da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006de:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006e0:	f3bf 8f4f 	dsb	sy
}
 80006e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006e6:	f3bf 8f6f 	isb	sy
}
 80006ea:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006ec:	bf00      	nop
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000700:	f7ff ff92 	bl	8000628 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000704:	f7ff ffb6 	bl	8000674 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000708:	f000 fc70 	bl	8000fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070c:	f000 f820 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000710:	f000 f8ec 	bl	80008ec <MX_GPIO_Init>
  MX_UART4_Init();
 8000714:	f000 f88a 	bl	800082c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000718:	f000 f8b8 	bl	800088c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  log_set_uart(&huart1);
 800071c:	4808      	ldr	r0, [pc, #32]	@ (8000740 <main+0x44>)
 800071e:	f7ff ff73 	bl	8000608 <log_set_uart>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000722:	f007 ff2d 	bl	8008580 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000726:	4a07      	ldr	r2, [pc, #28]	@ (8000744 <main+0x48>)
 8000728:	2100      	movs	r1, #0
 800072a:	4807      	ldr	r0, [pc, #28]	@ (8000748 <main+0x4c>)
 800072c:	f007 ff92 	bl	8008654 <osThreadNew>
 8000730:	4603      	mov	r3, r0
 8000732:	4a06      	ldr	r2, [pc, #24]	@ (800074c <main+0x50>)
 8000734:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000736:	f007 ff57 	bl	80085e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800073a:	bf00      	nop
 800073c:	e7fd      	b.n	800073a <main+0x3e>
 800073e:	bf00      	nop
 8000740:	20000214 	.word	0x20000214
 8000744:	0800ce00 	.word	0x0800ce00
 8000748:	080009b1 	.word	0x080009b1
 800074c:	2000029c 	.word	0x2000029c

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b094      	sub	sp, #80	@ 0x50
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	2230      	movs	r2, #48	@ 0x30
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f00b fd9a 	bl	800c298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000774:	4b2b      	ldr	r3, [pc, #172]	@ (8000824 <SystemClock_Config+0xd4>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000778:	4a2a      	ldr	r2, [pc, #168]	@ (8000824 <SystemClock_Config+0xd4>)
 800077a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800077e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000780:	4b28      	ldr	r3, [pc, #160]	@ (8000824 <SystemClock_Config+0xd4>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800078c:	4b26      	ldr	r3, [pc, #152]	@ (8000828 <SystemClock_Config+0xd8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a25      	ldr	r2, [pc, #148]	@ (8000828 <SystemClock_Config+0xd8>)
 8000792:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	4b23      	ldr	r3, [pc, #140]	@ (8000828 <SystemClock_Config+0xd8>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a4:	2301      	movs	r3, #1
 80007a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ae:	2302      	movs	r3, #2
 80007b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007b8:	2319      	movs	r3, #25
 80007ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80007bc:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80007c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80007c6:	2309      	movs	r3, #9
 80007c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	f107 0320 	add.w	r3, r7, #32
 80007ce:	4618      	mov	r0, r3
 80007d0:	f002 fa36 	bl	8002c40 <HAL_RCC_OscConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007da:	f000 f913 	bl	8000a04 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007de:	f002 f9df 	bl	8002ba0 <HAL_PWREx_EnableOverDrive>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007e8:	f000 f90c 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ec:	230f      	movs	r3, #15
 80007ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f0:	2302      	movs	r3, #2
 80007f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000802:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	2107      	movs	r1, #7
 800080a:	4618      	mov	r0, r3
 800080c:	f002 fcbc 	bl	8003188 <HAL_RCC_ClockConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000816:	f000 f8f5 	bl	8000a04 <Error_Handler>
  }
}
 800081a:	bf00      	nop
 800081c:	3750      	adds	r7, #80	@ 0x50
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800
 8000828:	40007000 	.word	0x40007000

0800082c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000830:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_UART4_Init+0x58>)
 8000832:	4a15      	ldr	r2, [pc, #84]	@ (8000888 <MX_UART4_Init+0x5c>)
 8000834:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000836:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <MX_UART4_Init+0x58>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_UART4_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_UART4_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_UART4_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_UART4_Init+0x58>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <MX_UART4_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_UART4_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000862:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <MX_UART4_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_UART4_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	@ (8000884 <MX_UART4_Init+0x58>)
 8000870:	f003 fd72 	bl	8004358 <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800087a:	f000 f8c3 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000018c 	.word	0x2000018c
 8000888:	40004c00 	.word	0x40004c00

0800088c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000890:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <MX_USART1_UART_Init+0x58>)
 8000892:	4a15      	ldr	r2, [pc, #84]	@ (80008e8 <MX_USART1_UART_Init+0x5c>)
 8000894:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000896:	4b13      	ldr	r3, [pc, #76]	@ (80008e4 <MX_USART1_UART_Init+0x58>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <MX_USART1_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <MX_USART1_UART_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <MX_USART1_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <MX_USART1_UART_Init+0x58>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	@ (80008e4 <MX_USART1_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <MX_USART1_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <MX_USART1_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c8:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <MX_USART1_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	@ (80008e4 <MX_USART1_UART_Init+0x58>)
 80008d0:	f003 fd42 	bl	8004358 <HAL_UART_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008da:	f000 f893 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000214 	.word	0x20000214
 80008e8:	40011000 	.word	0x40011000

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	@ 0x28
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b29      	ldr	r3, [pc, #164]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a28      	ldr	r2, [pc, #160]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b26      	ldr	r3, [pc, #152]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	4b23      	ldr	r3, [pc, #140]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a22      	ldr	r2, [pc, #136]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b20      	ldr	r3, [pc, #128]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	4b1d      	ldr	r3, [pc, #116]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a1c      	ldr	r2, [pc, #112]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800094a:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a16      	ldr	r2, [pc, #88]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000950:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000962:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	4a10      	ldr	r2, [pc, #64]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800096c:	6313      	str	r3, [r2, #48]	@ 0x30
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2102      	movs	r1, #2
 800097e:	480b      	ldr	r0, [pc, #44]	@ (80009ac <MX_GPIO_Init+0xc0>)
 8000980:	f000 fe22 	bl	80015c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000984:	2302      	movs	r3, #2
 8000986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000988:	2301      	movs	r3, #1
 800098a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4619      	mov	r1, r3
 800099a:	4804      	ldr	r0, [pc, #16]	@ (80009ac <MX_GPIO_Init+0xc0>)
 800099c:	f000 fc68 	bl	8001270 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a0:	bf00      	nop
 80009a2:	3728      	adds	r7, #40	@ 0x28
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40022000 	.word	0x40022000

080009b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80009b8:	f00a fc10 	bl	800b1dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  mod_toggle_led1();
 80009bc:	f000 f9c8 	bl	8000d50 <mod_toggle_led1>

  printf("Starting testing code...\n");
 80009c0:	4806      	ldr	r0, [pc, #24]	@ (80009dc <StartDefaultTask+0x2c>)
 80009c2:	f00b fb89 	bl	800c0d8 <puts>

  for(;;)
  {
    osDelay(5000);
 80009c6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80009ca:	f007 fee9 	bl	80087a0 <osDelay>
    mod_send_usb_test_data();
 80009ce:	f000 f9e3 	bl	8000d98 <mod_send_usb_test_data>
    mod_send_uart_test_logs();
 80009d2:	f000 fa0d 	bl	8000df0 <mod_send_uart_test_logs>
    osDelay(5000);
 80009d6:	bf00      	nop
 80009d8:	e7f5      	b.n	80009c6 <StartDefaultTask+0x16>
 80009da:	bf00      	nop
 80009dc:	0800cd30 	.word	0x0800cd30

080009e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d101      	bne.n	80009f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009f2:	f000 fb17 	bl	8001024 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40010000 	.word	0x40010000

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <Error_Handler+0x8>

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <HAL_MspInit+0x5c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1a:	4a14      	ldr	r2, [pc, #80]	@ (8000a6c <HAL_MspInit+0x5c>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a22:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <HAL_MspInit+0x5c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <HAL_MspInit+0x5c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a32:	4a0e      	ldr	r2, [pc, #56]	@ (8000a6c <HAL_MspInit+0x5c>)
 8000a34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <HAL_MspInit+0x5c>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	210f      	movs	r1, #15
 8000a4a:	f06f 0001 	mvn.w	r0, #1
 8000a4e:	f000 fbe5 	bl	800121c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2105      	movs	r1, #5
 8000a56:	2005      	movs	r0, #5
 8000a58:	f000 fbe0 	bl	800121c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000a5c:	2005      	movs	r0, #5
 8000a5e:	f000 fbf9 	bl	8001254 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b0ae      	sub	sp, #184	@ 0xb8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a88:	f107 0320 	add.w	r3, r7, #32
 8000a8c:	2284      	movs	r2, #132	@ 0x84
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f00b fc01 	bl	800c298 <memset>
  if(huart->Instance==UART4)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a53      	ldr	r2, [pc, #332]	@ (8000be8 <HAL_UART_MspInit+0x178>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d13d      	bne.n	8000b1c <HAL_UART_MspInit+0xac>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000aa0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aa4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aaa:	f107 0320 	add.w	r3, r7, #32
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f002 fd82 	bl	80035b8 <HAL_RCCEx_PeriphCLKConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000aba:	f7ff ffa3 	bl	8000a04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000abe:	4b4b      	ldr	r3, [pc, #300]	@ (8000bec <HAL_UART_MspInit+0x17c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac2:	4a4a      	ldr	r2, [pc, #296]	@ (8000bec <HAL_UART_MspInit+0x17c>)
 8000ac4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aca:	4b48      	ldr	r3, [pc, #288]	@ (8000bec <HAL_UART_MspInit+0x17c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ad2:	61fb      	str	r3, [r7, #28]
 8000ad4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	4b45      	ldr	r3, [pc, #276]	@ (8000bec <HAL_UART_MspInit+0x17c>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a44      	ldr	r2, [pc, #272]	@ (8000bec <HAL_UART_MspInit+0x17c>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae2:	4b42      	ldr	r3, [pc, #264]	@ (8000bec <HAL_UART_MspInit+0x17c>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	61bb      	str	r3, [r7, #24]
 8000aec:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8000aee:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000af2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b08:	2308      	movs	r3, #8
 8000b0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b12:	4619      	mov	r1, r3
 8000b14:	4836      	ldr	r0, [pc, #216]	@ (8000bf0 <HAL_UART_MspInit+0x180>)
 8000b16:	f000 fbab 	bl	8001270 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b1a:	e061      	b.n	8000be0 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a34      	ldr	r2, [pc, #208]	@ (8000bf4 <HAL_UART_MspInit+0x184>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d15c      	bne.n	8000be0 <HAL_UART_MspInit+0x170>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b26:	2340      	movs	r3, #64	@ 0x40
 8000b28:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b2e:	f107 0320 	add.w	r3, r7, #32
 8000b32:	4618      	mov	r0, r3
 8000b34:	f002 fd40 	bl	80035b8 <HAL_RCCEx_PeriphCLKConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8000b3e:	f7ff ff61 	bl	8000a04 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b42:	4b2a      	ldr	r3, [pc, #168]	@ (8000bec <HAL_UART_MspInit+0x17c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b46:	4a29      	ldr	r2, [pc, #164]	@ (8000bec <HAL_UART_MspInit+0x17c>)
 8000b48:	f043 0310 	orr.w	r3, r3, #16
 8000b4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b4e:	4b27      	ldr	r3, [pc, #156]	@ (8000bec <HAL_UART_MspInit+0x17c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b52:	f003 0310 	and.w	r3, r3, #16
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	4b24      	ldr	r3, [pc, #144]	@ (8000bec <HAL_UART_MspInit+0x17c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a23      	ldr	r2, [pc, #140]	@ (8000bec <HAL_UART_MspInit+0x17c>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b21      	ldr	r3, [pc, #132]	@ (8000bec <HAL_UART_MspInit+0x17c>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	4b1e      	ldr	r3, [pc, #120]	@ (8000bec <HAL_UART_MspInit+0x17c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	4a1d      	ldr	r2, [pc, #116]	@ (8000bec <HAL_UART_MspInit+0x17c>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bec <HAL_UART_MspInit+0x17c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b8a:	2380      	movs	r3, #128	@ 0x80
 8000b8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ba2:	2307      	movs	r3, #7
 8000ba4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bac:	4619      	mov	r1, r3
 8000bae:	4812      	ldr	r0, [pc, #72]	@ (8000bf8 <HAL_UART_MspInit+0x188>)
 8000bb0:	f000 fb5e 	bl	8001270 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bce:	2307      	movs	r3, #7
 8000bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4808      	ldr	r0, [pc, #32]	@ (8000bfc <HAL_UART_MspInit+0x18c>)
 8000bdc:	f000 fb48 	bl	8001270 <HAL_GPIO_Init>
}
 8000be0:	bf00      	nop
 8000be2:	37b8      	adds	r7, #184	@ 0xb8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40004c00 	.word	0x40004c00
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020800 	.word	0x40020800
 8000bf4:	40011000 	.word	0x40011000
 8000bf8:	40020400 	.word	0x40020400
 8000bfc:	40020000 	.word	0x40020000

08000c00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08c      	sub	sp, #48	@ 0x30
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c10:	4b2f      	ldr	r3, [pc, #188]	@ (8000cd0 <HAL_InitTick+0xd0>)
 8000c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c14:	4a2e      	ldr	r2, [pc, #184]	@ (8000cd0 <HAL_InitTick+0xd0>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd0 <HAL_InitTick+0xd0>)
 8000c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c28:	f107 020c 	add.w	r2, r7, #12
 8000c2c:	f107 0310 	add.w	r3, r7, #16
 8000c30:	4611      	mov	r1, r2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f002 fc8e 	bl	8003554 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c38:	f002 fc78 	bl	800352c <HAL_RCC_GetPCLK2Freq>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c44:	4a23      	ldr	r2, [pc, #140]	@ (8000cd4 <HAL_InitTick+0xd4>)
 8000c46:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4a:	0c9b      	lsrs	r3, r3, #18
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c50:	4b21      	ldr	r3, [pc, #132]	@ (8000cd8 <HAL_InitTick+0xd8>)
 8000c52:	4a22      	ldr	r2, [pc, #136]	@ (8000cdc <HAL_InitTick+0xdc>)
 8000c54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c56:	4b20      	ldr	r3, [pc, #128]	@ (8000cd8 <HAL_InitTick+0xd8>)
 8000c58:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c5c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8000cd8 <HAL_InitTick+0xd8>)
 8000c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c62:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c64:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd8 <HAL_InitTick+0xd8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd8 <HAL_InitTick+0xd8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c70:	4b19      	ldr	r3, [pc, #100]	@ (8000cd8 <HAL_InitTick+0xd8>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c76:	4818      	ldr	r0, [pc, #96]	@ (8000cd8 <HAL_InitTick+0xd8>)
 8000c78:	f003 f88e 	bl	8003d98 <HAL_TIM_Base_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000c82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d11b      	bne.n	8000cc2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c8a:	4813      	ldr	r0, [pc, #76]	@ (8000cd8 <HAL_InitTick+0xd8>)
 8000c8c:	f003 f8e6 	bl	8003e5c <HAL_TIM_Base_Start_IT>
 8000c90:	4603      	mov	r3, r0
 8000c92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000c96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d111      	bne.n	8000cc2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c9e:	2019      	movs	r0, #25
 8000ca0:	f000 fad8 	bl	8001254 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b0f      	cmp	r3, #15
 8000ca8:	d808      	bhi.n	8000cbc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000caa:	2200      	movs	r2, #0
 8000cac:	6879      	ldr	r1, [r7, #4]
 8000cae:	2019      	movs	r0, #25
 8000cb0:	f000 fab4 	bl	800121c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce0 <HAL_InitTick+0xe0>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	e002      	b.n	8000cc2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3730      	adds	r7, #48	@ 0x30
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	431bde83 	.word	0x431bde83
 8000cd8:	200002a0 	.word	0x200002a0
 8000cdc:	40010000 	.word	0x40010000
 8000ce0:	20000004 	.word	0x20000004

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <NMI_Handler+0x4>

08000cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d2c:	4802      	ldr	r0, [pc, #8]	@ (8000d38 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d2e:	f003 f90d 	bl	8003f4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200002a0 	.word	0x200002a0

08000d3c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d40:	4802      	ldr	r0, [pc, #8]	@ (8000d4c <OTG_FS_IRQHandler+0x10>)
 8000d42:	f000 fdba 	bl	80018ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200061b4 	.word	0x200061b4

08000d50 <mod_toggle_led1>:
#include "stm32f7xx_hal.h"

#include "usbd_cdc_if.h"

void mod_toggle_led1(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 8000d54:	2102      	movs	r1, #2
 8000d56:	4802      	ldr	r0, [pc, #8]	@ (8000d60 <mod_toggle_led1+0x10>)
 8000d58:	f000 fc4f 	bl	80015fa <HAL_GPIO_TogglePin>
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40022000 	.word	0x40022000

08000d64 <_mod_led_quick_toggle>:

void _mod_led_quick_toggle(int count)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < count; i++) {
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	e008      	b.n	8000d84 <_mod_led_quick_toggle+0x20>
    mod_toggle_led1();
 8000d72:	f7ff ffed 	bl	8000d50 <mod_toggle_led1>
    HAL_Delay(500);
 8000d76:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d7a:	f000 f973 	bl	8001064 <HAL_Delay>
  for (int i = 0; i < count; i++) {
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	3301      	adds	r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	dbf2      	blt.n	8000d72 <_mod_led_quick_toggle+0xe>
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <mod_send_usb_test_data>:

void mod_send_usb_test_data(void)
{
 8000d98:	b5b0      	push	{r4, r5, r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
  uint8_t ret;
  char testStr[] = "Test msg from STM32F7 !\n";
 8000d9e:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <mod_send_usb_test_data+0x50>)
 8000da0:	1d3c      	adds	r4, r7, #4
 8000da2:	461d      	mov	r5, r3
 8000da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dac:	c403      	stmia	r4!, {r0, r1}
 8000dae:	7022      	strb	r2, [r4, #0]

  ret = CDC_Transmit_FS(testStr, strlen(testStr));
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fa2c 	bl	8000210 <strlen>
 8000db8:	4603      	mov	r3, r0
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f00a fac9 	bl	800b358 <CDC_Transmit_FS>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	77fb      	strb	r3, [r7, #31]
  if (ret != USBD_OK) {
 8000dca:	7ffb      	ldrb	r3, [r7, #31]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d007      	beq.n	8000de0 <mod_send_usb_test_data+0x48>
    _mod_led_quick_toggle(2);
 8000dd0:	2002      	movs	r0, #2
 8000dd2:	f7ff ffc7 	bl	8000d64 <_mod_led_quick_toggle>
    printf("Error from USB fs tx: %d\n", (int)ret);
 8000dd6:	7ffb      	ldrb	r3, [r7, #31]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4804      	ldr	r0, [pc, #16]	@ (8000dec <mod_send_usb_test_data+0x54>)
 8000ddc:	f00b f914 	bl	800c008 <iprintf>
  }
}
 8000de0:	bf00      	nop
 8000de2:	3720      	adds	r7, #32
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bdb0      	pop	{r4, r5, r7, pc}
 8000de8:	0800cd68 	.word	0x0800cd68
 8000dec:	0800cd4c 	.word	0x0800cd4c

08000df0 <mod_send_uart_test_logs>:

void mod_send_uart_test_logs(void)
{
 8000df0:	b5b0      	push	{r4, r5, r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
  char testStr[] = "Test log from STM32F7 !\n";
 8000df6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e28 <mod_send_uart_test_logs+0x38>)
 8000df8:	1d3c      	adds	r4, r7, #4
 8000dfa:	461d      	mov	r5, r3
 8000dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e04:	c403      	stmia	r4!, {r0, r1}
 8000e06:	7022      	strb	r2, [r4, #0]
  log_send_uart_logs(testStr, strlen(testStr));
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fa00 	bl	8000210 <strlen>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fbc9 	bl	80005b0 <log_send_uart_logs>
}
 8000e1e:	bf00      	nop
 8000e20:	3720      	adds	r7, #32
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bdb0      	pop	{r4, r5, r7, pc}
 8000e26:	bf00      	nop
 8000e28:	0800cd84 	.word	0x0800cd84

08000e2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	e00a      	b.n	8000e54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e3e:	f3af 8000 	nop.w
 8000e42:	4601      	mov	r1, r0
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	60ba      	str	r2, [r7, #8]
 8000e4a:	b2ca      	uxtb	r2, r1
 8000e4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	3301      	adds	r3, #1
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	697a      	ldr	r2, [r7, #20]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	dbf0      	blt.n	8000e3e <_read+0x12>
  }

  return len;
 8000e5c:	687b      	ldr	r3, [r7, #4]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	60f8      	str	r0, [r7, #12]
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	e009      	b.n	8000e8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	1c5a      	adds	r2, r3, #1
 8000e7c:	60ba      	str	r2, [r7, #8]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fbaf 	bl	80005e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	dbf1      	blt.n	8000e78 <_write+0x12>
  }
  return len;
 8000e94:	687b      	ldr	r3, [r7, #4]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <_close>:

int _close(int file)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ea6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
 8000ebe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ec6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <_isatty>:

int _isatty(int file)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f10:	4a14      	ldr	r2, [pc, #80]	@ (8000f64 <_sbrk+0x5c>)
 8000f12:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <_sbrk+0x60>)
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f1c:	4b13      	ldr	r3, [pc, #76]	@ (8000f6c <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d102      	bne.n	8000f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f24:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <_sbrk+0x64>)
 8000f26:	4a12      	ldr	r2, [pc, #72]	@ (8000f70 <_sbrk+0x68>)
 8000f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2a:	4b10      	ldr	r3, [pc, #64]	@ (8000f6c <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d207      	bcs.n	8000f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f38:	f00b fa62 	bl	800c400 <__errno>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	220c      	movs	r2, #12
 8000f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f46:	e009      	b.n	8000f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f48:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	@ (8000f6c <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	4a05      	ldr	r2, [pc, #20]	@ (8000f6c <_sbrk+0x64>)
 8000f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20050000 	.word	0x20050000
 8000f68:	00000400 	.word	0x00000400
 8000f6c:	200002ec 	.word	0x200002ec
 8000f70:	20006808 	.word	0x20006808

08000f74 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f78:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <SystemInit+0x20>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f7e:	4a05      	ldr	r2, [pc, #20]	@ (8000f94 <SystemInit+0x20>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f9c:	480d      	ldr	r0, [pc, #52]	@ (8000fd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f9e:	490e      	ldr	r1, [pc, #56]	@ (8000fd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fa0:	4a0e      	ldr	r2, [pc, #56]	@ (8000fdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa4:	e002      	b.n	8000fac <LoopCopyDataInit>

08000fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000faa:	3304      	adds	r3, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb0:	d3f9      	bcc.n	8000fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fb4:	4c0b      	ldr	r4, [pc, #44]	@ (8000fe4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb8:	e001      	b.n	8000fbe <LoopFillZerobss>

08000fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fbc:	3204      	adds	r2, #4

08000fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc0:	d3fb      	bcc.n	8000fba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fc2:	f7ff ffd7 	bl	8000f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fc6:	f00b fa21 	bl	800c40c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fca:	f7ff fb97 	bl	80006fc <main>
  bx  lr    
 8000fce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fd0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd8:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8000fdc:	0800ce80 	.word	0x0800ce80
  ldr r2, =_sbss
 8000fe0:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8000fe4:	20006808 	.word	0x20006808

08000fe8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <ADC_IRQHandler>
	...

08000fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8001020 <HAL_Init+0x34>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a0a      	ldr	r2, [pc, #40]	@ (8001020 <HAL_Init+0x34>)
 8000ff6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ffa:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ffc:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <HAL_Init+0x34>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a07      	ldr	r2, [pc, #28]	@ (8001020 <HAL_Init+0x34>)
 8001002:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001006:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001008:	2003      	movs	r0, #3
 800100a:	f000 f8fc 	bl	8001206 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100e:	200f      	movs	r0, #15
 8001010:	f7ff fdf6 	bl	8000c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001014:	f7ff fcfc 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023c00 	.word	0x40023c00

08001024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001028:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <HAL_IncTick+0x20>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <HAL_IncTick+0x24>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a04      	ldr	r2, [pc, #16]	@ (8001048 <HAL_IncTick+0x24>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000008 	.word	0x20000008
 8001048:	200002f0 	.word	0x200002f0

0800104c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b03      	ldr	r3, [pc, #12]	@ (8001060 <HAL_GetTick+0x14>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	200002f0 	.word	0x200002f0

08001064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800106c:	f7ff ffee 	bl	800104c <HAL_GetTick>
 8001070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800107c:	d005      	beq.n	800108a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107e:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <HAL_Delay+0x44>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4413      	add	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800108a:	bf00      	nop
 800108c:	f7ff ffde 	bl	800104c <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	429a      	cmp	r2, r3
 800109a:	d8f7      	bhi.n	800108c <HAL_Delay+0x28>
  {
  }
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000008 	.word	0x20000008

080010ac <__NVIC_SetPriorityGrouping>:
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010bc:	4b0b      	ldr	r3, [pc, #44]	@ (80010ec <__NVIC_SetPriorityGrouping+0x40>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010c8:	4013      	ands	r3, r2
 80010ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <__NVIC_SetPriorityGrouping+0x44>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010da:	4a04      	ldr	r2, [pc, #16]	@ (80010ec <__NVIC_SetPriorityGrouping+0x40>)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	60d3      	str	r3, [r2, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00
 80010f0:	05fa0000 	.word	0x05fa0000

080010f4 <__NVIC_GetPriorityGrouping>:
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f8:	4b04      	ldr	r3, [pc, #16]	@ (800110c <__NVIC_GetPriorityGrouping+0x18>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	0a1b      	lsrs	r3, r3, #8
 80010fe:	f003 0307 	and.w	r3, r3, #7
}
 8001102:	4618      	mov	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_EnableIRQ>:
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	2b00      	cmp	r3, #0
 8001120:	db0b      	blt.n	800113a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	f003 021f 	and.w	r2, r3, #31
 8001128:	4907      	ldr	r1, [pc, #28]	@ (8001148 <__NVIC_EnableIRQ+0x38>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	095b      	lsrs	r3, r3, #5
 8001130:	2001      	movs	r0, #1
 8001132:	fa00 f202 	lsl.w	r2, r0, r2
 8001136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000e100 	.word	0xe000e100

0800114c <__NVIC_SetPriority>:
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	6039      	str	r1, [r7, #0]
 8001156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115c:	2b00      	cmp	r3, #0
 800115e:	db0a      	blt.n	8001176 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	b2da      	uxtb	r2, r3
 8001164:	490c      	ldr	r1, [pc, #48]	@ (8001198 <__NVIC_SetPriority+0x4c>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	0112      	lsls	r2, r2, #4
 800116c:	b2d2      	uxtb	r2, r2
 800116e:	440b      	add	r3, r1
 8001170:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001174:	e00a      	b.n	800118c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4908      	ldr	r1, [pc, #32]	@ (800119c <__NVIC_SetPriority+0x50>)
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	f003 030f 	and.w	r3, r3, #15
 8001182:	3b04      	subs	r3, #4
 8001184:	0112      	lsls	r2, r2, #4
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	440b      	add	r3, r1
 800118a:	761a      	strb	r2, [r3, #24]
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000e100 	.word	0xe000e100
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <NVIC_EncodePriority>:
{
 80011a0:	b480      	push	{r7}
 80011a2:	b089      	sub	sp, #36	@ 0x24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f1c3 0307 	rsb	r3, r3, #7
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	bf28      	it	cs
 80011be:	2304      	movcs	r3, #4
 80011c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3304      	adds	r3, #4
 80011c6:	2b06      	cmp	r3, #6
 80011c8:	d902      	bls.n	80011d0 <NVIC_EncodePriority+0x30>
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3b03      	subs	r3, #3
 80011ce:	e000      	b.n	80011d2 <NVIC_EncodePriority+0x32>
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43da      	mvns	r2, r3
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	401a      	ands	r2, r3
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	fa01 f303 	lsl.w	r3, r1, r3
 80011f2:	43d9      	mvns	r1, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	4313      	orrs	r3, r2
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3724      	adds	r7, #36	@ 0x24
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff ff4c 	bl	80010ac <__NVIC_SetPriorityGrouping>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
 8001228:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800122e:	f7ff ff61 	bl	80010f4 <__NVIC_GetPriorityGrouping>
 8001232:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	6978      	ldr	r0, [r7, #20]
 800123a:	f7ff ffb1 	bl	80011a0 <NVIC_EncodePriority>
 800123e:	4602      	mov	r2, r0
 8001240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001244:	4611      	mov	r1, r2
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ff80 	bl	800114c <__NVIC_SetPriority>
}
 800124c:	bf00      	nop
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff54 	bl	8001110 <__NVIC_EnableIRQ>
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	@ 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
 800128e:	e175      	b.n	800157c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001290:	2201      	movs	r2, #1
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	f040 8164 	bne.w	8001576 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d005      	beq.n	80012c6 <HAL_GPIO_Init+0x56>
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d130      	bne.n	8001328 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2203      	movs	r2, #3
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	68da      	ldr	r2, [r3, #12]
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012fc:	2201      	movs	r2, #1
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	091b      	lsrs	r3, r3, #4
 8001312:	f003 0201 	and.w	r2, r3, #1
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b03      	cmp	r3, #3
 8001332:	d017      	beq.n	8001364 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	2203      	movs	r2, #3
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d123      	bne.n	80013b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	08da      	lsrs	r2, r3, #3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3208      	adds	r2, #8
 8001378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	220f      	movs	r2, #15
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	691a      	ldr	r2, [r3, #16]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	08da      	lsrs	r2, r3, #3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3208      	adds	r2, #8
 80013b2:	69b9      	ldr	r1, [r7, #24]
 80013b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	2203      	movs	r2, #3
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 0203 	and.w	r2, r3, #3
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 80be 	beq.w	8001576 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fa:	4b66      	ldr	r3, [pc, #408]	@ (8001594 <HAL_GPIO_Init+0x324>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fe:	4a65      	ldr	r2, [pc, #404]	@ (8001594 <HAL_GPIO_Init+0x324>)
 8001400:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001404:	6453      	str	r3, [r2, #68]	@ 0x44
 8001406:	4b63      	ldr	r3, [pc, #396]	@ (8001594 <HAL_GPIO_Init+0x324>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001412:	4a61      	ldr	r2, [pc, #388]	@ (8001598 <HAL_GPIO_Init+0x328>)
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	3302      	adds	r3, #2
 800141a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	220f      	movs	r2, #15
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a58      	ldr	r2, [pc, #352]	@ (800159c <HAL_GPIO_Init+0x32c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d037      	beq.n	80014ae <HAL_GPIO_Init+0x23e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a57      	ldr	r2, [pc, #348]	@ (80015a0 <HAL_GPIO_Init+0x330>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d031      	beq.n	80014aa <HAL_GPIO_Init+0x23a>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a56      	ldr	r2, [pc, #344]	@ (80015a4 <HAL_GPIO_Init+0x334>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d02b      	beq.n	80014a6 <HAL_GPIO_Init+0x236>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a55      	ldr	r2, [pc, #340]	@ (80015a8 <HAL_GPIO_Init+0x338>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d025      	beq.n	80014a2 <HAL_GPIO_Init+0x232>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a54      	ldr	r2, [pc, #336]	@ (80015ac <HAL_GPIO_Init+0x33c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d01f      	beq.n	800149e <HAL_GPIO_Init+0x22e>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a53      	ldr	r2, [pc, #332]	@ (80015b0 <HAL_GPIO_Init+0x340>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d019      	beq.n	800149a <HAL_GPIO_Init+0x22a>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a52      	ldr	r2, [pc, #328]	@ (80015b4 <HAL_GPIO_Init+0x344>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d013      	beq.n	8001496 <HAL_GPIO_Init+0x226>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a51      	ldr	r2, [pc, #324]	@ (80015b8 <HAL_GPIO_Init+0x348>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d00d      	beq.n	8001492 <HAL_GPIO_Init+0x222>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a50      	ldr	r2, [pc, #320]	@ (80015bc <HAL_GPIO_Init+0x34c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d007      	beq.n	800148e <HAL_GPIO_Init+0x21e>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a4f      	ldr	r2, [pc, #316]	@ (80015c0 <HAL_GPIO_Init+0x350>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d101      	bne.n	800148a <HAL_GPIO_Init+0x21a>
 8001486:	2309      	movs	r3, #9
 8001488:	e012      	b.n	80014b0 <HAL_GPIO_Init+0x240>
 800148a:	230a      	movs	r3, #10
 800148c:	e010      	b.n	80014b0 <HAL_GPIO_Init+0x240>
 800148e:	2308      	movs	r3, #8
 8001490:	e00e      	b.n	80014b0 <HAL_GPIO_Init+0x240>
 8001492:	2307      	movs	r3, #7
 8001494:	e00c      	b.n	80014b0 <HAL_GPIO_Init+0x240>
 8001496:	2306      	movs	r3, #6
 8001498:	e00a      	b.n	80014b0 <HAL_GPIO_Init+0x240>
 800149a:	2305      	movs	r3, #5
 800149c:	e008      	b.n	80014b0 <HAL_GPIO_Init+0x240>
 800149e:	2304      	movs	r3, #4
 80014a0:	e006      	b.n	80014b0 <HAL_GPIO_Init+0x240>
 80014a2:	2303      	movs	r3, #3
 80014a4:	e004      	b.n	80014b0 <HAL_GPIO_Init+0x240>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e002      	b.n	80014b0 <HAL_GPIO_Init+0x240>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <HAL_GPIO_Init+0x240>
 80014ae:	2300      	movs	r3, #0
 80014b0:	69fa      	ldr	r2, [r7, #28]
 80014b2:	f002 0203 	and.w	r2, r2, #3
 80014b6:	0092      	lsls	r2, r2, #2
 80014b8:	4093      	lsls	r3, r2
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80014c0:	4935      	ldr	r1, [pc, #212]	@ (8001598 <HAL_GPIO_Init+0x328>)
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	3302      	adds	r3, #2
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ce:	4b3d      	ldr	r3, [pc, #244]	@ (80015c4 <HAL_GPIO_Init+0x354>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4013      	ands	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014f2:	4a34      	ldr	r2, [pc, #208]	@ (80015c4 <HAL_GPIO_Init+0x354>)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014f8:	4b32      	ldr	r3, [pc, #200]	@ (80015c4 <HAL_GPIO_Init+0x354>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800151c:	4a29      	ldr	r2, [pc, #164]	@ (80015c4 <HAL_GPIO_Init+0x354>)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001522:	4b28      	ldr	r3, [pc, #160]	@ (80015c4 <HAL_GPIO_Init+0x354>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001546:	4a1f      	ldr	r2, [pc, #124]	@ (80015c4 <HAL_GPIO_Init+0x354>)
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800154c:	4b1d      	ldr	r3, [pc, #116]	@ (80015c4 <HAL_GPIO_Init+0x354>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001570:	4a14      	ldr	r2, [pc, #80]	@ (80015c4 <HAL_GPIO_Init+0x354>)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3301      	adds	r3, #1
 800157a:	61fb      	str	r3, [r7, #28]
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	2b0f      	cmp	r3, #15
 8001580:	f67f ae86 	bls.w	8001290 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3724      	adds	r7, #36	@ 0x24
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800
 8001598:	40013800 	.word	0x40013800
 800159c:	40020000 	.word	0x40020000
 80015a0:	40020400 	.word	0x40020400
 80015a4:	40020800 	.word	0x40020800
 80015a8:	40020c00 	.word	0x40020c00
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40021400 	.word	0x40021400
 80015b4:	40021800 	.word	0x40021800
 80015b8:	40021c00 	.word	0x40021c00
 80015bc:	40022000 	.word	0x40022000
 80015c0:	40022400 	.word	0x40022400
 80015c4:	40013c00 	.word	0x40013c00

080015c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	807b      	strh	r3, [r7, #2]
 80015d4:	4613      	mov	r3, r2
 80015d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015d8:	787b      	ldrb	r3, [r7, #1]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015de:	887a      	ldrh	r2, [r7, #2]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80015e4:	e003      	b.n	80015ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80015e6:	887b      	ldrh	r3, [r7, #2]
 80015e8:	041a      	lsls	r2, r3, #16
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	619a      	str	r2, [r3, #24]
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b085      	sub	sp, #20
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	460b      	mov	r3, r1
 8001604:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800160c:	887a      	ldrh	r2, [r7, #2]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4013      	ands	r3, r2
 8001612:	041a      	lsls	r2, r3, #16
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	43d9      	mvns	r1, r3
 8001618:	887b      	ldrh	r3, [r7, #2]
 800161a:	400b      	ands	r3, r1
 800161c:	431a      	orrs	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	619a      	str	r2, [r3, #24]
}
 8001622:	bf00      	nop
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800162e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001630:	b08f      	sub	sp, #60	@ 0x3c
 8001632:	af0a      	add	r7, sp, #40	@ 0x28
 8001634:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e116      	b.n	800186e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d106      	bne.n	8001660 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f009 ffd6 	bl	800b60c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2203      	movs	r2, #3
 8001664:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800166c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f003 fc4b 	bl	8004f1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	687e      	ldr	r6, [r7, #4]
 800168c:	466d      	mov	r5, sp
 800168e:	f106 0410 	add.w	r4, r6, #16
 8001692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800169e:	e885 0003 	stmia.w	r5, {r0, r1}
 80016a2:	1d33      	adds	r3, r6, #4
 80016a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016a6:	6838      	ldr	r0, [r7, #0]
 80016a8:	f003 fb2c 	bl	8004d04 <USB_CoreInit>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d005      	beq.n	80016be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2202      	movs	r2, #2
 80016b6:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e0d7      	b.n	800186e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f003 fc39 	bl	8004f3c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]
 80016ce:	e04a      	b.n	8001766 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016d0:	7bfa      	ldrb	r2, [r7, #15]
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	4413      	add	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	333d      	adds	r3, #61	@ 0x3d
 80016e0:	2201      	movs	r2, #1
 80016e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80016e4:	7bfa      	ldrb	r2, [r7, #15]
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	4413      	add	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	333c      	adds	r3, #60	@ 0x3c
 80016f4:	7bfa      	ldrb	r2, [r7, #15]
 80016f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80016f8:	7bfa      	ldrb	r2, [r7, #15]
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	b298      	uxth	r0, r3
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	4613      	mov	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4413      	add	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	440b      	add	r3, r1
 800170a:	3344      	adds	r3, #68	@ 0x44
 800170c:	4602      	mov	r2, r0
 800170e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001710:	7bfa      	ldrb	r2, [r7, #15]
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4413      	add	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	3340      	adds	r3, #64	@ 0x40
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001724:	7bfa      	ldrb	r2, [r7, #15]
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	4413      	add	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	3348      	adds	r3, #72	@ 0x48
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001738:	7bfa      	ldrb	r2, [r7, #15]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	4413      	add	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	440b      	add	r3, r1
 8001746:	334c      	adds	r3, #76	@ 0x4c
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800174c:	7bfa      	ldrb	r2, [r7, #15]
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	4413      	add	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	3354      	adds	r3, #84	@ 0x54
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	3301      	adds	r3, #1
 8001764:	73fb      	strb	r3, [r7, #15]
 8001766:	7bfa      	ldrb	r2, [r7, #15]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	429a      	cmp	r2, r3
 800176e:	d3af      	bcc.n	80016d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001770:	2300      	movs	r3, #0
 8001772:	73fb      	strb	r3, [r7, #15]
 8001774:	e044      	b.n	8001800 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001776:	7bfa      	ldrb	r2, [r7, #15]
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4413      	add	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	440b      	add	r3, r1
 8001784:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800178c:	7bfa      	ldrb	r2, [r7, #15]
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800179e:	7bfa      	ldrb	r2, [r7, #15]
 80017a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017a2:	7bfa      	ldrb	r2, [r7, #15]
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	4613      	mov	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4413      	add	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	440b      	add	r3, r1
 80017b0:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017b8:	7bfa      	ldrb	r2, [r7, #15]
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	4613      	mov	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	4413      	add	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	440b      	add	r3, r1
 80017c6:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017ce:	7bfa      	ldrb	r2, [r7, #15]
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4413      	add	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	440b      	add	r3, r1
 80017dc:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80017e4:	7bfa      	ldrb	r2, [r7, #15]
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	4413      	add	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	3301      	adds	r3, #1
 80017fe:	73fb      	strb	r3, [r7, #15]
 8001800:	7bfa      	ldrb	r2, [r7, #15]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	429a      	cmp	r2, r3
 8001808:	d3b5      	bcc.n	8001776 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	687e      	ldr	r6, [r7, #4]
 8001812:	466d      	mov	r5, sp
 8001814:	f106 0410 	add.w	r4, r6, #16
 8001818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800181c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001820:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001824:	e885 0003 	stmia.w	r5, {r0, r1}
 8001828:	1d33      	adds	r3, r6, #4
 800182a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800182c:	6838      	ldr	r0, [r7, #0]
 800182e:	f003 fbd1 	bl	8004fd4 <USB_DevInit>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d005      	beq.n	8001844 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2202      	movs	r2, #2
 800183c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e014      	b.n	800186e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001858:	2b01      	cmp	r3, #1
 800185a:	d102      	bne.n	8001862 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f001 f97b 	bl	8002b58 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f004 fd1f 	bl	80062aa <USB_DevDisconnect>

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001876 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8001884:	2b01      	cmp	r3, #1
 8001886:	d101      	bne.n	800188c <HAL_PCD_Start+0x16>
 8001888:	2302      	movs	r3, #2
 800188a:	e012      	b.n	80018b2 <HAL_PCD_Start+0x3c>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f003 fb2d 	bl	8004ef8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f004 fce0 	bl	8006268 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80018ba:	b590      	push	{r4, r7, lr}
 80018bc:	b08d      	sub	sp, #52	@ 0x34
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f004 fd9e 	bl	8006412 <USB_GetMode>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f040 84b7 	bne.w	800224c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f004 fd02 	bl	80062ec <USB_ReadInterrupts>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 84ad 	beq.w	800224a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f004 fcef 	bl	80062ec <USB_ReadInterrupts>
 800190e:	4603      	mov	r3, r0
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b02      	cmp	r3, #2
 8001916:	d107      	bne.n	8001928 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f002 0202 	and.w	r2, r2, #2
 8001926:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f004 fcdd 	bl	80062ec <USB_ReadInterrupts>
 8001932:	4603      	mov	r3, r0
 8001934:	f003 0310 	and.w	r3, r3, #16
 8001938:	2b10      	cmp	r3, #16
 800193a:	d161      	bne.n	8001a00 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	699a      	ldr	r2, [r3, #24]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0210 	bic.w	r2, r2, #16
 800194a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	f003 020f 	and.w	r2, r3, #15
 8001958:	4613      	mov	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	4413      	add	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	4413      	add	r3, r2
 8001968:	3304      	adds	r3, #4
 800196a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	0c5b      	lsrs	r3, r3, #17
 8001970:	f003 030f 	and.w	r3, r3, #15
 8001974:	2b02      	cmp	r3, #2
 8001976:	d124      	bne.n	80019c2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800197e:	4013      	ands	r3, r2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d035      	beq.n	80019f0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	091b      	lsrs	r3, r3, #4
 800198c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800198e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001992:	b29b      	uxth	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	6a38      	ldr	r0, [r7, #32]
 8001998:	f004 fb14 	bl	8005fc4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	691a      	ldr	r2, [r3, #16]
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	091b      	lsrs	r3, r3, #4
 80019a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019a8:	441a      	add	r2, r3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	6a1a      	ldr	r2, [r3, #32]
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019ba:	441a      	add	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	621a      	str	r2, [r3, #32]
 80019c0:	e016      	b.n	80019f0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	0c5b      	lsrs	r3, r3, #17
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	2b06      	cmp	r3, #6
 80019cc:	d110      	bne.n	80019f0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80019d4:	2208      	movs	r2, #8
 80019d6:	4619      	mov	r1, r3
 80019d8:	6a38      	ldr	r0, [r7, #32]
 80019da:	f004 faf3 	bl	8005fc4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	6a1a      	ldr	r2, [r3, #32]
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	091b      	lsrs	r3, r3, #4
 80019e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019ea:	441a      	add	r2, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	699a      	ldr	r2, [r3, #24]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0210 	orr.w	r2, r2, #16
 80019fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f004 fc71 	bl	80062ec <USB_ReadInterrupts>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a10:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001a14:	f040 80a7 	bne.w	8001b66 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f004 fc76 	bl	8006312 <USB_ReadDevAllOutEpInterrupt>
 8001a26:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001a28:	e099      	b.n	8001b5e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 808e 	beq.w	8001b52 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f004 fc9a 	bl	800637a <USB_ReadDevOutEPInterrupt>
 8001a46:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00c      	beq.n	8001a6c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a54:	015a      	lsls	r2, r3, #5
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a5e:	461a      	mov	r2, r3
 8001a60:	2301      	movs	r3, #1
 8001a62:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001a64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 fef0 	bl	800284c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00c      	beq.n	8001a90 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a78:	015a      	lsls	r2, r3, #5
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a82:	461a      	mov	r2, r3
 8001a84:	2308      	movs	r3, #8
 8001a86:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001a88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 ffc6 	bl	8002a1c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f003 0310 	and.w	r3, r3, #16
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d008      	beq.n	8001aac <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9c:	015a      	lsls	r2, r3, #5
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	2310      	movs	r3, #16
 8001aaa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d030      	beq.n	8001b18 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001abe:	2b80      	cmp	r3, #128	@ 0x80
 8001ac0:	d109      	bne.n	8001ad6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	69fa      	ldr	r2, [r7, #28]
 8001acc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ad0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ad4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ad8:	4613      	mov	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	4413      	add	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3304      	adds	r3, #4
 8001aea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	78db      	ldrb	r3, [r3, #3]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d108      	bne.n	8001b06 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	2200      	movs	r2, #0
 8001af8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	4619      	mov	r1, r3
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f009 feb7 	bl	800b874 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b08:	015a      	lsls	r2, r3, #5
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b12:	461a      	mov	r2, r3
 8001b14:	2302      	movs	r3, #2
 8001b16:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	f003 0320 	and.w	r3, r3, #32
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d008      	beq.n	8001b34 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b24:	015a      	lsls	r2, r3, #5
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	4413      	add	r3, r2
 8001b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b2e:	461a      	mov	r2, r3
 8001b30:	2320      	movs	r3, #32
 8001b32:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d009      	beq.n	8001b52 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b40:	015a      	lsls	r2, r3, #5
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	4413      	add	r3, r2
 8001b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b50:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b54:	3301      	adds	r3, #1
 8001b56:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b5a:	085b      	lsrs	r3, r3, #1
 8001b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f47f af62 	bne.w	8001a2a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f004 fbbe 	bl	80062ec <USB_ReadInterrupts>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001b7a:	f040 80db 	bne.w	8001d34 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f004 fbdf 	bl	8006346 <USB_ReadDevAllInEpInterrupt>
 8001b88:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001b8e:	e0cd      	b.n	8001d2c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 80c2 	beq.w	8001d20 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f004 fc05 	bl	80063b6 <USB_ReadDevInEPInterrupt>
 8001bac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d057      	beq.n	8001c68 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69f9      	ldr	r1, [r7, #28]
 8001bd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001bd8:	4013      	ands	r3, r2
 8001bda:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bde:	015a      	lsls	r2, r3, #5
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	4413      	add	r3, r2
 8001be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001be8:	461a      	mov	r2, r3
 8001bea:	2301      	movs	r3, #1
 8001bec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d132      	bne.n	8001c5c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4413      	add	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	440b      	add	r3, r1
 8001c04:	334c      	adds	r3, #76	@ 0x4c
 8001c06:	6819      	ldr	r1, [r3, #0]
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4413      	add	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4403      	add	r3, r0
 8001c16:	3348      	adds	r3, #72	@ 0x48
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4419      	add	r1, r3
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c20:	4613      	mov	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4413      	add	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4403      	add	r3, r0
 8001c2a:	334c      	adds	r3, #76	@ 0x4c
 8001c2c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d113      	bne.n	8001c5c <HAL_PCD_IRQHandler+0x3a2>
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c38:	4613      	mov	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	3354      	adds	r3, #84	@ 0x54
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d108      	bne.n	8001c5c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8001c54:	461a      	mov	r2, r3
 8001c56:	2101      	movs	r1, #1
 8001c58:	f004 fc0e 	bl	8006478 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	4619      	mov	r1, r3
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f009 fd81 	bl	800b76a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d008      	beq.n	8001c84 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c74:	015a      	lsls	r2, r3, #5
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	4413      	add	r3, r2
 8001c7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c7e:	461a      	mov	r2, r3
 8001c80:	2308      	movs	r3, #8
 8001c82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d008      	beq.n	8001ca0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c90:	015a      	lsls	r2, r3, #5
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	4413      	add	r3, r2
 8001c96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	2310      	movs	r3, #16
 8001c9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d008      	beq.n	8001cbc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cac:	015a      	lsls	r2, r3, #5
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	2340      	movs	r3, #64	@ 0x40
 8001cba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d023      	beq.n	8001d0e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001cc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001cc8:	6a38      	ldr	r0, [r7, #32]
 8001cca:	f003 fae1 	bl	8005290 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	3338      	adds	r3, #56	@ 0x38
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	3304      	adds	r3, #4
 8001ce0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	78db      	ldrb	r3, [r3, #3]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d108      	bne.n	8001cfc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	2200      	movs	r2, #0
 8001cee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f009 fdce 	bl	800b898 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfe:	015a      	lsls	r2, r3, #5
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	4413      	add	r3, r2
 8001d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d08:	461a      	mov	r2, r3
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001d18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 fd08 	bl	8002730 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d22:	3301      	adds	r3, #1
 8001d24:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d28:	085b      	lsrs	r3, r3, #1
 8001d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f47f af2e 	bne.w	8001b90 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f004 fad7 	bl	80062ec <USB_ReadInterrupts>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001d44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001d48:	d122      	bne.n	8001d90 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	69fa      	ldr	r2, [r7, #28]
 8001d54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d58:	f023 0301 	bic.w	r3, r3, #1
 8001d5c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d108      	bne.n	8001d7a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001d70:	2100      	movs	r1, #0
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f009 ff48 	bl	800bc08 <HAL_PCDEx_LPM_Callback>
 8001d78:	e002      	b.n	8001d80 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f009 fd6c 	bl	800b858 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695a      	ldr	r2, [r3, #20]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001d8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f004 faa9 	bl	80062ec <USB_ReadInterrupts>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001da0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001da4:	d112      	bne.n	8001dcc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d102      	bne.n	8001dbc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f009 fd28 	bl	800b80c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	695a      	ldr	r2, [r3, #20]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001dca:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f004 fa8b 	bl	80062ec <USB_ReadInterrupts>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ddc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001de0:	d121      	bne.n	8001e26 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695a      	ldr	r2, [r3, #20]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8001df0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d111      	bne.n	8001e20 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	f003 020f 	and.w	r2, r3, #15
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001e16:	2101      	movs	r1, #1
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f009 fef5 	bl	800bc08 <HAL_PCDEx_LPM_Callback>
 8001e1e:	e002      	b.n	8001e26 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f009 fcf3 	bl	800b80c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f004 fa5e 	bl	80062ec <USB_ReadInterrupts>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e3a:	f040 80b7 	bne.w	8001fac <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	69fa      	ldr	r2, [r7, #28]
 8001e48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e4c:	f023 0301 	bic.w	r3, r3, #1
 8001e50:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2110      	movs	r1, #16
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f003 fa19 	bl	8005290 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e62:	e046      	b.n	8001ef2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e66:	015a      	lsls	r2, r3, #5
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e70:	461a      	mov	r2, r3
 8001e72:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001e76:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e7a:	015a      	lsls	r2, r3, #5
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	4413      	add	r3, r2
 8001e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e88:	0151      	lsls	r1, r2, #5
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	440a      	add	r2, r1
 8001e8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001e92:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001e96:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e9a:	015a      	lsls	r2, r3, #5
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001eaa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eae:	015a      	lsls	r2, r3, #5
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ebc:	0151      	lsls	r1, r2, #5
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	440a      	add	r2, r1
 8001ec2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001ec6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001eca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ece:	015a      	lsls	r2, r3, #5
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001edc:	0151      	lsls	r1, r2, #5
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	440a      	add	r2, r1
 8001ee2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001ee6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001eea:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eee:	3301      	adds	r3, #1
 8001ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d3b3      	bcc.n	8001e64 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	69fa      	ldr	r2, [r7, #28]
 8001f06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f0a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001f0e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d016      	beq.n	8001f46 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f22:	69fa      	ldr	r2, [r7, #28]
 8001f24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f28:	f043 030b 	orr.w	r3, r3, #11
 8001f2c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f38:	69fa      	ldr	r2, [r7, #28]
 8001f3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f3e:	f043 030b 	orr.w	r3, r3, #11
 8001f42:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f44:	e015      	b.n	8001f72 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f4c:	695a      	ldr	r2, [r3, #20]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f54:	4619      	mov	r1, r3
 8001f56:	f242 032b 	movw	r3, #8235	@ 0x202b
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	69fa      	ldr	r2, [r7, #28]
 8001f68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f6c:	f043 030b 	orr.w	r3, r3, #11
 8001f70:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f80:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001f84:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6818      	ldr	r0, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f96:	461a      	mov	r2, r3
 8001f98:	f004 fa6e 	bl	8006478 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001faa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f004 f99b 	bl	80062ec <USB_ReadInterrupts>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fc0:	d124      	bne.n	800200c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f004 fa32 	bl	8006430 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f003 f9da 	bl	800538a <USB_GetDevSpeed>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	461a      	mov	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681c      	ldr	r4, [r3, #0]
 8001fe2:	f001 fa83 	bl	80034ec <HAL_RCC_GetHCLKFreq>
 8001fe6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	f002 fedf 	bl	8004db4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f009 fbdf 	bl	800b7ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	695a      	ldr	r2, [r3, #20]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800200a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f004 f96b 	bl	80062ec <USB_ReadInterrupts>
 8002016:	4603      	mov	r3, r0
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	2b08      	cmp	r3, #8
 800201e:	d10a      	bne.n	8002036 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f009 fbbc 	bl	800b79e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695a      	ldr	r2, [r3, #20]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f002 0208 	and.w	r2, r2, #8
 8002034:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f004 f956 	bl	80062ec <USB_ReadInterrupts>
 8002040:	4603      	mov	r3, r0
 8002042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002046:	2b80      	cmp	r3, #128	@ 0x80
 8002048:	d122      	bne.n	8002090 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002056:	2301      	movs	r3, #1
 8002058:	627b      	str	r3, [r7, #36]	@ 0x24
 800205a:	e014      	b.n	8002086 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d105      	bne.n	8002080 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002076:	b2db      	uxtb	r3, r3
 8002078:	4619      	mov	r1, r3
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 fb27 	bl	80026ce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002082:	3301      	adds	r3, #1
 8002084:	627b      	str	r3, [r7, #36]	@ 0x24
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800208c:	429a      	cmp	r2, r3
 800208e:	d3e5      	bcc.n	800205c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f004 f929 	bl	80062ec <USB_ReadInterrupts>
 800209a:	4603      	mov	r3, r0
 800209c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020a4:	d13b      	bne.n	800211e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020a6:	2301      	movs	r3, #1
 80020a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80020aa:	e02b      	b.n	8002104 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80020ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	3340      	adds	r3, #64	@ 0x40
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d115      	bne.n	80020fe <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80020d2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	da12      	bge.n	80020fe <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4413      	add	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	333f      	adds	r3, #63	@ 0x3f
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80020ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	4619      	mov	r1, r3
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 fae8 	bl	80026ce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	3301      	adds	r3, #1
 8002102:	627b      	str	r3, [r7, #36]	@ 0x24
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800210a:	429a      	cmp	r2, r3
 800210c:	d3ce      	bcc.n	80020ac <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695a      	ldr	r2, [r3, #20]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800211c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f004 f8e2 	bl	80062ec <USB_ReadInterrupts>
 8002128:	4603      	mov	r3, r0
 800212a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800212e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002132:	d155      	bne.n	80021e0 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002134:	2301      	movs	r3, #1
 8002136:	627b      	str	r3, [r7, #36]	@ 0x24
 8002138:	e045      	b.n	80021c6 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213c:	015a      	lsls	r2, r3, #5
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	4413      	add	r3, r2
 8002142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d12e      	bne.n	80021c0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002162:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002164:	2b00      	cmp	r3, #0
 8002166:	da2b      	bge.n	80021c0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8002174:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002178:	429a      	cmp	r2, r3
 800217a:	d121      	bne.n	80021c0 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10a      	bne.n	80021c0 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	69fa      	ldr	r2, [r7, #28]
 80021b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021bc:	6053      	str	r3, [r2, #4]
            break;
 80021be:	e007      	b.n	80021d0 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c2:	3301      	adds	r3, #1
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d3b4      	bcc.n	800213a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695a      	ldr	r2, [r3, #20]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80021de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f004 f881 	bl	80062ec <USB_ReadInterrupts>
 80021ea:	4603      	mov	r3, r0
 80021ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80021f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021f4:	d10a      	bne.n	800220c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f009 fb60 	bl	800b8bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800220a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f004 f86b 	bl	80062ec <USB_ReadInterrupts>
 8002216:	4603      	mov	r3, r0
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b04      	cmp	r3, #4
 800221e:	d115      	bne.n	800224c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f009 fb50 	bl	800b8d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6859      	ldr	r1, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	430a      	orrs	r2, r1
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	e000      	b.n	800224c <HAL_PCD_IRQHandler+0x992>
      return;
 800224a:	bf00      	nop
    }
  }
}
 800224c:	3734      	adds	r7, #52	@ 0x34
 800224e:	46bd      	mov	sp, r7
 8002250:	bd90      	pop	{r4, r7, pc}

08002252 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	460b      	mov	r3, r1
 800225c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_PCD_SetAddress+0x1a>
 8002268:	2302      	movs	r3, #2
 800226a:	e013      	b.n	8002294 <HAL_PCD_SetAddress+0x42>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	78fa      	ldrb	r2, [r7, #3]
 8002278:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	78fa      	ldrb	r2, [r7, #3]
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f003 ffc9 	bl	800621c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	4608      	mov	r0, r1
 80022a6:	4611      	mov	r1, r2
 80022a8:	461a      	mov	r2, r3
 80022aa:	4603      	mov	r3, r0
 80022ac:	70fb      	strb	r3, [r7, #3]
 80022ae:	460b      	mov	r3, r1
 80022b0:	803b      	strh	r3, [r7, #0]
 80022b2:	4613      	mov	r3, r2
 80022b4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	da0f      	bge.n	80022e2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	f003 020f 	and.w	r2, r3, #15
 80022c8:	4613      	mov	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4413      	add	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	3338      	adds	r3, #56	@ 0x38
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	4413      	add	r3, r2
 80022d6:	3304      	adds	r3, #4
 80022d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2201      	movs	r2, #1
 80022de:	705a      	strb	r2, [r3, #1]
 80022e0:	e00f      	b.n	8002302 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022e2:	78fb      	ldrb	r3, [r7, #3]
 80022e4:	f003 020f 	and.w	r2, r3, #15
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	4413      	add	r3, r2
 80022f8:	3304      	adds	r3, #4
 80022fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002302:	78fb      	ldrb	r3, [r7, #3]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	b2da      	uxtb	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800230e:	883a      	ldrh	r2, [r7, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	78ba      	ldrb	r2, [r7, #2]
 8002318:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	785b      	ldrb	r3, [r3, #1]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d004      	beq.n	800232c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800232c:	78bb      	ldrb	r3, [r7, #2]
 800232e:	2b02      	cmp	r3, #2
 8002330:	d102      	bne.n	8002338 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_PCD_EP_Open+0xaa>
 8002342:	2302      	movs	r3, #2
 8002344:	e00e      	b.n	8002364 <HAL_PCD_EP_Open+0xc8>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68f9      	ldr	r1, [r7, #12]
 8002354:	4618      	mov	r0, r3
 8002356:	f003 f83d 	bl	80053d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8002362:	7afb      	ldrb	r3, [r7, #11]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002378:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800237c:	2b00      	cmp	r3, #0
 800237e:	da0f      	bge.n	80023a0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002380:	78fb      	ldrb	r3, [r7, #3]
 8002382:	f003 020f 	and.w	r2, r3, #15
 8002386:	4613      	mov	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4413      	add	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	3338      	adds	r3, #56	@ 0x38
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	4413      	add	r3, r2
 8002394:	3304      	adds	r3, #4
 8002396:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2201      	movs	r2, #1
 800239c:	705a      	strb	r2, [r3, #1]
 800239e:	e00f      	b.n	80023c0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	f003 020f 	and.w	r2, r3, #15
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	3304      	adds	r3, #4
 80023b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d101      	bne.n	80023da <HAL_PCD_EP_Close+0x6e>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e00e      	b.n	80023f8 <HAL_PCD_EP_Close+0x8c>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68f9      	ldr	r1, [r7, #12]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f003 f87b 	bl	80054e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	603b      	str	r3, [r7, #0]
 800240c:	460b      	mov	r3, r1
 800240e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002410:	7afb      	ldrb	r3, [r7, #11]
 8002412:	f003 020f 	and.w	r2, r3, #15
 8002416:	4613      	mov	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4413      	add	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4413      	add	r3, r2
 8002426:	3304      	adds	r3, #4
 8002428:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2200      	movs	r2, #0
 800243a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	2200      	movs	r2, #0
 8002440:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002442:	7afb      	ldrb	r3, [r7, #11]
 8002444:	f003 030f 	and.w	r3, r3, #15
 8002448:	b2da      	uxtb	r2, r3
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d102      	bne.n	800245c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800245c:	7afb      	ldrb	r3, [r7, #11]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	2b00      	cmp	r3, #0
 8002464:	d109      	bne.n	800247a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	b2db      	uxtb	r3, r3
 8002470:	461a      	mov	r2, r3
 8002472:	6979      	ldr	r1, [r7, #20]
 8002474:	f003 fb62 	bl	8005b3c <USB_EP0StartXfer>
 8002478:	e008      	b.n	800248c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	6979      	ldr	r1, [r7, #20]
 8002488:	f003 f908 	bl	800569c <USB_EPStartXfer>
  }

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	460b      	mov	r3, r1
 80024a0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	f003 020f 	and.w	r2, r3, #15
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	4413      	add	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 80024b8:	681b      	ldr	r3, [r3, #0]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b086      	sub	sp, #24
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	60f8      	str	r0, [r7, #12]
 80024ce:	607a      	str	r2, [r7, #4]
 80024d0:	603b      	str	r3, [r7, #0]
 80024d2:	460b      	mov	r3, r1
 80024d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024d6:	7afb      	ldrb	r3, [r7, #11]
 80024d8:	f003 020f 	and.w	r2, r3, #15
 80024dc:	4613      	mov	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	4413      	add	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	3338      	adds	r3, #56	@ 0x38
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	4413      	add	r3, r2
 80024ea:	3304      	adds	r3, #4
 80024ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2200      	movs	r2, #0
 80024fe:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	2201      	movs	r2, #1
 8002504:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002506:	7afb      	ldrb	r3, [r7, #11]
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	b2da      	uxtb	r2, r3
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d102      	bne.n	8002520 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002520:	7afb      	ldrb	r3, [r7, #11]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	2b00      	cmp	r3, #0
 8002528:	d109      	bne.n	800253e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	b2db      	uxtb	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	6979      	ldr	r1, [r7, #20]
 8002538:	f003 fb00 	bl	8005b3c <USB_EP0StartXfer>
 800253c:	e008      	b.n	8002550 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	6979      	ldr	r1, [r7, #20]
 800254c:	f003 f8a6 	bl	800569c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b084      	sub	sp, #16
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	460b      	mov	r3, r1
 8002564:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002566:	78fb      	ldrb	r3, [r7, #3]
 8002568:	f003 020f 	and.w	r2, r3, #15
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	429a      	cmp	r2, r3
 8002572:	d901      	bls.n	8002578 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e050      	b.n	800261a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002578:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800257c:	2b00      	cmp	r3, #0
 800257e:	da0f      	bge.n	80025a0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	f003 020f 	and.w	r2, r3, #15
 8002586:	4613      	mov	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	3338      	adds	r3, #56	@ 0x38
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	4413      	add	r3, r2
 8002594:	3304      	adds	r3, #4
 8002596:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2201      	movs	r2, #1
 800259c:	705a      	strb	r2, [r3, #1]
 800259e:	e00d      	b.n	80025bc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	4413      	add	r3, r2
 80025b2:	3304      	adds	r3, #4
 80025b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2201      	movs	r2, #1
 80025c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025c2:	78fb      	ldrb	r3, [r7, #3]
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d101      	bne.n	80025dc <HAL_PCD_EP_SetStall+0x82>
 80025d8:	2302      	movs	r3, #2
 80025da:	e01e      	b.n	800261a <HAL_PCD_EP_SetStall+0xc0>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68f9      	ldr	r1, [r7, #12]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f003 fd42 	bl	8006074 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10a      	bne.n	8002610 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	b2d9      	uxtb	r1, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800260a:	461a      	mov	r2, r3
 800260c:	f003 ff34 	bl	8006478 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b084      	sub	sp, #16
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	460b      	mov	r3, r1
 800262c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800262e:	78fb      	ldrb	r3, [r7, #3]
 8002630:	f003 020f 	and.w	r2, r3, #15
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	429a      	cmp	r2, r3
 800263a:	d901      	bls.n	8002640 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e042      	b.n	80026c6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002644:	2b00      	cmp	r3, #0
 8002646:	da0f      	bge.n	8002668 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	f003 020f 	and.w	r2, r3, #15
 800264e:	4613      	mov	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4413      	add	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	3338      	adds	r3, #56	@ 0x38
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	4413      	add	r3, r2
 800265c:	3304      	adds	r3, #4
 800265e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2201      	movs	r2, #1
 8002664:	705a      	strb	r2, [r3, #1]
 8002666:	e00f      	b.n	8002688 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002668:	78fb      	ldrb	r3, [r7, #3]
 800266a:	f003 020f 	and.w	r2, r3, #15
 800266e:	4613      	mov	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4413      	add	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	3304      	adds	r3, #4
 8002680:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	f003 030f 	and.w	r3, r3, #15
 8002694:	b2da      	uxtb	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d101      	bne.n	80026a8 <HAL_PCD_EP_ClrStall+0x86>
 80026a4:	2302      	movs	r3, #2
 80026a6:	e00e      	b.n	80026c6 <HAL_PCD_EP_ClrStall+0xa4>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68f9      	ldr	r1, [r7, #12]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f003 fd4a 	bl	8006150 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b084      	sub	sp, #16
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	460b      	mov	r3, r1
 80026d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80026da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	da0c      	bge.n	80026fc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026e2:	78fb      	ldrb	r3, [r7, #3]
 80026e4:	f003 020f 	and.w	r2, r3, #15
 80026e8:	4613      	mov	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	3338      	adds	r3, #56	@ 0x38
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	3304      	adds	r3, #4
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	e00c      	b.n	8002716 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	f003 020f 	and.w	r2, r3, #15
 8002702:	4613      	mov	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	4413      	add	r3, r2
 8002712:	3304      	adds	r3, #4
 8002714:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68f9      	ldr	r1, [r7, #12]
 800271c:	4618      	mov	r0, r3
 800271e:	f003 fb69 	bl	8005df4 <USB_EPStopXfer>
 8002722:	4603      	mov	r3, r0
 8002724:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002726:	7afb      	ldrb	r3, [r7, #11]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08a      	sub	sp, #40	@ 0x28
 8002734:	af02      	add	r7, sp, #8
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	3338      	adds	r3, #56	@ 0x38
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	4413      	add	r3, r2
 8002754:	3304      	adds	r3, #4
 8002756:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a1a      	ldr	r2, [r3, #32]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	429a      	cmp	r2, r3
 8002762:	d901      	bls.n	8002768 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e06c      	b.n	8002842 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	699a      	ldr	r2, [r3, #24]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	69fa      	ldr	r2, [r7, #28]
 800277a:	429a      	cmp	r2, r3
 800277c:	d902      	bls.n	8002784 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	3303      	adds	r3, #3
 8002788:	089b      	lsrs	r3, r3, #2
 800278a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800278c:	e02b      	b.n	80027e6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	699a      	ldr	r2, [r3, #24]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d902      	bls.n	80027aa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3303      	adds	r3, #3
 80027ae:	089b      	lsrs	r3, r3, #2
 80027b0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6919      	ldr	r1, [r3, #16]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	4603      	mov	r3, r0
 80027c8:	6978      	ldr	r0, [r7, #20]
 80027ca:	f003 fbbd 	bl	8005f48 <USB_WritePacket>

    ep->xfer_buff  += len;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	441a      	add	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a1a      	ldr	r2, [r3, #32]
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	441a      	add	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d809      	bhi.n	8002810 <PCD_WriteEmptyTxFifo+0xe0>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a1a      	ldr	r2, [r3, #32]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002804:	429a      	cmp	r2, r3
 8002806:	d203      	bcs.n	8002810 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1be      	bne.n	800278e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	699a      	ldr	r2, [r3, #24]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	429a      	cmp	r2, r3
 800281a:	d811      	bhi.n	8002840 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	2201      	movs	r2, #1
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002830:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	43db      	mvns	r3, r3
 8002836:	6939      	ldr	r1, [r7, #16]
 8002838:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800283c:	4013      	ands	r3, r2
 800283e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3720      	adds	r7, #32
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	333c      	adds	r3, #60	@ 0x3c
 8002864:	3304      	adds	r3, #4
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	015a      	lsls	r2, r3, #5
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	4413      	add	r3, r2
 8002872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d17b      	bne.n	800297a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b00      	cmp	r3, #0
 800288a:	d015      	beq.n	80028b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	4a61      	ldr	r2, [pc, #388]	@ (8002a14 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	f240 80b9 	bls.w	8002a08 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80b3 	beq.w	8002a08 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	015a      	lsls	r2, r3, #5
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028ae:	461a      	mov	r2, r3
 80028b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028b4:	6093      	str	r3, [r2, #8]
 80028b6:	e0a7      	b.n	8002a08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	f003 0320 	and.w	r3, r3, #32
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d009      	beq.n	80028d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028ce:	461a      	mov	r2, r3
 80028d0:	2320      	movs	r3, #32
 80028d2:	6093      	str	r3, [r2, #8]
 80028d4:	e098      	b.n	8002a08 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f040 8093 	bne.w	8002a08 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	4a4b      	ldr	r2, [pc, #300]	@ (8002a14 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d90f      	bls.n	800290a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00a      	beq.n	800290a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002900:	461a      	mov	r2, r3
 8002902:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002906:	6093      	str	r3, [r2, #8]
 8002908:	e07e      	b.n	8002a08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	4613      	mov	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	4413      	add	r3, r2
 800291c:	3304      	adds	r3, #4
 800291e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	69da      	ldr	r2, [r3, #28]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	0159      	lsls	r1, r3, #5
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	440b      	add	r3, r1
 800292c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002936:	1ad2      	subs	r2, r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d114      	bne.n	800296c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d109      	bne.n	800295e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002954:	461a      	mov	r2, r3
 8002956:	2101      	movs	r1, #1
 8002958:	f003 fd8e 	bl	8006478 <USB_EP0_OutStart>
 800295c:	e006      	b.n	800296c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	441a      	add	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	b2db      	uxtb	r3, r3
 8002970:	4619      	mov	r1, r3
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f008 fede 	bl	800b734 <HAL_PCD_DataOutStageCallback>
 8002978:	e046      	b.n	8002a08 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	4a26      	ldr	r2, [pc, #152]	@ (8002a18 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d124      	bne.n	80029cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00a      	beq.n	80029a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	4413      	add	r3, r2
 8002994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002998:	461a      	mov	r2, r3
 800299a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800299e:	6093      	str	r3, [r2, #8]
 80029a0:	e032      	b.n	8002a08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029b8:	461a      	mov	r2, r3
 80029ba:	2320      	movs	r3, #32
 80029bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	4619      	mov	r1, r3
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f008 feb5 	bl	800b734 <HAL_PCD_DataOutStageCallback>
 80029ca:	e01d      	b.n	8002a08 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d114      	bne.n	80029fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	4613      	mov	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	4413      	add	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d108      	bne.n	80029fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6818      	ldr	r0, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80029f4:	461a      	mov	r2, r3
 80029f6:	2100      	movs	r1, #0
 80029f8:	f003 fd3e 	bl	8006478 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	4619      	mov	r1, r3
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f008 fe96 	bl	800b734 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3720      	adds	r7, #32
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	4f54300a 	.word	0x4f54300a
 8002a18:	4f54310a 	.word	0x4f54310a

08002a1c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	333c      	adds	r3, #60	@ 0x3c
 8002a34:	3304      	adds	r3, #4
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4a15      	ldr	r2, [pc, #84]	@ (8002aa4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d90e      	bls.n	8002a70 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d009      	beq.n	8002a70 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a68:	461a      	mov	r2, r3
 8002a6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a6e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f008 fe4d 	bl	800b710 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d90c      	bls.n	8002a98 <PCD_EP_OutSetupPacket_int+0x7c>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d108      	bne.n	8002a98 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002a90:	461a      	mov	r2, r3
 8002a92:	2101      	movs	r1, #1
 8002a94:	f003 fcf0 	bl	8006478 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	4f54300a 	.word	0x4f54300a

08002aa8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	70fb      	strb	r3, [r7, #3]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d107      	bne.n	8002ad6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002ac6:	883b      	ldrh	r3, [r7, #0]
 8002ac8:	0419      	lsls	r1, r3, #16
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ad4:	e028      	b.n	8002b28 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002adc:	0c1b      	lsrs	r3, r3, #16
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	73fb      	strb	r3, [r7, #15]
 8002ae8:	e00d      	b.n	8002b06 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	3340      	adds	r3, #64	@ 0x40
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	0c1b      	lsrs	r3, r3, #16
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	4413      	add	r3, r2
 8002afe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	3301      	adds	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
 8002b06:	7bfa      	ldrb	r2, [r7, #15]
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d3ec      	bcc.n	8002aea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002b10:	883b      	ldrh	r3, [r7, #0]
 8002b12:	0418      	lsls	r0, r3, #16
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6819      	ldr	r1, [r3, #0]
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	4302      	orrs	r2, r0
 8002b20:	3340      	adds	r3, #64	@ 0x40
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	887a      	ldrh	r2, [r7, #2]
 8002b48:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002b86:	4b05      	ldr	r3, [pc, #20]	@ (8002b9c <HAL_PCDEx_ActivateLPM+0x44>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	10000003 	.word	0x10000003

08002ba0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002baa:	4b23      	ldr	r3, [pc, #140]	@ (8002c38 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	4a22      	ldr	r2, [pc, #136]	@ (8002c38 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bb6:	4b20      	ldr	r3, [pc, #128]	@ (8002c38 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a1d      	ldr	r2, [pc, #116]	@ (8002c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bcc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bce:	f7fe fa3d 	bl	800104c <HAL_GetTick>
 8002bd2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bd4:	e009      	b.n	8002bea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bd6:	f7fe fa39 	bl	800104c <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002be4:	d901      	bls.n	8002bea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e022      	b.n	8002c30 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bea:	4b14      	ldr	r3, [pc, #80]	@ (8002c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bf6:	d1ee      	bne.n	8002bd6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002bf8:	4b10      	ldr	r3, [pc, #64]	@ (8002c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0f      	ldr	r2, [pc, #60]	@ (8002c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c02:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c04:	f7fe fa22 	bl	800104c <HAL_GetTick>
 8002c08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c0a:	e009      	b.n	8002c20 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c0c:	f7fe fa1e 	bl	800104c <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c1a:	d901      	bls.n	8002c20 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e007      	b.n	8002c30 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c20:	4b06      	ldr	r3, [pc, #24]	@ (8002c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c2c:	d1ee      	bne.n	8002c0c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40007000 	.word	0x40007000

08002c40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e291      	b.n	800317a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 8087 	beq.w	8002d72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c64:	4b96      	ldr	r3, [pc, #600]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 030c 	and.w	r3, r3, #12
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d00c      	beq.n	8002c8a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c70:	4b93      	ldr	r3, [pc, #588]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 030c 	and.w	r3, r3, #12
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d112      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x62>
 8002c7c:	4b90      	ldr	r3, [pc, #576]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c88:	d10b      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8a:	4b8d      	ldr	r3, [pc, #564]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d06c      	beq.n	8002d70 <HAL_RCC_OscConfig+0x130>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d168      	bne.n	8002d70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e26b      	b.n	800317a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002caa:	d106      	bne.n	8002cba <HAL_RCC_OscConfig+0x7a>
 8002cac:	4b84      	ldr	r3, [pc, #528]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a83      	ldr	r2, [pc, #524]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002cb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	e02e      	b.n	8002d18 <HAL_RCC_OscConfig+0xd8>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x9c>
 8002cc2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002cc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	4b7c      	ldr	r3, [pc, #496]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a7b      	ldr	r2, [pc, #492]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002cd4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	e01d      	b.n	8002d18 <HAL_RCC_OscConfig+0xd8>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCC_OscConfig+0xc0>
 8002ce6:	4b76      	ldr	r3, [pc, #472]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a75      	ldr	r2, [pc, #468]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002cec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	4b73      	ldr	r3, [pc, #460]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a72      	ldr	r2, [pc, #456]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e00b      	b.n	8002d18 <HAL_RCC_OscConfig+0xd8>
 8002d00:	4b6f      	ldr	r3, [pc, #444]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a6e      	ldr	r2, [pc, #440]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002d06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	4b6c      	ldr	r3, [pc, #432]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a6b      	ldr	r2, [pc, #428]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002d12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d013      	beq.n	8002d48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fe f994 	bl	800104c <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d28:	f7fe f990 	bl	800104c <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b64      	cmp	r3, #100	@ 0x64
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e21f      	b.n	800317a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3a:	4b61      	ldr	r3, [pc, #388]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0xe8>
 8002d46:	e014      	b.n	8002d72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d48:	f7fe f980 	bl	800104c <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d50:	f7fe f97c 	bl	800104c <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b64      	cmp	r3, #100	@ 0x64
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e20b      	b.n	800317a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d62:	4b57      	ldr	r3, [pc, #348]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x110>
 8002d6e:	e000      	b.n	8002d72 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d069      	beq.n	8002e52 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d7e:	4b50      	ldr	r3, [pc, #320]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00b      	beq.n	8002da2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d8a:	4b4d      	ldr	r3, [pc, #308]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d11c      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x190>
 8002d96:	4b4a      	ldr	r3, [pc, #296]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d116      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da2:	4b47      	ldr	r3, [pc, #284]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d005      	beq.n	8002dba <HAL_RCC_OscConfig+0x17a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d001      	beq.n	8002dba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e1df      	b.n	800317a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dba:	4b41      	ldr	r3, [pc, #260]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	493d      	ldr	r1, [pc, #244]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dce:	e040      	b.n	8002e52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d023      	beq.n	8002e20 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dd8:	4b39      	ldr	r3, [pc, #228]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a38      	ldr	r2, [pc, #224]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7fe f932 	bl	800104c <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dec:	f7fe f92e 	bl	800104c <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e1bd      	b.n	800317a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfe:	4b30      	ldr	r3, [pc, #192]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	4929      	ldr	r1, [pc, #164]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	600b      	str	r3, [r1, #0]
 8002e1e:	e018      	b.n	8002e52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e20:	4b27      	ldr	r3, [pc, #156]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a26      	ldr	r2, [pc, #152]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002e26:	f023 0301 	bic.w	r3, r3, #1
 8002e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7fe f90e 	bl	800104c <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e34:	f7fe f90a 	bl	800104c <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e199      	b.n	800317a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e46:	4b1e      	ldr	r3, [pc, #120]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d038      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d019      	beq.n	8002e9a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e66:	4b16      	ldr	r3, [pc, #88]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002e68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e6a:	4a15      	ldr	r2, [pc, #84]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e72:	f7fe f8eb 	bl	800104c <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e7a:	f7fe f8e7 	bl	800104c <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e176      	b.n	800317a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x23a>
 8002e98:	e01a      	b.n	8002ed0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e9a:	4b09      	ldr	r3, [pc, #36]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002e9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e9e:	4a08      	ldr	r2, [pc, #32]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002ea0:	f023 0301 	bic.w	r3, r3, #1
 8002ea4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea6:	f7fe f8d1 	bl	800104c <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eac:	e00a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eae:	f7fe f8cd 	bl	800104c <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d903      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e15c      	b.n	800317a <HAL_RCC_OscConfig+0x53a>
 8002ec0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec4:	4b91      	ldr	r3, [pc, #580]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 8002ec6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1ee      	bne.n	8002eae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 80a4 	beq.w	8003026 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ede:	4b8b      	ldr	r3, [pc, #556]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10d      	bne.n	8002f06 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eea:	4b88      	ldr	r3, [pc, #544]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	4a87      	ldr	r2, [pc, #540]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 8002ef0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ef4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ef6:	4b85      	ldr	r3, [pc, #532]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f02:	2301      	movs	r3, #1
 8002f04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f06:	4b82      	ldr	r3, [pc, #520]	@ (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d118      	bne.n	8002f44 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f12:	4b7f      	ldr	r3, [pc, #508]	@ (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a7e      	ldr	r2, [pc, #504]	@ (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8002f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f1e:	f7fe f895 	bl	800104c <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f26:	f7fe f891 	bl	800104c <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b64      	cmp	r3, #100	@ 0x64
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e120      	b.n	800317a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f38:	4b75      	ldr	r3, [pc, #468]	@ (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f0      	beq.n	8002f26 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d106      	bne.n	8002f5a <HAL_RCC_OscConfig+0x31a>
 8002f4c:	4b6f      	ldr	r3, [pc, #444]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f50:	4a6e      	ldr	r2, [pc, #440]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f58:	e02d      	b.n	8002fb6 <HAL_RCC_OscConfig+0x376>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x33c>
 8002f62:	4b6a      	ldr	r3, [pc, #424]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f66:	4a69      	ldr	r2, [pc, #420]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f6e:	4b67      	ldr	r3, [pc, #412]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f72:	4a66      	ldr	r2, [pc, #408]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 8002f74:	f023 0304 	bic.w	r3, r3, #4
 8002f78:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f7a:	e01c      	b.n	8002fb6 <HAL_RCC_OscConfig+0x376>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b05      	cmp	r3, #5
 8002f82:	d10c      	bne.n	8002f9e <HAL_RCC_OscConfig+0x35e>
 8002f84:	4b61      	ldr	r3, [pc, #388]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f88:	4a60      	ldr	r2, [pc, #384]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 8002f8a:	f043 0304 	orr.w	r3, r3, #4
 8002f8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f90:	4b5e      	ldr	r3, [pc, #376]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 8002f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f94:	4a5d      	ldr	r2, [pc, #372]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f9c:	e00b      	b.n	8002fb6 <HAL_RCC_OscConfig+0x376>
 8002f9e:	4b5b      	ldr	r3, [pc, #364]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa2:	4a5a      	ldr	r2, [pc, #360]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 8002fa4:	f023 0301 	bic.w	r3, r3, #1
 8002fa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002faa:	4b58      	ldr	r3, [pc, #352]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fae:	4a57      	ldr	r2, [pc, #348]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 8002fb0:	f023 0304 	bic.w	r3, r3, #4
 8002fb4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d015      	beq.n	8002fea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fbe:	f7fe f845 	bl	800104c <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc6:	f7fe f841 	bl	800104c <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e0ce      	b.n	800317a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fdc:	4b4b      	ldr	r3, [pc, #300]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0ee      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x386>
 8002fe8:	e014      	b.n	8003014 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fea:	f7fe f82f 	bl	800104c <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff0:	e00a      	b.n	8003008 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff2:	f7fe f82b 	bl	800104c <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003000:	4293      	cmp	r3, r2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e0b8      	b.n	800317a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003008:	4b40      	ldr	r3, [pc, #256]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1ee      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003014:	7dfb      	ldrb	r3, [r7, #23]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d105      	bne.n	8003026 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800301a:	4b3c      	ldr	r3, [pc, #240]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301e:	4a3b      	ldr	r2, [pc, #236]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 8003020:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003024:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 80a4 	beq.w	8003178 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003030:	4b36      	ldr	r3, [pc, #216]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 030c 	and.w	r3, r3, #12
 8003038:	2b08      	cmp	r3, #8
 800303a:	d06b      	beq.n	8003114 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d149      	bne.n	80030d8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003044:	4b31      	ldr	r3, [pc, #196]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a30      	ldr	r2, [pc, #192]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 800304a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800304e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fd fffc 	bl	800104c <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003058:	f7fd fff8 	bl	800104c <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e087      	b.n	800317a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306a:	4b28      	ldr	r3, [pc, #160]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69da      	ldr	r2, [r3, #28]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003084:	019b      	lsls	r3, r3, #6
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308c:	085b      	lsrs	r3, r3, #1
 800308e:	3b01      	subs	r3, #1
 8003090:	041b      	lsls	r3, r3, #16
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003098:	061b      	lsls	r3, r3, #24
 800309a:	4313      	orrs	r3, r2
 800309c:	4a1b      	ldr	r2, [pc, #108]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 800309e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80030a2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a4:	4b19      	ldr	r3, [pc, #100]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a18      	ldr	r2, [pc, #96]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 80030aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7fd ffcc 	bl	800104c <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b8:	f7fd ffc8 	bl	800104c <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e057      	b.n	800317a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ca:	4b10      	ldr	r3, [pc, #64]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCC_OscConfig+0x478>
 80030d6:	e04f      	b.n	8003178 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d8:	4b0c      	ldr	r3, [pc, #48]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a0b      	ldr	r2, [pc, #44]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 80030de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e4:	f7fd ffb2 	bl	800104c <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ec:	f7fd ffae 	bl	800104c <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e03d      	b.n	800317a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fe:	4b03      	ldr	r3, [pc, #12]	@ (800310c <HAL_RCC_OscConfig+0x4cc>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x4ac>
 800310a:	e035      	b.n	8003178 <HAL_RCC_OscConfig+0x538>
 800310c:	40023800 	.word	0x40023800
 8003110:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003114:	4b1b      	ldr	r3, [pc, #108]	@ (8003184 <HAL_RCC_OscConfig+0x544>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d028      	beq.n	8003174 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800312c:	429a      	cmp	r2, r3
 800312e:	d121      	bne.n	8003174 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313a:	429a      	cmp	r2, r3
 800313c:	d11a      	bne.n	8003174 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003144:	4013      	ands	r3, r2
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800314a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800314c:	4293      	cmp	r3, r2
 800314e:	d111      	bne.n	8003174 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315a:	085b      	lsrs	r3, r3, #1
 800315c:	3b01      	subs	r3, #1
 800315e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003160:	429a      	cmp	r2, r3
 8003162:	d107      	bne.n	8003174 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003170:	429a      	cmp	r2, r3
 8003172:	d001      	beq.n	8003178 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800

08003188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0d0      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031a0:	4b6a      	ldr	r3, [pc, #424]	@ (800334c <HAL_RCC_ClockConfig+0x1c4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d910      	bls.n	80031d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ae:	4b67      	ldr	r3, [pc, #412]	@ (800334c <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 020f 	bic.w	r2, r3, #15
 80031b6:	4965      	ldr	r1, [pc, #404]	@ (800334c <HAL_RCC_ClockConfig+0x1c4>)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	4b63      	ldr	r3, [pc, #396]	@ (800334c <HAL_RCC_ClockConfig+0x1c4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0b8      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d020      	beq.n	800321e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e8:	4b59      	ldr	r3, [pc, #356]	@ (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4a58      	ldr	r2, [pc, #352]	@ (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 80031ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003200:	4b53      	ldr	r3, [pc, #332]	@ (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4a52      	ldr	r2, [pc, #328]	@ (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 8003206:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800320a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800320c:	4b50      	ldr	r3, [pc, #320]	@ (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	494d      	ldr	r1, [pc, #308]	@ (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 800321a:	4313      	orrs	r3, r2
 800321c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d040      	beq.n	80032ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d107      	bne.n	8003242 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	4b47      	ldr	r3, [pc, #284]	@ (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d115      	bne.n	800326a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e07f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324a:	4b41      	ldr	r3, [pc, #260]	@ (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d109      	bne.n	800326a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e073      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325a:	4b3d      	ldr	r3, [pc, #244]	@ (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e06b      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800326a:	4b39      	ldr	r3, [pc, #228]	@ (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f023 0203 	bic.w	r2, r3, #3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	4936      	ldr	r1, [pc, #216]	@ (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 8003278:	4313      	orrs	r3, r2
 800327a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800327c:	f7fd fee6 	bl	800104c <HAL_GetTick>
 8003280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003282:	e00a      	b.n	800329a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003284:	f7fd fee2 	bl	800104c <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003292:	4293      	cmp	r3, r2
 8003294:	d901      	bls.n	800329a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e053      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329a:	4b2d      	ldr	r3, [pc, #180]	@ (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 020c 	and.w	r2, r3, #12
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d1eb      	bne.n	8003284 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032ac:	4b27      	ldr	r3, [pc, #156]	@ (800334c <HAL_RCC_ClockConfig+0x1c4>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d210      	bcs.n	80032dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ba:	4b24      	ldr	r3, [pc, #144]	@ (800334c <HAL_RCC_ClockConfig+0x1c4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f023 020f 	bic.w	r2, r3, #15
 80032c2:	4922      	ldr	r1, [pc, #136]	@ (800334c <HAL_RCC_ClockConfig+0x1c4>)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ca:	4b20      	ldr	r3, [pc, #128]	@ (800334c <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e032      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e8:	4b19      	ldr	r3, [pc, #100]	@ (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4916      	ldr	r1, [pc, #88]	@ (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003306:	4b12      	ldr	r3, [pc, #72]	@ (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	490e      	ldr	r1, [pc, #56]	@ (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800331a:	f000 f821 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 800331e:	4602      	mov	r2, r0
 8003320:	4b0b      	ldr	r3, [pc, #44]	@ (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	490a      	ldr	r1, [pc, #40]	@ (8003354 <HAL_RCC_ClockConfig+0x1cc>)
 800332c:	5ccb      	ldrb	r3, [r1, r3]
 800332e:	fa22 f303 	lsr.w	r3, r2, r3
 8003332:	4a09      	ldr	r2, [pc, #36]	@ (8003358 <HAL_RCC_ClockConfig+0x1d0>)
 8003334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003336:	4b09      	ldr	r3, [pc, #36]	@ (800335c <HAL_RCC_ClockConfig+0x1d4>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7fd fc60 	bl	8000c00 <HAL_InitTick>

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40023c00 	.word	0x40023c00
 8003350:	40023800 	.word	0x40023800
 8003354:	0800ce24 	.word	0x0800ce24
 8003358:	20000000 	.word	0x20000000
 800335c:	20000004 	.word	0x20000004

08003360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003364:	b090      	sub	sp, #64	@ 0x40
 8003366:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	637b      	str	r3, [r7, #52]	@ 0x34
 800336c:	2300      	movs	r3, #0
 800336e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003370:	2300      	movs	r3, #0
 8003372:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003378:	4b59      	ldr	r3, [pc, #356]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 030c 	and.w	r3, r3, #12
 8003380:	2b08      	cmp	r3, #8
 8003382:	d00d      	beq.n	80033a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003384:	2b08      	cmp	r3, #8
 8003386:	f200 80a1 	bhi.w	80034cc <HAL_RCC_GetSysClockFreq+0x16c>
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x34>
 800338e:	2b04      	cmp	r3, #4
 8003390:	d003      	beq.n	800339a <HAL_RCC_GetSysClockFreq+0x3a>
 8003392:	e09b      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003394:	4b53      	ldr	r3, [pc, #332]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003396:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003398:	e09b      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800339a:	4b53      	ldr	r3, [pc, #332]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800339c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800339e:	e098      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a0:	4b4f      	ldr	r3, [pc, #316]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80033aa:	4b4d      	ldr	r3, [pc, #308]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d028      	beq.n	8003408 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b6:	4b4a      	ldr	r3, [pc, #296]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	099b      	lsrs	r3, r3, #6
 80033bc:	2200      	movs	r2, #0
 80033be:	623b      	str	r3, [r7, #32]
 80033c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033c8:	2100      	movs	r1, #0
 80033ca:	4b47      	ldr	r3, [pc, #284]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80033cc:	fb03 f201 	mul.w	r2, r3, r1
 80033d0:	2300      	movs	r3, #0
 80033d2:	fb00 f303 	mul.w	r3, r0, r3
 80033d6:	4413      	add	r3, r2
 80033d8:	4a43      	ldr	r2, [pc, #268]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80033da:	fba0 1202 	umull	r1, r2, r0, r2
 80033de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033e0:	460a      	mov	r2, r1
 80033e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80033e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033e6:	4413      	add	r3, r2
 80033e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ec:	2200      	movs	r2, #0
 80033ee:	61bb      	str	r3, [r7, #24]
 80033f0:	61fa      	str	r2, [r7, #28]
 80033f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80033fa:	f7fc ff61 	bl	80002c0 <__aeabi_uldivmod>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4613      	mov	r3, r2
 8003404:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003406:	e053      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003408:	4b35      	ldr	r3, [pc, #212]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	099b      	lsrs	r3, r3, #6
 800340e:	2200      	movs	r2, #0
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	617a      	str	r2, [r7, #20]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800341a:	f04f 0b00 	mov.w	fp, #0
 800341e:	4652      	mov	r2, sl
 8003420:	465b      	mov	r3, fp
 8003422:	f04f 0000 	mov.w	r0, #0
 8003426:	f04f 0100 	mov.w	r1, #0
 800342a:	0159      	lsls	r1, r3, #5
 800342c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003430:	0150      	lsls	r0, r2, #5
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	ebb2 080a 	subs.w	r8, r2, sl
 800343a:	eb63 090b 	sbc.w	r9, r3, fp
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800344a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800344e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003452:	ebb2 0408 	subs.w	r4, r2, r8
 8003456:	eb63 0509 	sbc.w	r5, r3, r9
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	00eb      	lsls	r3, r5, #3
 8003464:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003468:	00e2      	lsls	r2, r4, #3
 800346a:	4614      	mov	r4, r2
 800346c:	461d      	mov	r5, r3
 800346e:	eb14 030a 	adds.w	r3, r4, sl
 8003472:	603b      	str	r3, [r7, #0]
 8003474:	eb45 030b 	adc.w	r3, r5, fp
 8003478:	607b      	str	r3, [r7, #4]
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003486:	4629      	mov	r1, r5
 8003488:	028b      	lsls	r3, r1, #10
 800348a:	4621      	mov	r1, r4
 800348c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003490:	4621      	mov	r1, r4
 8003492:	028a      	lsls	r2, r1, #10
 8003494:	4610      	mov	r0, r2
 8003496:	4619      	mov	r1, r3
 8003498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800349a:	2200      	movs	r2, #0
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	60fa      	str	r2, [r7, #12]
 80034a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034a4:	f7fc ff0c 	bl	80002c0 <__aeabi_uldivmod>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4613      	mov	r3, r2
 80034ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80034b0:	4b0b      	ldr	r3, [pc, #44]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	0c1b      	lsrs	r3, r3, #16
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	3301      	adds	r3, #1
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80034c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034ca:	e002      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034cc:	4b05      	ldr	r3, [pc, #20]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80034ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3740      	adds	r7, #64	@ 0x40
 80034d8:	46bd      	mov	sp, r7
 80034da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800
 80034e4:	00f42400 	.word	0x00f42400
 80034e8:	017d7840 	.word	0x017d7840

080034ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034f0:	4b03      	ldr	r3, [pc, #12]	@ (8003500 <HAL_RCC_GetHCLKFreq+0x14>)
 80034f2:	681b      	ldr	r3, [r3, #0]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	20000000 	.word	0x20000000

08003504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003508:	f7ff fff0 	bl	80034ec <HAL_RCC_GetHCLKFreq>
 800350c:	4602      	mov	r2, r0
 800350e:	4b05      	ldr	r3, [pc, #20]	@ (8003524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	0a9b      	lsrs	r3, r3, #10
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	4903      	ldr	r1, [pc, #12]	@ (8003528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800351a:	5ccb      	ldrb	r3, [r1, r3]
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003520:	4618      	mov	r0, r3
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40023800 	.word	0x40023800
 8003528:	0800ce34 	.word	0x0800ce34

0800352c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003530:	f7ff ffdc 	bl	80034ec <HAL_RCC_GetHCLKFreq>
 8003534:	4602      	mov	r2, r0
 8003536:	4b05      	ldr	r3, [pc, #20]	@ (800354c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	0b5b      	lsrs	r3, r3, #13
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	4903      	ldr	r1, [pc, #12]	@ (8003550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003542:	5ccb      	ldrb	r3, [r1, r3]
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003548:	4618      	mov	r0, r3
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40023800 	.word	0x40023800
 8003550:	0800ce34 	.word	0x0800ce34

08003554 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	220f      	movs	r2, #15
 8003562:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003564:	4b12      	ldr	r3, [pc, #72]	@ (80035b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 0203 	and.w	r2, r3, #3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003570:	4b0f      	ldr	r3, [pc, #60]	@ (80035b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800357c:	4b0c      	ldr	r3, [pc, #48]	@ (80035b0 <HAL_RCC_GetClockConfig+0x5c>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003588:	4b09      	ldr	r3, [pc, #36]	@ (80035b0 <HAL_RCC_GetClockConfig+0x5c>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	08db      	lsrs	r3, r3, #3
 800358e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003596:	4b07      	ldr	r3, [pc, #28]	@ (80035b4 <HAL_RCC_GetClockConfig+0x60>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 020f 	and.w	r2, r3, #15
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	601a      	str	r2, [r3, #0]
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40023c00 	.word	0x40023c00

080035b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d012      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035e0:	4b69      	ldr	r3, [pc, #420]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	4a68      	ldr	r2, [pc, #416]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80035ea:	6093      	str	r3, [r2, #8]
 80035ec:	4b66      	ldr	r3, [pc, #408]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f4:	4964      	ldr	r1, [pc, #400]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003602:	2301      	movs	r3, #1
 8003604:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d017      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003612:	4b5d      	ldr	r3, [pc, #372]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003614:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003618:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003620:	4959      	ldr	r1, [pc, #356]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800362c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003630:	d101      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003632:	2301      	movs	r3, #1
 8003634:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800363e:	2301      	movs	r3, #1
 8003640:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d017      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800364e:	4b4e      	ldr	r3, [pc, #312]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003650:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003654:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365c:	494a      	ldr	r1, [pc, #296]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003668:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800366c:	d101      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800366e:	2301      	movs	r3, #1
 8003670:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800367a:	2301      	movs	r3, #1
 800367c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800368a:	2301      	movs	r3, #1
 800368c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 808b 	beq.w	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800369c:	4b3a      	ldr	r3, [pc, #232]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a0:	4a39      	ldr	r2, [pc, #228]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80036a8:	4b37      	ldr	r3, [pc, #220]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80036b4:	4b35      	ldr	r3, [pc, #212]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a34      	ldr	r2, [pc, #208]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c0:	f7fd fcc4 	bl	800104c <HAL_GetTick>
 80036c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c8:	f7fd fcc0 	bl	800104c <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b64      	cmp	r3, #100	@ 0x64
 80036d4:	d901      	bls.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e357      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80036da:	4b2c      	ldr	r3, [pc, #176]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0f0      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036e6:	4b28      	ldr	r3, [pc, #160]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d035      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	429a      	cmp	r2, r3
 8003702:	d02e      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003704:	4b20      	ldr	r3, [pc, #128]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003708:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800370c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800370e:	4b1e      	ldr	r3, [pc, #120]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003712:	4a1d      	ldr	r2, [pc, #116]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003718:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800371a:	4b1b      	ldr	r3, [pc, #108]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800371c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371e:	4a1a      	ldr	r2, [pc, #104]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003720:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003724:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003726:	4a18      	ldr	r2, [pc, #96]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800372c:	4b16      	ldr	r3, [pc, #88]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b01      	cmp	r3, #1
 8003736:	d114      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003738:	f7fd fc88 	bl	800104c <HAL_GetTick>
 800373c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373e:	e00a      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003740:	f7fd fc84 	bl	800104c <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800374e:	4293      	cmp	r3, r2
 8003750:	d901      	bls.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e319      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003756:	4b0c      	ldr	r3, [pc, #48]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0ee      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003766:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800376a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800376e:	d111      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003770:	4b05      	ldr	r3, [pc, #20]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800377c:	4b04      	ldr	r3, [pc, #16]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800377e:	400b      	ands	r3, r1
 8003780:	4901      	ldr	r1, [pc, #4]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003782:	4313      	orrs	r3, r2
 8003784:	608b      	str	r3, [r1, #8]
 8003786:	e00b      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003788:	40023800 	.word	0x40023800
 800378c:	40007000 	.word	0x40007000
 8003790:	0ffffcff 	.word	0x0ffffcff
 8003794:	4baa      	ldr	r3, [pc, #680]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	4aa9      	ldr	r2, [pc, #676]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800379a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800379e:	6093      	str	r3, [r2, #8]
 80037a0:	4ba7      	ldr	r3, [pc, #668]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ac:	49a4      	ldr	r1, [pc, #656]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0310 	and.w	r3, r3, #16
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d010      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037be:	4ba0      	ldr	r3, [pc, #640]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037c4:	4a9e      	ldr	r2, [pc, #632]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80037ce:	4b9c      	ldr	r3, [pc, #624]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d8:	4999      	ldr	r1, [pc, #612]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037ec:	4b94      	ldr	r3, [pc, #592]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037fa:	4991      	ldr	r1, [pc, #580]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800380e:	4b8c      	ldr	r3, [pc, #560]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003814:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800381c:	4988      	ldr	r1, [pc, #544]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003830:	4b83      	ldr	r3, [pc, #524]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003836:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800383e:	4980      	ldr	r1, [pc, #512]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003852:	4b7b      	ldr	r3, [pc, #492]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003858:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003860:	4977      	ldr	r1, [pc, #476]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003874:	4b72      	ldr	r3, [pc, #456]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800387a:	f023 0203 	bic.w	r2, r3, #3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003882:	496f      	ldr	r1, [pc, #444]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003896:	4b6a      	ldr	r3, [pc, #424]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800389c:	f023 020c 	bic.w	r2, r3, #12
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038a4:	4966      	ldr	r1, [pc, #408]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038b8:	4b61      	ldr	r3, [pc, #388]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038be:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c6:	495e      	ldr	r1, [pc, #376]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038da:	4b59      	ldr	r3, [pc, #356]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038e0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038e8:	4955      	ldr	r1, [pc, #340]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00a      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038fc:	4b50      	ldr	r3, [pc, #320]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003902:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390a:	494d      	ldr	r1, [pc, #308]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800391e:	4b48      	ldr	r3, [pc, #288]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003924:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392c:	4944      	ldr	r1, [pc, #272]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003940:	4b3f      	ldr	r3, [pc, #252]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003946:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394e:	493c      	ldr	r1, [pc, #240]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003962:	4b37      	ldr	r3, [pc, #220]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003968:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003970:	4933      	ldr	r1, [pc, #204]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00a      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003984:	4b2e      	ldr	r3, [pc, #184]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800398a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003992:	492b      	ldr	r1, [pc, #172]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d011      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80039a6:	4b26      	ldr	r3, [pc, #152]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ac:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039b4:	4922      	ldr	r1, [pc, #136]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039c4:	d101      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80039c6:	2301      	movs	r3, #1
 80039c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80039d6:	2301      	movs	r3, #1
 80039d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039e6:	4b16      	ldr	r3, [pc, #88]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ec:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039f4:	4912      	ldr	r1, [pc, #72]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00b      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a08:	4b0d      	ldr	r3, [pc, #52]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a0e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a18:	4909      	ldr	r1, [pc, #36]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d006      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 80d9 	beq.w	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a34:	4b02      	ldr	r3, [pc, #8]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a01      	ldr	r2, [pc, #4]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a3e:	e001      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003a40:	40023800 	.word	0x40023800
 8003a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a46:	f7fd fb01 	bl	800104c <HAL_GetTick>
 8003a4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a4e:	f7fd fafd 	bl	800104c <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b64      	cmp	r3, #100	@ 0x64
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e194      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a60:	4b6c      	ldr	r3, [pc, #432]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1f0      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d021      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d11d      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a80:	4b64      	ldr	r3, [pc, #400]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a86:	0c1b      	lsrs	r3, r3, #16
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a8e:	4b61      	ldr	r3, [pc, #388]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a94:	0e1b      	lsrs	r3, r3, #24
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	019a      	lsls	r2, r3, #6
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	041b      	lsls	r3, r3, #16
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	061b      	lsls	r3, r3, #24
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	071b      	lsls	r3, r3, #28
 8003ab4:	4957      	ldr	r1, [pc, #348]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d004      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003acc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ad0:	d00a      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d02e      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ae6:	d129      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ae8:	4b4a      	ldr	r3, [pc, #296]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aee:	0c1b      	lsrs	r3, r3, #16
 8003af0:	f003 0303 	and.w	r3, r3, #3
 8003af4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003af6:	4b47      	ldr	r3, [pc, #284]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003afc:	0f1b      	lsrs	r3, r3, #28
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	019a      	lsls	r2, r3, #6
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	041b      	lsls	r3, r3, #16
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	061b      	lsls	r3, r3, #24
 8003b16:	431a      	orrs	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	071b      	lsls	r3, r3, #28
 8003b1c:	493d      	ldr	r1, [pc, #244]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b24:	4b3b      	ldr	r3, [pc, #236]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b2a:	f023 021f 	bic.w	r2, r3, #31
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b32:	3b01      	subs	r3, #1
 8003b34:	4937      	ldr	r1, [pc, #220]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d01d      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b48:	4b32      	ldr	r3, [pc, #200]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b4e:	0e1b      	lsrs	r3, r3, #24
 8003b50:	f003 030f 	and.w	r3, r3, #15
 8003b54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b56:	4b2f      	ldr	r3, [pc, #188]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b5c:	0f1b      	lsrs	r3, r3, #28
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	019a      	lsls	r2, r3, #6
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	041b      	lsls	r3, r3, #16
 8003b70:	431a      	orrs	r2, r3
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	061b      	lsls	r3, r3, #24
 8003b76:	431a      	orrs	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	071b      	lsls	r3, r3, #28
 8003b7c:	4925      	ldr	r1, [pc, #148]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d011      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	019a      	lsls	r2, r3, #6
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	041b      	lsls	r3, r3, #16
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	061b      	lsls	r3, r3, #24
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	071b      	lsls	r3, r3, #28
 8003bac:	4919      	ldr	r1, [pc, #100]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003bb4:	4b17      	ldr	r3, [pc, #92]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a16      	ldr	r2, [pc, #88]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003bbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bc0:	f7fd fa44 	bl	800104c <HAL_GetTick>
 8003bc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bc8:	f7fd fa40 	bl	800104c <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b64      	cmp	r3, #100	@ 0x64
 8003bd4:	d901      	bls.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e0d7      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bda:	4b0e      	ldr	r3, [pc, #56]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0f0      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	f040 80cd 	bne.w	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003bee:	4b09      	ldr	r3, [pc, #36]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a08      	ldr	r2, [pc, #32]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bfa:	f7fd fa27 	bl	800104c <HAL_GetTick>
 8003bfe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c00:	e00a      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c02:	f7fd fa23 	bl	800104c <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b64      	cmp	r3, #100	@ 0x64
 8003c0e:	d903      	bls.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e0ba      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003c14:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c18:	4b5e      	ldr	r3, [pc, #376]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c24:	d0ed      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d009      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d02e      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d12a      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c4e:	4b51      	ldr	r3, [pc, #324]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c54:	0c1b      	lsrs	r3, r3, #16
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c5c:	4b4d      	ldr	r3, [pc, #308]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c62:	0f1b      	lsrs	r3, r3, #28
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	019a      	lsls	r2, r3, #6
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	041b      	lsls	r3, r3, #16
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	061b      	lsls	r3, r3, #24
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	071b      	lsls	r3, r3, #28
 8003c82:	4944      	ldr	r1, [pc, #272]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c8a:	4b42      	ldr	r3, [pc, #264]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c90:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	021b      	lsls	r3, r3, #8
 8003c9c:	493d      	ldr	r1, [pc, #244]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d022      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cb8:	d11d      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cba:	4b36      	ldr	r3, [pc, #216]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc0:	0e1b      	lsrs	r3, r3, #24
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cc8:	4b32      	ldr	r3, [pc, #200]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cce:	0f1b      	lsrs	r3, r3, #28
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	019a      	lsls	r2, r3, #6
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	041b      	lsls	r3, r3, #16
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	061b      	lsls	r3, r3, #24
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	071b      	lsls	r3, r3, #28
 8003cee:	4929      	ldr	r1, [pc, #164]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d028      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d02:	4b24      	ldr	r3, [pc, #144]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d08:	0e1b      	lsrs	r3, r3, #24
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d10:	4b20      	ldr	r3, [pc, #128]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d16:	0c1b      	lsrs	r3, r3, #16
 8003d18:	f003 0303 	and.w	r3, r3, #3
 8003d1c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	019a      	lsls	r2, r3, #6
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	041b      	lsls	r3, r3, #16
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	061b      	lsls	r3, r3, #24
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	071b      	lsls	r3, r3, #28
 8003d36:	4917      	ldr	r1, [pc, #92]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d3e:	4b15      	ldr	r3, [pc, #84]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4c:	4911      	ldr	r1, [pc, #68]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d54:	4b0f      	ldr	r3, [pc, #60]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a0e      	ldr	r2, [pc, #56]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d60:	f7fd f974 	bl	800104c <HAL_GetTick>
 8003d64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d68:	f7fd f970 	bl	800104c <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b64      	cmp	r3, #100	@ 0x64
 8003d74:	d901      	bls.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e007      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d7a:	4b06      	ldr	r3, [pc, #24]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d86:	d1ef      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3720      	adds	r7, #32
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	40023800 	.word	0x40023800

08003d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e049      	b.n	8003e3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d106      	bne.n	8003dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f841 	bl	8003e46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	f000 fa00 	bl	80041dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
	...

08003e5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d001      	beq.n	8003e74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e054      	b.n	8003f1e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a26      	ldr	r2, [pc, #152]	@ (8003f2c <HAL_TIM_Base_Start_IT+0xd0>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d022      	beq.n	8003edc <HAL_TIM_Base_Start_IT+0x80>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e9e:	d01d      	beq.n	8003edc <HAL_TIM_Base_Start_IT+0x80>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a22      	ldr	r2, [pc, #136]	@ (8003f30 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d018      	beq.n	8003edc <HAL_TIM_Base_Start_IT+0x80>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a21      	ldr	r2, [pc, #132]	@ (8003f34 <HAL_TIM_Base_Start_IT+0xd8>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d013      	beq.n	8003edc <HAL_TIM_Base_Start_IT+0x80>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a1f      	ldr	r2, [pc, #124]	@ (8003f38 <HAL_TIM_Base_Start_IT+0xdc>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00e      	beq.n	8003edc <HAL_TIM_Base_Start_IT+0x80>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f3c <HAL_TIM_Base_Start_IT+0xe0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d009      	beq.n	8003edc <HAL_TIM_Base_Start_IT+0x80>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1c      	ldr	r2, [pc, #112]	@ (8003f40 <HAL_TIM_Base_Start_IT+0xe4>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d004      	beq.n	8003edc <HAL_TIM_Base_Start_IT+0x80>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a1b      	ldr	r2, [pc, #108]	@ (8003f44 <HAL_TIM_Base_Start_IT+0xe8>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d115      	bne.n	8003f08 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	4b19      	ldr	r3, [pc, #100]	@ (8003f48 <HAL_TIM_Base_Start_IT+0xec>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2b06      	cmp	r3, #6
 8003eec:	d015      	beq.n	8003f1a <HAL_TIM_Base_Start_IT+0xbe>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ef4:	d011      	beq.n	8003f1a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0201 	orr.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f06:	e008      	b.n	8003f1a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	e000      	b.n	8003f1c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40010000 	.word	0x40010000
 8003f30:	40000400 	.word	0x40000400
 8003f34:	40000800 	.word	0x40000800
 8003f38:	40000c00 	.word	0x40000c00
 8003f3c:	40010400 	.word	0x40010400
 8003f40:	40014000 	.word	0x40014000
 8003f44:	40001800 	.word	0x40001800
 8003f48:	00010007 	.word	0x00010007

08003f4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d122      	bne.n	8003fa8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d11b      	bne.n	8003fa8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f06f 0202 	mvn.w	r2, #2
 8003f78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f905 	bl	800419e <HAL_TIM_IC_CaptureCallback>
 8003f94:	e005      	b.n	8003fa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f8f7 	bl	800418a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f908 	bl	80041b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d122      	bne.n	8003ffc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	d11b      	bne.n	8003ffc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f06f 0204 	mvn.w	r2, #4
 8003fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f8db 	bl	800419e <HAL_TIM_IC_CaptureCallback>
 8003fe8:	e005      	b.n	8003ff6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f8cd 	bl	800418a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f8de 	bl	80041b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b08      	cmp	r3, #8
 8004008:	d122      	bne.n	8004050 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b08      	cmp	r3, #8
 8004016:	d11b      	bne.n	8004050 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f06f 0208 	mvn.w	r2, #8
 8004020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2204      	movs	r2, #4
 8004026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f8b1 	bl	800419e <HAL_TIM_IC_CaptureCallback>
 800403c:	e005      	b.n	800404a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f8a3 	bl	800418a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f8b4 	bl	80041b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	f003 0310 	and.w	r3, r3, #16
 800405a:	2b10      	cmp	r3, #16
 800405c:	d122      	bne.n	80040a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f003 0310 	and.w	r3, r3, #16
 8004068:	2b10      	cmp	r3, #16
 800406a:	d11b      	bne.n	80040a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f06f 0210 	mvn.w	r2, #16
 8004074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2208      	movs	r2, #8
 800407a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f887 	bl	800419e <HAL_TIM_IC_CaptureCallback>
 8004090:	e005      	b.n	800409e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f879 	bl	800418a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f88a 	bl	80041b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d10e      	bne.n	80040d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d107      	bne.n	80040d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f06f 0201 	mvn.w	r2, #1
 80040c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7fc fc88 	bl	80009e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040da:	2b80      	cmp	r3, #128	@ 0x80
 80040dc:	d10e      	bne.n	80040fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e8:	2b80      	cmp	r3, #128	@ 0x80
 80040ea:	d107      	bne.n	80040fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f91a 	bl	8004330 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004106:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800410a:	d10e      	bne.n	800412a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004116:	2b80      	cmp	r3, #128	@ 0x80
 8004118:	d107      	bne.n	800412a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f90d 	bl	8004344 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004134:	2b40      	cmp	r3, #64	@ 0x40
 8004136:	d10e      	bne.n	8004156 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004142:	2b40      	cmp	r3, #64	@ 0x40
 8004144:	d107      	bne.n	8004156 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800414e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f838 	bl	80041c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	f003 0320 	and.w	r3, r3, #32
 8004160:	2b20      	cmp	r3, #32
 8004162:	d10e      	bne.n	8004182 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b20      	cmp	r3, #32
 8004170:	d107      	bne.n	8004182 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f06f 0220 	mvn.w	r2, #32
 800417a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f8cd 	bl	800431c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004182:	bf00      	nop
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
	...

080041dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a40      	ldr	r2, [pc, #256]	@ (80042f0 <TIM_Base_SetConfig+0x114>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d013      	beq.n	800421c <TIM_Base_SetConfig+0x40>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041fa:	d00f      	beq.n	800421c <TIM_Base_SetConfig+0x40>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a3d      	ldr	r2, [pc, #244]	@ (80042f4 <TIM_Base_SetConfig+0x118>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d00b      	beq.n	800421c <TIM_Base_SetConfig+0x40>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a3c      	ldr	r2, [pc, #240]	@ (80042f8 <TIM_Base_SetConfig+0x11c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d007      	beq.n	800421c <TIM_Base_SetConfig+0x40>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a3b      	ldr	r2, [pc, #236]	@ (80042fc <TIM_Base_SetConfig+0x120>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d003      	beq.n	800421c <TIM_Base_SetConfig+0x40>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a3a      	ldr	r2, [pc, #232]	@ (8004300 <TIM_Base_SetConfig+0x124>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d108      	bne.n	800422e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a2f      	ldr	r2, [pc, #188]	@ (80042f0 <TIM_Base_SetConfig+0x114>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d02b      	beq.n	800428e <TIM_Base_SetConfig+0xb2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800423c:	d027      	beq.n	800428e <TIM_Base_SetConfig+0xb2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a2c      	ldr	r2, [pc, #176]	@ (80042f4 <TIM_Base_SetConfig+0x118>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d023      	beq.n	800428e <TIM_Base_SetConfig+0xb2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a2b      	ldr	r2, [pc, #172]	@ (80042f8 <TIM_Base_SetConfig+0x11c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d01f      	beq.n	800428e <TIM_Base_SetConfig+0xb2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a2a      	ldr	r2, [pc, #168]	@ (80042fc <TIM_Base_SetConfig+0x120>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d01b      	beq.n	800428e <TIM_Base_SetConfig+0xb2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a29      	ldr	r2, [pc, #164]	@ (8004300 <TIM_Base_SetConfig+0x124>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d017      	beq.n	800428e <TIM_Base_SetConfig+0xb2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a28      	ldr	r2, [pc, #160]	@ (8004304 <TIM_Base_SetConfig+0x128>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d013      	beq.n	800428e <TIM_Base_SetConfig+0xb2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a27      	ldr	r2, [pc, #156]	@ (8004308 <TIM_Base_SetConfig+0x12c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d00f      	beq.n	800428e <TIM_Base_SetConfig+0xb2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a26      	ldr	r2, [pc, #152]	@ (800430c <TIM_Base_SetConfig+0x130>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00b      	beq.n	800428e <TIM_Base_SetConfig+0xb2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a25      	ldr	r2, [pc, #148]	@ (8004310 <TIM_Base_SetConfig+0x134>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d007      	beq.n	800428e <TIM_Base_SetConfig+0xb2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a24      	ldr	r2, [pc, #144]	@ (8004314 <TIM_Base_SetConfig+0x138>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d003      	beq.n	800428e <TIM_Base_SetConfig+0xb2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a23      	ldr	r2, [pc, #140]	@ (8004318 <TIM_Base_SetConfig+0x13c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d108      	bne.n	80042a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4313      	orrs	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a0a      	ldr	r2, [pc, #40]	@ (80042f0 <TIM_Base_SetConfig+0x114>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d003      	beq.n	80042d4 <TIM_Base_SetConfig+0xf8>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a0c      	ldr	r2, [pc, #48]	@ (8004300 <TIM_Base_SetConfig+0x124>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d103      	bne.n	80042dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	691a      	ldr	r2, [r3, #16]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	615a      	str	r2, [r3, #20]
}
 80042e2:	bf00      	nop
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40010000 	.word	0x40010000
 80042f4:	40000400 	.word	0x40000400
 80042f8:	40000800 	.word	0x40000800
 80042fc:	40000c00 	.word	0x40000c00
 8004300:	40010400 	.word	0x40010400
 8004304:	40014000 	.word	0x40014000
 8004308:	40014400 	.word	0x40014400
 800430c:	40014800 	.word	0x40014800
 8004310:	40001800 	.word	0x40001800
 8004314:	40001c00 	.word	0x40001c00
 8004318:	40002000 	.word	0x40002000

0800431c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e040      	b.n	80043ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800436e:	2b00      	cmp	r3, #0
 8004370:	d106      	bne.n	8004380 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7fc fb78 	bl	8000a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2224      	movs	r2, #36	@ 0x24
 8004384:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0201 	bic.w	r2, r2, #1
 8004394:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f8b0 	bl	80044fc <UART_SetConfig>
 800439c:	4603      	mov	r3, r0
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d101      	bne.n	80043a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e022      	b.n	80043ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fb08 	bl	80049c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689a      	ldr	r2, [r3, #8]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fb8f 	bl	8004b08 <UART_CheckIdleState>
 80043ea:	4603      	mov	r3, r0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08a      	sub	sp, #40	@ 0x28
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	603b      	str	r3, [r7, #0]
 8004400:	4613      	mov	r3, r2
 8004402:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004408:	2b20      	cmp	r3, #32
 800440a:	d171      	bne.n	80044f0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <HAL_UART_Transmit+0x24>
 8004412:	88fb      	ldrh	r3, [r7, #6]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e06a      	b.n	80044f2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2221      	movs	r2, #33	@ 0x21
 8004428:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800442a:	f7fc fe0f 	bl	800104c <HAL_GetTick>
 800442e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	88fa      	ldrh	r2, [r7, #6]
 8004434:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	88fa      	ldrh	r2, [r7, #6]
 800443c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004448:	d108      	bne.n	800445c <HAL_UART_Transmit+0x68>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d104      	bne.n	800445c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004452:	2300      	movs	r3, #0
 8004454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	e003      	b.n	8004464 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004460:	2300      	movs	r3, #0
 8004462:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004464:	e02c      	b.n	80044c0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2200      	movs	r2, #0
 800446e:	2180      	movs	r1, #128	@ 0x80
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 fb80 	bl	8004b76 <UART_WaitOnFlagUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e038      	b.n	80044f2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10b      	bne.n	800449e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004494:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	3302      	adds	r3, #2
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	e007      	b.n	80044ae <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	781a      	ldrb	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	3301      	adds	r3, #1
 80044ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	3b01      	subs	r3, #1
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1cc      	bne.n	8004466 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2200      	movs	r2, #0
 80044d4:	2140      	movs	r1, #64	@ 0x40
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 fb4d 	bl	8004b76 <UART_WaitOnFlagUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e005      	b.n	80044f2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2220      	movs	r2, #32
 80044ea:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	e000      	b.n	80044f2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80044f0:	2302      	movs	r3, #2
  }
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3720      	adds	r7, #32
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	431a      	orrs	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	4313      	orrs	r3, r2
 800451e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	4ba6      	ldr	r3, [pc, #664]	@ (80047c0 <UART_SetConfig+0x2c4>)
 8004528:	4013      	ands	r3, r2
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6812      	ldr	r2, [r2, #0]
 800452e:	6979      	ldr	r1, [r7, #20]
 8004530:	430b      	orrs	r3, r1
 8004532:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	430a      	orrs	r2, r1
 800456c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a94      	ldr	r2, [pc, #592]	@ (80047c4 <UART_SetConfig+0x2c8>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d120      	bne.n	80045ba <UART_SetConfig+0xbe>
 8004578:	4b93      	ldr	r3, [pc, #588]	@ (80047c8 <UART_SetConfig+0x2cc>)
 800457a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	2b03      	cmp	r3, #3
 8004584:	d816      	bhi.n	80045b4 <UART_SetConfig+0xb8>
 8004586:	a201      	add	r2, pc, #4	@ (adr r2, 800458c <UART_SetConfig+0x90>)
 8004588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458c:	0800459d 	.word	0x0800459d
 8004590:	080045a9 	.word	0x080045a9
 8004594:	080045a3 	.word	0x080045a3
 8004598:	080045af 	.word	0x080045af
 800459c:	2301      	movs	r3, #1
 800459e:	77fb      	strb	r3, [r7, #31]
 80045a0:	e150      	b.n	8004844 <UART_SetConfig+0x348>
 80045a2:	2302      	movs	r3, #2
 80045a4:	77fb      	strb	r3, [r7, #31]
 80045a6:	e14d      	b.n	8004844 <UART_SetConfig+0x348>
 80045a8:	2304      	movs	r3, #4
 80045aa:	77fb      	strb	r3, [r7, #31]
 80045ac:	e14a      	b.n	8004844 <UART_SetConfig+0x348>
 80045ae:	2308      	movs	r3, #8
 80045b0:	77fb      	strb	r3, [r7, #31]
 80045b2:	e147      	b.n	8004844 <UART_SetConfig+0x348>
 80045b4:	2310      	movs	r3, #16
 80045b6:	77fb      	strb	r3, [r7, #31]
 80045b8:	e144      	b.n	8004844 <UART_SetConfig+0x348>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a83      	ldr	r2, [pc, #524]	@ (80047cc <UART_SetConfig+0x2d0>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d132      	bne.n	800462a <UART_SetConfig+0x12e>
 80045c4:	4b80      	ldr	r3, [pc, #512]	@ (80047c8 <UART_SetConfig+0x2cc>)
 80045c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ca:	f003 030c 	and.w	r3, r3, #12
 80045ce:	2b0c      	cmp	r3, #12
 80045d0:	d828      	bhi.n	8004624 <UART_SetConfig+0x128>
 80045d2:	a201      	add	r2, pc, #4	@ (adr r2, 80045d8 <UART_SetConfig+0xdc>)
 80045d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d8:	0800460d 	.word	0x0800460d
 80045dc:	08004625 	.word	0x08004625
 80045e0:	08004625 	.word	0x08004625
 80045e4:	08004625 	.word	0x08004625
 80045e8:	08004619 	.word	0x08004619
 80045ec:	08004625 	.word	0x08004625
 80045f0:	08004625 	.word	0x08004625
 80045f4:	08004625 	.word	0x08004625
 80045f8:	08004613 	.word	0x08004613
 80045fc:	08004625 	.word	0x08004625
 8004600:	08004625 	.word	0x08004625
 8004604:	08004625 	.word	0x08004625
 8004608:	0800461f 	.word	0x0800461f
 800460c:	2300      	movs	r3, #0
 800460e:	77fb      	strb	r3, [r7, #31]
 8004610:	e118      	b.n	8004844 <UART_SetConfig+0x348>
 8004612:	2302      	movs	r3, #2
 8004614:	77fb      	strb	r3, [r7, #31]
 8004616:	e115      	b.n	8004844 <UART_SetConfig+0x348>
 8004618:	2304      	movs	r3, #4
 800461a:	77fb      	strb	r3, [r7, #31]
 800461c:	e112      	b.n	8004844 <UART_SetConfig+0x348>
 800461e:	2308      	movs	r3, #8
 8004620:	77fb      	strb	r3, [r7, #31]
 8004622:	e10f      	b.n	8004844 <UART_SetConfig+0x348>
 8004624:	2310      	movs	r3, #16
 8004626:	77fb      	strb	r3, [r7, #31]
 8004628:	e10c      	b.n	8004844 <UART_SetConfig+0x348>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a68      	ldr	r2, [pc, #416]	@ (80047d0 <UART_SetConfig+0x2d4>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d120      	bne.n	8004676 <UART_SetConfig+0x17a>
 8004634:	4b64      	ldr	r3, [pc, #400]	@ (80047c8 <UART_SetConfig+0x2cc>)
 8004636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800463a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800463e:	2b30      	cmp	r3, #48	@ 0x30
 8004640:	d013      	beq.n	800466a <UART_SetConfig+0x16e>
 8004642:	2b30      	cmp	r3, #48	@ 0x30
 8004644:	d814      	bhi.n	8004670 <UART_SetConfig+0x174>
 8004646:	2b20      	cmp	r3, #32
 8004648:	d009      	beq.n	800465e <UART_SetConfig+0x162>
 800464a:	2b20      	cmp	r3, #32
 800464c:	d810      	bhi.n	8004670 <UART_SetConfig+0x174>
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <UART_SetConfig+0x15c>
 8004652:	2b10      	cmp	r3, #16
 8004654:	d006      	beq.n	8004664 <UART_SetConfig+0x168>
 8004656:	e00b      	b.n	8004670 <UART_SetConfig+0x174>
 8004658:	2300      	movs	r3, #0
 800465a:	77fb      	strb	r3, [r7, #31]
 800465c:	e0f2      	b.n	8004844 <UART_SetConfig+0x348>
 800465e:	2302      	movs	r3, #2
 8004660:	77fb      	strb	r3, [r7, #31]
 8004662:	e0ef      	b.n	8004844 <UART_SetConfig+0x348>
 8004664:	2304      	movs	r3, #4
 8004666:	77fb      	strb	r3, [r7, #31]
 8004668:	e0ec      	b.n	8004844 <UART_SetConfig+0x348>
 800466a:	2308      	movs	r3, #8
 800466c:	77fb      	strb	r3, [r7, #31]
 800466e:	e0e9      	b.n	8004844 <UART_SetConfig+0x348>
 8004670:	2310      	movs	r3, #16
 8004672:	77fb      	strb	r3, [r7, #31]
 8004674:	e0e6      	b.n	8004844 <UART_SetConfig+0x348>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a56      	ldr	r2, [pc, #344]	@ (80047d4 <UART_SetConfig+0x2d8>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d120      	bne.n	80046c2 <UART_SetConfig+0x1c6>
 8004680:	4b51      	ldr	r3, [pc, #324]	@ (80047c8 <UART_SetConfig+0x2cc>)
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004686:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800468a:	2bc0      	cmp	r3, #192	@ 0xc0
 800468c:	d013      	beq.n	80046b6 <UART_SetConfig+0x1ba>
 800468e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004690:	d814      	bhi.n	80046bc <UART_SetConfig+0x1c0>
 8004692:	2b80      	cmp	r3, #128	@ 0x80
 8004694:	d009      	beq.n	80046aa <UART_SetConfig+0x1ae>
 8004696:	2b80      	cmp	r3, #128	@ 0x80
 8004698:	d810      	bhi.n	80046bc <UART_SetConfig+0x1c0>
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <UART_SetConfig+0x1a8>
 800469e:	2b40      	cmp	r3, #64	@ 0x40
 80046a0:	d006      	beq.n	80046b0 <UART_SetConfig+0x1b4>
 80046a2:	e00b      	b.n	80046bc <UART_SetConfig+0x1c0>
 80046a4:	2300      	movs	r3, #0
 80046a6:	77fb      	strb	r3, [r7, #31]
 80046a8:	e0cc      	b.n	8004844 <UART_SetConfig+0x348>
 80046aa:	2302      	movs	r3, #2
 80046ac:	77fb      	strb	r3, [r7, #31]
 80046ae:	e0c9      	b.n	8004844 <UART_SetConfig+0x348>
 80046b0:	2304      	movs	r3, #4
 80046b2:	77fb      	strb	r3, [r7, #31]
 80046b4:	e0c6      	b.n	8004844 <UART_SetConfig+0x348>
 80046b6:	2308      	movs	r3, #8
 80046b8:	77fb      	strb	r3, [r7, #31]
 80046ba:	e0c3      	b.n	8004844 <UART_SetConfig+0x348>
 80046bc:	2310      	movs	r3, #16
 80046be:	77fb      	strb	r3, [r7, #31]
 80046c0:	e0c0      	b.n	8004844 <UART_SetConfig+0x348>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a44      	ldr	r2, [pc, #272]	@ (80047d8 <UART_SetConfig+0x2dc>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d125      	bne.n	8004718 <UART_SetConfig+0x21c>
 80046cc:	4b3e      	ldr	r3, [pc, #248]	@ (80047c8 <UART_SetConfig+0x2cc>)
 80046ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046da:	d017      	beq.n	800470c <UART_SetConfig+0x210>
 80046dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046e0:	d817      	bhi.n	8004712 <UART_SetConfig+0x216>
 80046e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046e6:	d00b      	beq.n	8004700 <UART_SetConfig+0x204>
 80046e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046ec:	d811      	bhi.n	8004712 <UART_SetConfig+0x216>
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <UART_SetConfig+0x1fe>
 80046f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046f6:	d006      	beq.n	8004706 <UART_SetConfig+0x20a>
 80046f8:	e00b      	b.n	8004712 <UART_SetConfig+0x216>
 80046fa:	2300      	movs	r3, #0
 80046fc:	77fb      	strb	r3, [r7, #31]
 80046fe:	e0a1      	b.n	8004844 <UART_SetConfig+0x348>
 8004700:	2302      	movs	r3, #2
 8004702:	77fb      	strb	r3, [r7, #31]
 8004704:	e09e      	b.n	8004844 <UART_SetConfig+0x348>
 8004706:	2304      	movs	r3, #4
 8004708:	77fb      	strb	r3, [r7, #31]
 800470a:	e09b      	b.n	8004844 <UART_SetConfig+0x348>
 800470c:	2308      	movs	r3, #8
 800470e:	77fb      	strb	r3, [r7, #31]
 8004710:	e098      	b.n	8004844 <UART_SetConfig+0x348>
 8004712:	2310      	movs	r3, #16
 8004714:	77fb      	strb	r3, [r7, #31]
 8004716:	e095      	b.n	8004844 <UART_SetConfig+0x348>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a2f      	ldr	r2, [pc, #188]	@ (80047dc <UART_SetConfig+0x2e0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d125      	bne.n	800476e <UART_SetConfig+0x272>
 8004722:	4b29      	ldr	r3, [pc, #164]	@ (80047c8 <UART_SetConfig+0x2cc>)
 8004724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004728:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800472c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004730:	d017      	beq.n	8004762 <UART_SetConfig+0x266>
 8004732:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004736:	d817      	bhi.n	8004768 <UART_SetConfig+0x26c>
 8004738:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800473c:	d00b      	beq.n	8004756 <UART_SetConfig+0x25a>
 800473e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004742:	d811      	bhi.n	8004768 <UART_SetConfig+0x26c>
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <UART_SetConfig+0x254>
 8004748:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800474c:	d006      	beq.n	800475c <UART_SetConfig+0x260>
 800474e:	e00b      	b.n	8004768 <UART_SetConfig+0x26c>
 8004750:	2301      	movs	r3, #1
 8004752:	77fb      	strb	r3, [r7, #31]
 8004754:	e076      	b.n	8004844 <UART_SetConfig+0x348>
 8004756:	2302      	movs	r3, #2
 8004758:	77fb      	strb	r3, [r7, #31]
 800475a:	e073      	b.n	8004844 <UART_SetConfig+0x348>
 800475c:	2304      	movs	r3, #4
 800475e:	77fb      	strb	r3, [r7, #31]
 8004760:	e070      	b.n	8004844 <UART_SetConfig+0x348>
 8004762:	2308      	movs	r3, #8
 8004764:	77fb      	strb	r3, [r7, #31]
 8004766:	e06d      	b.n	8004844 <UART_SetConfig+0x348>
 8004768:	2310      	movs	r3, #16
 800476a:	77fb      	strb	r3, [r7, #31]
 800476c:	e06a      	b.n	8004844 <UART_SetConfig+0x348>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a1b      	ldr	r2, [pc, #108]	@ (80047e0 <UART_SetConfig+0x2e4>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d138      	bne.n	80047ea <UART_SetConfig+0x2ee>
 8004778:	4b13      	ldr	r3, [pc, #76]	@ (80047c8 <UART_SetConfig+0x2cc>)
 800477a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800477e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004782:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004786:	d017      	beq.n	80047b8 <UART_SetConfig+0x2bc>
 8004788:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800478c:	d82a      	bhi.n	80047e4 <UART_SetConfig+0x2e8>
 800478e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004792:	d00b      	beq.n	80047ac <UART_SetConfig+0x2b0>
 8004794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004798:	d824      	bhi.n	80047e4 <UART_SetConfig+0x2e8>
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <UART_SetConfig+0x2aa>
 800479e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047a2:	d006      	beq.n	80047b2 <UART_SetConfig+0x2b6>
 80047a4:	e01e      	b.n	80047e4 <UART_SetConfig+0x2e8>
 80047a6:	2300      	movs	r3, #0
 80047a8:	77fb      	strb	r3, [r7, #31]
 80047aa:	e04b      	b.n	8004844 <UART_SetConfig+0x348>
 80047ac:	2302      	movs	r3, #2
 80047ae:	77fb      	strb	r3, [r7, #31]
 80047b0:	e048      	b.n	8004844 <UART_SetConfig+0x348>
 80047b2:	2304      	movs	r3, #4
 80047b4:	77fb      	strb	r3, [r7, #31]
 80047b6:	e045      	b.n	8004844 <UART_SetConfig+0x348>
 80047b8:	2308      	movs	r3, #8
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e042      	b.n	8004844 <UART_SetConfig+0x348>
 80047be:	bf00      	nop
 80047c0:	efff69f3 	.word	0xefff69f3
 80047c4:	40011000 	.word	0x40011000
 80047c8:	40023800 	.word	0x40023800
 80047cc:	40004400 	.word	0x40004400
 80047d0:	40004800 	.word	0x40004800
 80047d4:	40004c00 	.word	0x40004c00
 80047d8:	40005000 	.word	0x40005000
 80047dc:	40011400 	.word	0x40011400
 80047e0:	40007800 	.word	0x40007800
 80047e4:	2310      	movs	r3, #16
 80047e6:	77fb      	strb	r3, [r7, #31]
 80047e8:	e02c      	b.n	8004844 <UART_SetConfig+0x348>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a72      	ldr	r2, [pc, #456]	@ (80049b8 <UART_SetConfig+0x4bc>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d125      	bne.n	8004840 <UART_SetConfig+0x344>
 80047f4:	4b71      	ldr	r3, [pc, #452]	@ (80049bc <UART_SetConfig+0x4c0>)
 80047f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80047fe:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004802:	d017      	beq.n	8004834 <UART_SetConfig+0x338>
 8004804:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004808:	d817      	bhi.n	800483a <UART_SetConfig+0x33e>
 800480a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800480e:	d00b      	beq.n	8004828 <UART_SetConfig+0x32c>
 8004810:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004814:	d811      	bhi.n	800483a <UART_SetConfig+0x33e>
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <UART_SetConfig+0x326>
 800481a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800481e:	d006      	beq.n	800482e <UART_SetConfig+0x332>
 8004820:	e00b      	b.n	800483a <UART_SetConfig+0x33e>
 8004822:	2300      	movs	r3, #0
 8004824:	77fb      	strb	r3, [r7, #31]
 8004826:	e00d      	b.n	8004844 <UART_SetConfig+0x348>
 8004828:	2302      	movs	r3, #2
 800482a:	77fb      	strb	r3, [r7, #31]
 800482c:	e00a      	b.n	8004844 <UART_SetConfig+0x348>
 800482e:	2304      	movs	r3, #4
 8004830:	77fb      	strb	r3, [r7, #31]
 8004832:	e007      	b.n	8004844 <UART_SetConfig+0x348>
 8004834:	2308      	movs	r3, #8
 8004836:	77fb      	strb	r3, [r7, #31]
 8004838:	e004      	b.n	8004844 <UART_SetConfig+0x348>
 800483a:	2310      	movs	r3, #16
 800483c:	77fb      	strb	r3, [r7, #31]
 800483e:	e001      	b.n	8004844 <UART_SetConfig+0x348>
 8004840:	2310      	movs	r3, #16
 8004842:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800484c:	d15b      	bne.n	8004906 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800484e:	7ffb      	ldrb	r3, [r7, #31]
 8004850:	2b08      	cmp	r3, #8
 8004852:	d828      	bhi.n	80048a6 <UART_SetConfig+0x3aa>
 8004854:	a201      	add	r2, pc, #4	@ (adr r2, 800485c <UART_SetConfig+0x360>)
 8004856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485a:	bf00      	nop
 800485c:	08004881 	.word	0x08004881
 8004860:	08004889 	.word	0x08004889
 8004864:	08004891 	.word	0x08004891
 8004868:	080048a7 	.word	0x080048a7
 800486c:	08004897 	.word	0x08004897
 8004870:	080048a7 	.word	0x080048a7
 8004874:	080048a7 	.word	0x080048a7
 8004878:	080048a7 	.word	0x080048a7
 800487c:	0800489f 	.word	0x0800489f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004880:	f7fe fe40 	bl	8003504 <HAL_RCC_GetPCLK1Freq>
 8004884:	61b8      	str	r0, [r7, #24]
        break;
 8004886:	e013      	b.n	80048b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004888:	f7fe fe50 	bl	800352c <HAL_RCC_GetPCLK2Freq>
 800488c:	61b8      	str	r0, [r7, #24]
        break;
 800488e:	e00f      	b.n	80048b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004890:	4b4b      	ldr	r3, [pc, #300]	@ (80049c0 <UART_SetConfig+0x4c4>)
 8004892:	61bb      	str	r3, [r7, #24]
        break;
 8004894:	e00c      	b.n	80048b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004896:	f7fe fd63 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 800489a:	61b8      	str	r0, [r7, #24]
        break;
 800489c:	e008      	b.n	80048b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800489e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048a2:	61bb      	str	r3, [r7, #24]
        break;
 80048a4:	e004      	b.n	80048b0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	77bb      	strb	r3, [r7, #30]
        break;
 80048ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d074      	beq.n	80049a0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	005a      	lsls	r2, r3, #1
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	085b      	lsrs	r3, r3, #1
 80048c0:	441a      	add	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	2b0f      	cmp	r3, #15
 80048d0:	d916      	bls.n	8004900 <UART_SetConfig+0x404>
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048d8:	d212      	bcs.n	8004900 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	f023 030f 	bic.w	r3, r3, #15
 80048e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	085b      	lsrs	r3, r3, #1
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	89fb      	ldrh	r3, [r7, #14]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	89fa      	ldrh	r2, [r7, #14]
 80048fc:	60da      	str	r2, [r3, #12]
 80048fe:	e04f      	b.n	80049a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	77bb      	strb	r3, [r7, #30]
 8004904:	e04c      	b.n	80049a0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004906:	7ffb      	ldrb	r3, [r7, #31]
 8004908:	2b08      	cmp	r3, #8
 800490a:	d828      	bhi.n	800495e <UART_SetConfig+0x462>
 800490c:	a201      	add	r2, pc, #4	@ (adr r2, 8004914 <UART_SetConfig+0x418>)
 800490e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004912:	bf00      	nop
 8004914:	08004939 	.word	0x08004939
 8004918:	08004941 	.word	0x08004941
 800491c:	08004949 	.word	0x08004949
 8004920:	0800495f 	.word	0x0800495f
 8004924:	0800494f 	.word	0x0800494f
 8004928:	0800495f 	.word	0x0800495f
 800492c:	0800495f 	.word	0x0800495f
 8004930:	0800495f 	.word	0x0800495f
 8004934:	08004957 	.word	0x08004957
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004938:	f7fe fde4 	bl	8003504 <HAL_RCC_GetPCLK1Freq>
 800493c:	61b8      	str	r0, [r7, #24]
        break;
 800493e:	e013      	b.n	8004968 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004940:	f7fe fdf4 	bl	800352c <HAL_RCC_GetPCLK2Freq>
 8004944:	61b8      	str	r0, [r7, #24]
        break;
 8004946:	e00f      	b.n	8004968 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004948:	4b1d      	ldr	r3, [pc, #116]	@ (80049c0 <UART_SetConfig+0x4c4>)
 800494a:	61bb      	str	r3, [r7, #24]
        break;
 800494c:	e00c      	b.n	8004968 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800494e:	f7fe fd07 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 8004952:	61b8      	str	r0, [r7, #24]
        break;
 8004954:	e008      	b.n	8004968 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004956:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800495a:	61bb      	str	r3, [r7, #24]
        break;
 800495c:	e004      	b.n	8004968 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	77bb      	strb	r3, [r7, #30]
        break;
 8004966:	bf00      	nop
    }

    if (pclk != 0U)
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d018      	beq.n	80049a0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	085a      	lsrs	r2, r3, #1
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	441a      	add	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004980:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	2b0f      	cmp	r3, #15
 8004986:	d909      	bls.n	800499c <UART_SetConfig+0x4a0>
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800498e:	d205      	bcs.n	800499c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	b29a      	uxth	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	60da      	str	r2, [r3, #12]
 800499a:	e001      	b.n	80049a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80049ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3720      	adds	r7, #32
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40007c00 	.word	0x40007c00
 80049bc:	40023800 	.word	0x40023800
 80049c0:	00f42400 	.word	0x00f42400

080049c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00a      	beq.n	80049ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00a      	beq.n	8004a32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a58:	f003 0310 	and.w	r3, r3, #16
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00a      	beq.n	8004a76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7a:	f003 0320 	and.w	r3, r3, #32
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01a      	beq.n	8004ada <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ac2:	d10a      	bne.n	8004ada <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	605a      	str	r2, [r3, #4]
  }
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b18:	f7fc fa98 	bl	800104c <HAL_GetTick>
 8004b1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d10e      	bne.n	8004b4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f81b 	bl	8004b76 <UART_WaitOnFlagUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e011      	b.n	8004b6e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b09c      	sub	sp, #112	@ 0x70
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	603b      	str	r3, [r7, #0]
 8004b82:	4613      	mov	r3, r2
 8004b84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b86:	e0a7      	b.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b8e:	f000 80a3 	beq.w	8004cd8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b92:	f7fc fa5b 	bl	800104c <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d302      	bcc.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004ba2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d13f      	bne.n	8004c28 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bb0:	e853 3f00 	ldrex	r3, [r3]
 8004bb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004bb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bb8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004bbc:	667b      	str	r3, [r7, #100]	@ 0x64
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bc8:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004bcc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004bce:	e841 2300 	strex	r3, r2, [r1]
 8004bd2:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004bd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1e6      	bne.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3308      	adds	r3, #8
 8004be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004be4:	e853 3f00 	ldrex	r3, [r3]
 8004be8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bec:	f023 0301 	bic.w	r3, r3, #1
 8004bf0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3308      	adds	r3, #8
 8004bf8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004bfa:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004bfc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004c00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c02:	e841 2300 	strex	r3, r2, [r1]
 8004c06:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004c08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1e5      	bne.n	8004bda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2220      	movs	r2, #32
 8004c12:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e068      	b.n	8004cfa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0304 	and.w	r3, r3, #4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d050      	beq.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c44:	d148      	bne.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c4e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c58:	e853 3f00 	ldrex	r3, [r3]
 8004c5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c60:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004c64:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c70:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c76:	e841 2300 	strex	r3, r2, [r1]
 8004c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1e6      	bne.n	8004c50 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3308      	adds	r3, #8
 8004c88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	e853 3f00 	ldrex	r3, [r3]
 8004c90:	613b      	str	r3, [r7, #16]
   return(result);
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f023 0301 	bic.w	r3, r3, #1
 8004c98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3308      	adds	r3, #8
 8004ca0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004ca2:	623a      	str	r2, [r7, #32]
 8004ca4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca6:	69f9      	ldr	r1, [r7, #28]
 8004ca8:	6a3a      	ldr	r2, [r7, #32]
 8004caa:	e841 2300 	strex	r3, r2, [r1]
 8004cae:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1e5      	bne.n	8004c82 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e010      	b.n	8004cfa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69da      	ldr	r2, [r3, #28]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	bf0c      	ite	eq
 8004ce8:	2301      	moveq	r3, #1
 8004cea:	2300      	movne	r3, #0
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	461a      	mov	r2, r3
 8004cf0:	79fb      	ldrb	r3, [r7, #7]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	f43f af48 	beq.w	8004b88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3770      	adds	r7, #112	@ 0x70
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d04:	b084      	sub	sp, #16
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b084      	sub	sp, #16
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	f107 001c 	add.w	r0, r7, #28
 8004d12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d120      	bne.n	8004d5e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d20:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	4b20      	ldr	r3, [pc, #128]	@ (8004db0 <USB_CoreInit+0xac>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d105      	bne.n	8004d52 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f001 fbee 	bl	8006534 <USB_CoreReset>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	73fb      	strb	r3, [r7, #15]
 8004d5c:	e010      	b.n	8004d80 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f001 fbe2 	bl	8006534 <USB_CoreReset>
 8004d70:	4603      	mov	r3, r0
 8004d72:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d78:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d10b      	bne.n	8004d9e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f043 0206 	orr.w	r2, r3, #6
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f043 0220 	orr.w	r2, r3, #32
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004daa:	b004      	add	sp, #16
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	ffbdffbf 	.word	0xffbdffbf

08004db4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004dc2:	79fb      	ldrb	r3, [r7, #7]
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d165      	bne.n	8004e94 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4a41      	ldr	r2, [pc, #260]	@ (8004ed0 <USB_SetTurnaroundTime+0x11c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d906      	bls.n	8004dde <USB_SetTurnaroundTime+0x2a>
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4a40      	ldr	r2, [pc, #256]	@ (8004ed4 <USB_SetTurnaroundTime+0x120>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d202      	bcs.n	8004dde <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004dd8:	230f      	movs	r3, #15
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	e062      	b.n	8004ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ed4 <USB_SetTurnaroundTime+0x120>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d306      	bcc.n	8004df4 <USB_SetTurnaroundTime+0x40>
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	4a3b      	ldr	r2, [pc, #236]	@ (8004ed8 <USB_SetTurnaroundTime+0x124>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d202      	bcs.n	8004df4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004dee:	230e      	movs	r3, #14
 8004df0:	617b      	str	r3, [r7, #20]
 8004df2:	e057      	b.n	8004ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	4a38      	ldr	r2, [pc, #224]	@ (8004ed8 <USB_SetTurnaroundTime+0x124>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d306      	bcc.n	8004e0a <USB_SetTurnaroundTime+0x56>
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4a37      	ldr	r2, [pc, #220]	@ (8004edc <USB_SetTurnaroundTime+0x128>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d202      	bcs.n	8004e0a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e04:	230d      	movs	r3, #13
 8004e06:	617b      	str	r3, [r7, #20]
 8004e08:	e04c      	b.n	8004ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	4a33      	ldr	r2, [pc, #204]	@ (8004edc <USB_SetTurnaroundTime+0x128>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d306      	bcc.n	8004e20 <USB_SetTurnaroundTime+0x6c>
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	4a32      	ldr	r2, [pc, #200]	@ (8004ee0 <USB_SetTurnaroundTime+0x12c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d802      	bhi.n	8004e20 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e1a:	230c      	movs	r3, #12
 8004e1c:	617b      	str	r3, [r7, #20]
 8004e1e:	e041      	b.n	8004ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	4a2f      	ldr	r2, [pc, #188]	@ (8004ee0 <USB_SetTurnaroundTime+0x12c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d906      	bls.n	8004e36 <USB_SetTurnaroundTime+0x82>
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4a2e      	ldr	r2, [pc, #184]	@ (8004ee4 <USB_SetTurnaroundTime+0x130>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d802      	bhi.n	8004e36 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e30:	230b      	movs	r3, #11
 8004e32:	617b      	str	r3, [r7, #20]
 8004e34:	e036      	b.n	8004ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	4a2a      	ldr	r2, [pc, #168]	@ (8004ee4 <USB_SetTurnaroundTime+0x130>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d906      	bls.n	8004e4c <USB_SetTurnaroundTime+0x98>
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	4a29      	ldr	r2, [pc, #164]	@ (8004ee8 <USB_SetTurnaroundTime+0x134>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d802      	bhi.n	8004e4c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e46:	230a      	movs	r3, #10
 8004e48:	617b      	str	r3, [r7, #20]
 8004e4a:	e02b      	b.n	8004ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4a26      	ldr	r2, [pc, #152]	@ (8004ee8 <USB_SetTurnaroundTime+0x134>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d906      	bls.n	8004e62 <USB_SetTurnaroundTime+0xae>
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4a25      	ldr	r2, [pc, #148]	@ (8004eec <USB_SetTurnaroundTime+0x138>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d202      	bcs.n	8004e62 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e5c:	2309      	movs	r3, #9
 8004e5e:	617b      	str	r3, [r7, #20]
 8004e60:	e020      	b.n	8004ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	4a21      	ldr	r2, [pc, #132]	@ (8004eec <USB_SetTurnaroundTime+0x138>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d306      	bcc.n	8004e78 <USB_SetTurnaroundTime+0xc4>
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	4a20      	ldr	r2, [pc, #128]	@ (8004ef0 <USB_SetTurnaroundTime+0x13c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d802      	bhi.n	8004e78 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e72:	2308      	movs	r3, #8
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	e015      	b.n	8004ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ef0 <USB_SetTurnaroundTime+0x13c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d906      	bls.n	8004e8e <USB_SetTurnaroundTime+0xda>
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	4a1c      	ldr	r2, [pc, #112]	@ (8004ef4 <USB_SetTurnaroundTime+0x140>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d202      	bcs.n	8004e8e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e88:	2307      	movs	r3, #7
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	e00a      	b.n	8004ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e8e:	2306      	movs	r3, #6
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	e007      	b.n	8004ea4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004e94:	79fb      	ldrb	r3, [r7, #7]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d102      	bne.n	8004ea0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004e9a:	2309      	movs	r3, #9
 8004e9c:	617b      	str	r3, [r7, #20]
 8004e9e:	e001      	b.n	8004ea4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ea0:	2309      	movs	r3, #9
 8004ea2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	68da      	ldr	r2, [r3, #12]
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	029b      	lsls	r3, r3, #10
 8004eb8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	371c      	adds	r7, #28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	00d8acbf 	.word	0x00d8acbf
 8004ed4:	00e4e1c0 	.word	0x00e4e1c0
 8004ed8:	00f42400 	.word	0x00f42400
 8004edc:	01067380 	.word	0x01067380
 8004ee0:	011a499f 	.word	0x011a499f
 8004ee4:	01312cff 	.word	0x01312cff
 8004ee8:	014ca43f 	.word	0x014ca43f
 8004eec:	016e3600 	.word	0x016e3600
 8004ef0:	01a6ab1f 	.word	0x01a6ab1f
 8004ef4:	01e84800 	.word	0x01e84800

08004ef8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f043 0201 	orr.w	r2, r3, #1
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f023 0201 	bic.w	r2, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f58:	78fb      	ldrb	r3, [r7, #3]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d115      	bne.n	8004f8a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f6a:	2001      	movs	r0, #1
 8004f6c:	f7fc f87a 	bl	8001064 <HAL_Delay>
      ms++;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3301      	adds	r3, #1
 8004f74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f001 fa4b 	bl	8006412 <USB_GetMode>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d01e      	beq.n	8004fc0 <USB_SetCurrentMode+0x84>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2b31      	cmp	r3, #49	@ 0x31
 8004f86:	d9f0      	bls.n	8004f6a <USB_SetCurrentMode+0x2e>
 8004f88:	e01a      	b.n	8004fc0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f8a:	78fb      	ldrb	r3, [r7, #3]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d115      	bne.n	8004fbc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f9c:	2001      	movs	r0, #1
 8004f9e:	f7fc f861 	bl	8001064 <HAL_Delay>
      ms++;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f001 fa32 	bl	8006412 <USB_GetMode>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d005      	beq.n	8004fc0 <USB_SetCurrentMode+0x84>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b31      	cmp	r3, #49	@ 0x31
 8004fb8:	d9f0      	bls.n	8004f9c <USB_SetCurrentMode+0x60>
 8004fba:	e001      	b.n	8004fc0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e005      	b.n	8004fcc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b32      	cmp	r3, #50	@ 0x32
 8004fc4:	d101      	bne.n	8004fca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e000      	b.n	8004fcc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fd4:	b084      	sub	sp, #16
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b086      	sub	sp, #24
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004fe2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004fee:	2300      	movs	r3, #0
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	e009      	b.n	8005008 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	3340      	adds	r3, #64	@ 0x40
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	2200      	movs	r2, #0
 8005000:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	3301      	adds	r3, #1
 8005006:	613b      	str	r3, [r7, #16]
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	2b0e      	cmp	r3, #14
 800500c:	d9f2      	bls.n	8004ff4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800500e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005010:	2b00      	cmp	r3, #0
 8005012:	d11c      	bne.n	800504e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005022:	f043 0302 	orr.w	r3, r3, #2
 8005026:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800502c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	e005      	b.n	800505a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005052:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005060:	461a      	mov	r2, r3
 8005062:	2300      	movs	r3, #0
 8005064:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800506c:	4619      	mov	r1, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005074:	461a      	mov	r2, r3
 8005076:	680b      	ldr	r3, [r1, #0]
 8005078:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800507a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800507c:	2b01      	cmp	r3, #1
 800507e:	d10c      	bne.n	800509a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005082:	2b00      	cmp	r3, #0
 8005084:	d104      	bne.n	8005090 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005086:	2100      	movs	r1, #0
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f965 	bl	8005358 <USB_SetDevSpeed>
 800508e:	e008      	b.n	80050a2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005090:	2101      	movs	r1, #1
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f960 	bl	8005358 <USB_SetDevSpeed>
 8005098:	e003      	b.n	80050a2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800509a:	2103      	movs	r1, #3
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f95b 	bl	8005358 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050a2:	2110      	movs	r1, #16
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f8f3 	bl	8005290 <USB_FlushTxFifo>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f91f 	bl	80052f8 <USB_FlushRxFifo>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050ca:	461a      	mov	r2, r3
 80050cc:	2300      	movs	r3, #0
 80050ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050d6:	461a      	mov	r2, r3
 80050d8:	2300      	movs	r3, #0
 80050da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050e2:	461a      	mov	r2, r3
 80050e4:	2300      	movs	r3, #0
 80050e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050e8:	2300      	movs	r3, #0
 80050ea:	613b      	str	r3, [r7, #16]
 80050ec:	e043      	b.n	8005176 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005100:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005104:	d118      	bne.n	8005138 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10a      	bne.n	8005122 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005118:	461a      	mov	r2, r3
 800511a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800511e:	6013      	str	r3, [r2, #0]
 8005120:	e013      	b.n	800514a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800512e:	461a      	mov	r2, r3
 8005130:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	e008      	b.n	800514a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005144:	461a      	mov	r2, r3
 8005146:	2300      	movs	r3, #0
 8005148:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005156:	461a      	mov	r2, r3
 8005158:	2300      	movs	r3, #0
 800515a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005168:	461a      	mov	r2, r3
 800516a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800516e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	3301      	adds	r3, #1
 8005174:	613b      	str	r3, [r7, #16]
 8005176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	429a      	cmp	r2, r3
 800517c:	d3b7      	bcc.n	80050ee <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800517e:	2300      	movs	r3, #0
 8005180:	613b      	str	r3, [r7, #16]
 8005182:	e043      	b.n	800520c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005196:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800519a:	d118      	bne.n	80051ce <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10a      	bne.n	80051b8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ae:	461a      	mov	r2, r3
 80051b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	e013      	b.n	80051e0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c4:	461a      	mov	r2, r3
 80051c6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80051ca:	6013      	str	r3, [r2, #0]
 80051cc:	e008      	b.n	80051e0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051da:	461a      	mov	r2, r3
 80051dc:	2300      	movs	r3, #0
 80051de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ec:	461a      	mov	r2, r3
 80051ee:	2300      	movs	r3, #0
 80051f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051fe:	461a      	mov	r2, r3
 8005200:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005204:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	3301      	adds	r3, #1
 800520a:	613b      	str	r3, [r7, #16]
 800520c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	429a      	cmp	r2, r3
 8005212:	d3b7      	bcc.n	8005184 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005222:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005226:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005234:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005238:	2b00      	cmp	r3, #0
 800523a:	d105      	bne.n	8005248 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	f043 0210 	orr.w	r2, r3, #16
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	699a      	ldr	r2, [r3, #24]
 800524c:	4b0e      	ldr	r3, [pc, #56]	@ (8005288 <USB_DevInit+0x2b4>)
 800524e:	4313      	orrs	r3, r2
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005256:	2b00      	cmp	r3, #0
 8005258:	d005      	beq.n	8005266 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	f043 0208 	orr.w	r2, r3, #8
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005266:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005268:	2b01      	cmp	r3, #1
 800526a:	d105      	bne.n	8005278 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	699a      	ldr	r2, [r3, #24]
 8005270:	4b06      	ldr	r3, [pc, #24]	@ (800528c <USB_DevInit+0x2b8>)
 8005272:	4313      	orrs	r3, r2
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005278:	7dfb      	ldrb	r3, [r7, #23]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005284:	b004      	add	sp, #16
 8005286:	4770      	bx	lr
 8005288:	803c3800 	.word	0x803c3800
 800528c:	40000004 	.word	0x40000004

08005290 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	3301      	adds	r3, #1
 80052a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4a13      	ldr	r2, [pc, #76]	@ (80052f4 <USB_FlushTxFifo+0x64>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d901      	bls.n	80052b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e01b      	b.n	80052e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	daf2      	bge.n	800529e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	019b      	lsls	r3, r3, #6
 80052c0:	f043 0220 	orr.w	r2, r3, #32
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3301      	adds	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4a08      	ldr	r2, [pc, #32]	@ (80052f4 <USB_FlushTxFifo+0x64>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d901      	bls.n	80052da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e006      	b.n	80052e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0320 	and.w	r3, r3, #32
 80052e2:	2b20      	cmp	r3, #32
 80052e4:	d0f0      	beq.n	80052c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	00030d40 	.word	0x00030d40

080052f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3301      	adds	r3, #1
 8005308:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4a11      	ldr	r2, [pc, #68]	@ (8005354 <USB_FlushRxFifo+0x5c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d901      	bls.n	8005316 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e018      	b.n	8005348 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	daf2      	bge.n	8005304 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2210      	movs	r2, #16
 8005326:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	3301      	adds	r3, #1
 800532c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4a08      	ldr	r2, [pc, #32]	@ (8005354 <USB_FlushRxFifo+0x5c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d901      	bls.n	800533a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e006      	b.n	8005348 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	f003 0310 	and.w	r3, r3, #16
 8005342:	2b10      	cmp	r3, #16
 8005344:	d0f0      	beq.n	8005328 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	00030d40 	.word	0x00030d40

08005358 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	68f9      	ldr	r1, [r7, #12]
 8005374:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005378:	4313      	orrs	r3, r2
 800537a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800538a:	b480      	push	{r7}
 800538c:	b087      	sub	sp, #28
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 0306 	and.w	r3, r3, #6
 80053a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d102      	bne.n	80053b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80053aa:	2300      	movs	r3, #0
 80053ac:	75fb      	strb	r3, [r7, #23]
 80053ae:	e00a      	b.n	80053c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d002      	beq.n	80053bc <USB_GetDevSpeed+0x32>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b06      	cmp	r3, #6
 80053ba:	d102      	bne.n	80053c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80053bc:	2302      	movs	r3, #2
 80053be:	75fb      	strb	r3, [r7, #23]
 80053c0:	e001      	b.n	80053c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80053c2:	230f      	movs	r3, #15
 80053c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80053c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	371c      	adds	r7, #28
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	785b      	ldrb	r3, [r3, #1]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d139      	bne.n	8005464 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053f6:	69da      	ldr	r2, [r3, #28]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	f003 030f 	and.w	r3, r3, #15
 8005400:	2101      	movs	r1, #1
 8005402:	fa01 f303 	lsl.w	r3, r1, r3
 8005406:	b29b      	uxth	r3, r3
 8005408:	68f9      	ldr	r1, [r7, #12]
 800540a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800540e:	4313      	orrs	r3, r2
 8005410:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d153      	bne.n	80054d0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	791b      	ldrb	r3, [r3, #4]
 8005442:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005444:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	059b      	lsls	r3, r3, #22
 800544a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800544c:	431a      	orrs	r2, r3
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	0159      	lsls	r1, r3, #5
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	440b      	add	r3, r1
 8005456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800545a:	4619      	mov	r1, r3
 800545c:	4b20      	ldr	r3, [pc, #128]	@ (80054e0 <USB_ActivateEndpoint+0x10c>)
 800545e:	4313      	orrs	r3, r2
 8005460:	600b      	str	r3, [r1, #0]
 8005462:	e035      	b.n	80054d0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800546a:	69da      	ldr	r2, [r3, #28]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	f003 030f 	and.w	r3, r3, #15
 8005474:	2101      	movs	r1, #1
 8005476:	fa01 f303 	lsl.w	r3, r1, r3
 800547a:	041b      	lsls	r3, r3, #16
 800547c:	68f9      	ldr	r1, [r7, #12]
 800547e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005482:	4313      	orrs	r3, r2
 8005484:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d119      	bne.n	80054d0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	791b      	ldrb	r3, [r3, #4]
 80054b6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054b8:	430b      	orrs	r3, r1
 80054ba:	431a      	orrs	r2, r3
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	0159      	lsls	r1, r3, #5
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	440b      	add	r3, r1
 80054c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054c8:	4619      	mov	r1, r3
 80054ca:	4b05      	ldr	r3, [pc, #20]	@ (80054e0 <USB_ActivateEndpoint+0x10c>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	10008000 	.word	0x10008000

080054e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	785b      	ldrb	r3, [r3, #1]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d161      	bne.n	80055c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005512:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005516:	d11f      	bne.n	8005558 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	0151      	lsls	r1, r2, #5
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	440a      	add	r2, r1
 800552e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005532:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005536:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	0151      	lsls	r1, r2, #5
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	440a      	add	r2, r1
 800554e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005552:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005556:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800555e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	2101      	movs	r1, #1
 800556a:	fa01 f303 	lsl.w	r3, r1, r3
 800556e:	b29b      	uxth	r3, r3
 8005570:	43db      	mvns	r3, r3
 8005572:	68f9      	ldr	r1, [r7, #12]
 8005574:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005578:	4013      	ands	r3, r2
 800557a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005582:	69da      	ldr	r2, [r3, #28]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	f003 030f 	and.w	r3, r3, #15
 800558c:	2101      	movs	r1, #1
 800558e:	fa01 f303 	lsl.w	r3, r1, r3
 8005592:	b29b      	uxth	r3, r3
 8005594:	43db      	mvns	r3, r3
 8005596:	68f9      	ldr	r1, [r7, #12]
 8005598:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800559c:	4013      	ands	r3, r2
 800559e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	0159      	lsls	r1, r3, #5
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	440b      	add	r3, r1
 80055b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055ba:	4619      	mov	r1, r3
 80055bc:	4b35      	ldr	r3, [pc, #212]	@ (8005694 <USB_DeactivateEndpoint+0x1b0>)
 80055be:	4013      	ands	r3, r2
 80055c0:	600b      	str	r3, [r1, #0]
 80055c2:	e060      	b.n	8005686 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055da:	d11f      	bne.n	800561c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	0151      	lsls	r1, r2, #5
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	440a      	add	r2, r1
 80055f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80055fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	0151      	lsls	r1, r2, #5
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	440a      	add	r2, r1
 8005612:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005616:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800561a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005622:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	f003 030f 	and.w	r3, r3, #15
 800562c:	2101      	movs	r1, #1
 800562e:	fa01 f303 	lsl.w	r3, r1, r3
 8005632:	041b      	lsls	r3, r3, #16
 8005634:	43db      	mvns	r3, r3
 8005636:	68f9      	ldr	r1, [r7, #12]
 8005638:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800563c:	4013      	ands	r3, r2
 800563e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005646:	69da      	ldr	r2, [r3, #28]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	f003 030f 	and.w	r3, r3, #15
 8005650:	2101      	movs	r1, #1
 8005652:	fa01 f303 	lsl.w	r3, r1, r3
 8005656:	041b      	lsls	r3, r3, #16
 8005658:	43db      	mvns	r3, r3
 800565a:	68f9      	ldr	r1, [r7, #12]
 800565c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005660:	4013      	ands	r3, r2
 8005662:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	0159      	lsls	r1, r3, #5
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	440b      	add	r3, r1
 800567a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800567e:	4619      	mov	r1, r3
 8005680:	4b05      	ldr	r3, [pc, #20]	@ (8005698 <USB_DeactivateEndpoint+0x1b4>)
 8005682:	4013      	ands	r3, r2
 8005684:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr
 8005694:	ec337800 	.word	0xec337800
 8005698:	eff37800 	.word	0xeff37800

0800569c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b08a      	sub	sp, #40	@ 0x28
 80056a0:	af02      	add	r7, sp, #8
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	4613      	mov	r3, r2
 80056a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	785b      	ldrb	r3, [r3, #1]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	f040 8163 	bne.w	8005984 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d132      	bne.n	800572c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056d2:	691a      	ldr	r2, [r3, #16]
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	0159      	lsls	r1, r3, #5
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	440b      	add	r3, r1
 80056dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056e0:	4619      	mov	r1, r3
 80056e2:	4ba5      	ldr	r3, [pc, #660]	@ (8005978 <USB_EPStartXfer+0x2dc>)
 80056e4:	4013      	ands	r3, r2
 80056e6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	0151      	lsls	r1, r2, #5
 80056fa:	69fa      	ldr	r2, [r7, #28]
 80056fc:	440a      	add	r2, r1
 80056fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005702:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005706:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	0159      	lsls	r1, r3, #5
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	440b      	add	r3, r1
 800571e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005722:	4619      	mov	r1, r3
 8005724:	4b95      	ldr	r3, [pc, #596]	@ (800597c <USB_EPStartXfer+0x2e0>)
 8005726:	4013      	ands	r3, r2
 8005728:	610b      	str	r3, [r1, #16]
 800572a:	e074      	b.n	8005816 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	4413      	add	r3, r2
 8005734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005738:	691a      	ldr	r2, [r3, #16]
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	0159      	lsls	r1, r3, #5
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	440b      	add	r3, r1
 8005742:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005746:	4619      	mov	r1, r3
 8005748:	4b8c      	ldr	r3, [pc, #560]	@ (800597c <USB_EPStartXfer+0x2e0>)
 800574a:	4013      	ands	r3, r2
 800574c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800575a:	691a      	ldr	r2, [r3, #16]
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	0159      	lsls	r1, r3, #5
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	440b      	add	r3, r1
 8005764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005768:	4619      	mov	r1, r3
 800576a:	4b83      	ldr	r3, [pc, #524]	@ (8005978 <USB_EPStartXfer+0x2dc>)
 800576c:	4013      	ands	r3, r2
 800576e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800577c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	6999      	ldr	r1, [r3, #24]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	440b      	add	r3, r1
 8005788:	1e59      	subs	r1, r3, #1
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005792:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005794:	4b7a      	ldr	r3, [pc, #488]	@ (8005980 <USB_EPStartXfer+0x2e4>)
 8005796:	400b      	ands	r3, r1
 8005798:	69b9      	ldr	r1, [r7, #24]
 800579a:	0148      	lsls	r0, r1, #5
 800579c:	69f9      	ldr	r1, [r7, #28]
 800579e:	4401      	add	r1, r0
 80057a0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80057a4:	4313      	orrs	r3, r2
 80057a6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057b4:	691a      	ldr	r2, [r3, #16]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057be:	69b9      	ldr	r1, [r7, #24]
 80057c0:	0148      	lsls	r0, r1, #5
 80057c2:	69f9      	ldr	r1, [r7, #28]
 80057c4:	4401      	add	r1, r0
 80057c6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80057ca:	4313      	orrs	r3, r2
 80057cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	791b      	ldrb	r3, [r3, #4]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d11f      	bne.n	8005816 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	0151      	lsls	r1, r2, #5
 80057e8:	69fa      	ldr	r2, [r7, #28]
 80057ea:	440a      	add	r2, r1
 80057ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057f0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80057f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	0151      	lsls	r1, r2, #5
 8005808:	69fa      	ldr	r2, [r7, #28]
 800580a:	440a      	add	r2, r1
 800580c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005810:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005814:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005816:	79fb      	ldrb	r3, [r7, #7]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d14b      	bne.n	80058b4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d009      	beq.n	8005838 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005830:	461a      	mov	r2, r3
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	791b      	ldrb	r3, [r3, #4]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d128      	bne.n	8005892 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800584c:	2b00      	cmp	r3, #0
 800584e:	d110      	bne.n	8005872 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	0151      	lsls	r1, r2, #5
 8005862:	69fa      	ldr	r2, [r7, #28]
 8005864:	440a      	add	r2, r1
 8005866:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800586a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	e00f      	b.n	8005892 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	4413      	add	r3, r2
 800587a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	0151      	lsls	r1, r2, #5
 8005884:	69fa      	ldr	r2, [r7, #28]
 8005886:	440a      	add	r2, r1
 8005888:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800588c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005890:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	0151      	lsls	r1, r2, #5
 80058a4:	69fa      	ldr	r2, [r7, #28]
 80058a6:	440a      	add	r2, r1
 80058a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058ac:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80058b0:	6013      	str	r3, [r2, #0]
 80058b2:	e137      	b.n	8005b24 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	0151      	lsls	r1, r2, #5
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	440a      	add	r2, r1
 80058ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058ce:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80058d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	791b      	ldrb	r3, [r3, #4]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d015      	beq.n	8005908 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 811f 	beq.w	8005b24 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	2101      	movs	r1, #1
 80058f8:	fa01 f303 	lsl.w	r3, r1, r3
 80058fc:	69f9      	ldr	r1, [r7, #28]
 80058fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005902:	4313      	orrs	r3, r2
 8005904:	634b      	str	r3, [r1, #52]	@ 0x34
 8005906:	e10d      	b.n	8005b24 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005914:	2b00      	cmp	r3, #0
 8005916:	d110      	bne.n	800593a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	0151      	lsls	r1, r2, #5
 800592a:	69fa      	ldr	r2, [r7, #28]
 800592c:	440a      	add	r2, r1
 800592e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005932:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	e00f      	b.n	800595a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	0151      	lsls	r1, r2, #5
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	440a      	add	r2, r1
 8005950:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005958:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	6919      	ldr	r1, [r3, #16]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	781a      	ldrb	r2, [r3, #0]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	b298      	uxth	r0, r3
 8005968:	79fb      	ldrb	r3, [r7, #7]
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	4603      	mov	r3, r0
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 faea 	bl	8005f48 <USB_WritePacket>
 8005974:	e0d6      	b.n	8005b24 <USB_EPStartXfer+0x488>
 8005976:	bf00      	nop
 8005978:	e007ffff 	.word	0xe007ffff
 800597c:	fff80000 	.word	0xfff80000
 8005980:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005990:	691a      	ldr	r2, [r3, #16]
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	0159      	lsls	r1, r3, #5
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	440b      	add	r3, r1
 800599a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800599e:	4619      	mov	r1, r3
 80059a0:	4b63      	ldr	r3, [pc, #396]	@ (8005b30 <USB_EPStartXfer+0x494>)
 80059a2:	4013      	ands	r3, r2
 80059a4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059b2:	691a      	ldr	r2, [r3, #16]
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	0159      	lsls	r1, r3, #5
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	440b      	add	r3, r1
 80059bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059c0:	4619      	mov	r1, r3
 80059c2:	4b5c      	ldr	r3, [pc, #368]	@ (8005b34 <USB_EPStartXfer+0x498>)
 80059c4:	4013      	ands	r3, r2
 80059c6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d123      	bne.n	8005a18 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059dc:	691a      	ldr	r2, [r3, #16]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059e6:	69b9      	ldr	r1, [r7, #24]
 80059e8:	0148      	lsls	r0, r1, #5
 80059ea:	69f9      	ldr	r1, [r7, #28]
 80059ec:	4401      	add	r1, r0
 80059ee:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80059f2:	4313      	orrs	r3, r2
 80059f4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a14:	6113      	str	r3, [r2, #16]
 8005a16:	e037      	b.n	8005a88 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	699a      	ldr	r2, [r3, #24]
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	4413      	add	r3, r2
 8005a22:	1e5a      	subs	r2, r3, #1
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	8afa      	ldrh	r2, [r7, #22]
 8005a34:	fb03 f202 	mul.w	r2, r3, r2
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a48:	691a      	ldr	r2, [r3, #16]
 8005a4a:	8afb      	ldrh	r3, [r7, #22]
 8005a4c:	04d9      	lsls	r1, r3, #19
 8005a4e:	4b3a      	ldr	r3, [pc, #232]	@ (8005b38 <USB_EPStartXfer+0x49c>)
 8005a50:	400b      	ands	r3, r1
 8005a52:	69b9      	ldr	r1, [r7, #24]
 8005a54:	0148      	lsls	r0, r1, #5
 8005a56:	69f9      	ldr	r1, [r7, #28]
 8005a58:	4401      	add	r1, r0
 8005a5a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a6e:	691a      	ldr	r2, [r3, #16]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	69db      	ldr	r3, [r3, #28]
 8005a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a78:	69b9      	ldr	r1, [r7, #24]
 8005a7a:	0148      	lsls	r0, r1, #5
 8005a7c:	69f9      	ldr	r1, [r7, #28]
 8005a7e:	4401      	add	r1, r0
 8005a80:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005a84:	4313      	orrs	r3, r2
 8005a86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a88:	79fb      	ldrb	r3, [r7, #7]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d10d      	bne.n	8005aaa <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d009      	beq.n	8005aaa <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	6919      	ldr	r1, [r3, #16]
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aa6:	460a      	mov	r2, r1
 8005aa8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	791b      	ldrb	r3, [r3, #4]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d128      	bne.n	8005b04 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d110      	bne.n	8005ae4 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	0151      	lsls	r1, r2, #5
 8005ad4:	69fa      	ldr	r2, [r7, #28]
 8005ad6:	440a      	add	r2, r1
 8005ad8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005adc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ae0:	6013      	str	r3, [r2, #0]
 8005ae2:	e00f      	b.n	8005b04 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	0151      	lsls	r1, r2, #5
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	440a      	add	r2, r1
 8005afa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005afe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	0151      	lsls	r1, r2, #5
 8005b16:	69fa      	ldr	r2, [r7, #28]
 8005b18:	440a      	add	r2, r1
 8005b1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b1e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005b22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3720      	adds	r7, #32
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	fff80000 	.word	0xfff80000
 8005b34:	e007ffff 	.word	0xe007ffff
 8005b38:	1ff80000 	.word	0x1ff80000

08005b3c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	4613      	mov	r3, r2
 8005b48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	785b      	ldrb	r3, [r3, #1]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	f040 80ce 	bne.w	8005cfa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d132      	bne.n	8005bcc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b72:	691a      	ldr	r2, [r3, #16]
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	0159      	lsls	r1, r3, #5
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	440b      	add	r3, r1
 8005b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b80:	4619      	mov	r1, r3
 8005b82:	4b9a      	ldr	r3, [pc, #616]	@ (8005dec <USB_EP0StartXfer+0x2b0>)
 8005b84:	4013      	ands	r3, r2
 8005b86:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	0151      	lsls	r1, r2, #5
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	440a      	add	r2, r1
 8005b9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ba2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ba6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bb4:	691a      	ldr	r2, [r3, #16]
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	0159      	lsls	r1, r3, #5
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	440b      	add	r3, r1
 8005bbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	4b8a      	ldr	r3, [pc, #552]	@ (8005df0 <USB_EP0StartXfer+0x2b4>)
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	610b      	str	r3, [r1, #16]
 8005bca:	e04e      	b.n	8005c6a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bd8:	691a      	ldr	r2, [r3, #16]
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	0159      	lsls	r1, r3, #5
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	440b      	add	r3, r1
 8005be2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be6:	4619      	mov	r1, r3
 8005be8:	4b81      	ldr	r3, [pc, #516]	@ (8005df0 <USB_EP0StartXfer+0x2b4>)
 8005bea:	4013      	ands	r3, r2
 8005bec:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bfa:	691a      	ldr	r2, [r3, #16]
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	0159      	lsls	r1, r3, #5
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	440b      	add	r3, r1
 8005c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4b78      	ldr	r3, [pc, #480]	@ (8005dec <USB_EP0StartXfer+0x2b0>)
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	699a      	ldr	r2, [r3, #24]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d903      	bls.n	8005c24 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	68da      	ldr	r2, [r3, #12]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	0151      	lsls	r1, r2, #5
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	440a      	add	r2, r1
 8005c3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c3e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c50:	691a      	ldr	r2, [r3, #16]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c5a:	6939      	ldr	r1, [r7, #16]
 8005c5c:	0148      	lsls	r0, r1, #5
 8005c5e:	6979      	ldr	r1, [r7, #20]
 8005c60:	4401      	add	r1, r0
 8005c62:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005c66:	4313      	orrs	r3, r2
 8005c68:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d11e      	bne.n	8005cae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d009      	beq.n	8005c8c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c84:	461a      	mov	r2, r3
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	0151      	lsls	r1, r2, #5
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	440a      	add	r2, r1
 8005ca2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ca6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005caa:	6013      	str	r3, [r2, #0]
 8005cac:	e097      	b.n	8005dde <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	0151      	lsls	r1, r2, #5
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	440a      	add	r2, r1
 8005cc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cc8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005ccc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 8083 	beq.w	8005dde <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	f003 030f 	and.w	r3, r3, #15
 8005ce8:	2101      	movs	r1, #1
 8005cea:	fa01 f303 	lsl.w	r3, r1, r3
 8005cee:	6979      	ldr	r1, [r7, #20]
 8005cf0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	634b      	str	r3, [r1, #52]	@ 0x34
 8005cf8:	e071      	b.n	8005dde <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d06:	691a      	ldr	r2, [r3, #16]
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	0159      	lsls	r1, r3, #5
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	440b      	add	r3, r1
 8005d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d14:	4619      	mov	r1, r3
 8005d16:	4b36      	ldr	r3, [pc, #216]	@ (8005df0 <USB_EP0StartXfer+0x2b4>)
 8005d18:	4013      	ands	r3, r2
 8005d1a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d28:	691a      	ldr	r2, [r3, #16]
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	0159      	lsls	r1, r3, #5
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	440b      	add	r3, r1
 8005d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d36:	4619      	mov	r1, r3
 8005d38:	4b2c      	ldr	r3, [pc, #176]	@ (8005dec <USB_EP0StartXfer+0x2b0>)
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	0151      	lsls	r1, r2, #5
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	440a      	add	r2, r1
 8005d6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d82:	691a      	ldr	r2, [r3, #16]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	69db      	ldr	r3, [r3, #28]
 8005d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d8c:	6939      	ldr	r1, [r7, #16]
 8005d8e:	0148      	lsls	r0, r1, #5
 8005d90:	6979      	ldr	r1, [r7, #20]
 8005d92:	4401      	add	r1, r0
 8005d94:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005d9c:	79fb      	ldrb	r3, [r7, #7]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d10d      	bne.n	8005dbe <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d009      	beq.n	8005dbe <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	6919      	ldr	r1, [r3, #16]
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dba:	460a      	mov	r2, r1
 8005dbc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	0151      	lsls	r1, r2, #5
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	440a      	add	r2, r1
 8005dd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dd8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005ddc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	e007ffff 	.word	0xe007ffff
 8005df0:	fff80000 	.word	0xfff80000

08005df4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	785b      	ldrb	r3, [r3, #1]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d14a      	bne.n	8005ea8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e2a:	f040 8086 	bne.w	8005f3a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	7812      	ldrb	r2, [r2, #0]
 8005e42:	0151      	lsls	r1, r2, #5
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	440a      	add	r2, r1
 8005e48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e50:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	7812      	ldrb	r2, [r2, #0]
 8005e66:	0151      	lsls	r1, r2, #5
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	440a      	add	r2, r1
 8005e6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d902      	bls.n	8005e8c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	75fb      	strb	r3, [r7, #23]
          break;
 8005e8a:	e056      	b.n	8005f3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ea0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ea4:	d0e7      	beq.n	8005e76 <USB_EPStopXfer+0x82>
 8005ea6:	e048      	b.n	8005f3a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ec0:	d13b      	bne.n	8005f3a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	7812      	ldrb	r2, [r2, #0]
 8005ed6:	0151      	lsls	r1, r2, #5
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	440a      	add	r2, r1
 8005edc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ee0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ee4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	7812      	ldrb	r2, [r2, #0]
 8005efa:	0151      	lsls	r1, r2, #5
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	440a      	add	r2, r1
 8005f00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d902      	bls.n	8005f20 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	75fb      	strb	r3, [r7, #23]
          break;
 8005f1e:	e00c      	b.n	8005f3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f38:	d0e7      	beq.n	8005f0a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	371c      	adds	r7, #28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b089      	sub	sp, #36	@ 0x24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	4611      	mov	r1, r2
 8005f54:	461a      	mov	r2, r3
 8005f56:	460b      	mov	r3, r1
 8005f58:	71fb      	strb	r3, [r7, #7]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005f66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d123      	bne.n	8005fb6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f6e:	88bb      	ldrh	r3, [r7, #4]
 8005f70:	3303      	adds	r3, #3
 8005f72:	089b      	lsrs	r3, r3, #2
 8005f74:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f76:	2300      	movs	r3, #0
 8005f78:	61bb      	str	r3, [r7, #24]
 8005f7a:	e018      	b.n	8005fae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f7c:	79fb      	ldrb	r3, [r7, #7]
 8005f7e:	031a      	lsls	r2, r3, #12
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f88:	461a      	mov	r2, r3
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	3301      	adds	r3, #1
 8005f94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	3301      	adds	r3, #1
 8005fac:	61bb      	str	r3, [r7, #24]
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d3e2      	bcc.n	8005f7c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3724      	adds	r7, #36	@ 0x24
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b08b      	sub	sp, #44	@ 0x2c
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005fda:	88fb      	ldrh	r3, [r7, #6]
 8005fdc:	089b      	lsrs	r3, r3, #2
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005fe2:	88fb      	ldrh	r3, [r7, #6]
 8005fe4:	f003 0303 	and.w	r3, r3, #3
 8005fe8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005fea:	2300      	movs	r3, #0
 8005fec:	623b      	str	r3, [r7, #32]
 8005fee:	e014      	b.n	800601a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffa:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffe:	3301      	adds	r3, #1
 8006000:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006004:	3301      	adds	r3, #1
 8006006:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600a:	3301      	adds	r3, #1
 800600c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800600e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006010:	3301      	adds	r3, #1
 8006012:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	3301      	adds	r3, #1
 8006018:	623b      	str	r3, [r7, #32]
 800601a:	6a3a      	ldr	r2, [r7, #32]
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	429a      	cmp	r2, r3
 8006020:	d3e6      	bcc.n	8005ff0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006022:	8bfb      	ldrh	r3, [r7, #30]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d01e      	beq.n	8006066 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006028:	2300      	movs	r3, #0
 800602a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006032:	461a      	mov	r2, r3
 8006034:	f107 0310 	add.w	r3, r7, #16
 8006038:	6812      	ldr	r2, [r2, #0]
 800603a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	b2db      	uxtb	r3, r3
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	fa22 f303 	lsr.w	r3, r2, r3
 8006048:	b2da      	uxtb	r2, r3
 800604a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604c:	701a      	strb	r2, [r3, #0]
      i++;
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	3301      	adds	r3, #1
 8006052:	623b      	str	r3, [r7, #32]
      pDest++;
 8006054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006056:	3301      	adds	r3, #1
 8006058:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800605a:	8bfb      	ldrh	r3, [r7, #30]
 800605c:	3b01      	subs	r3, #1
 800605e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006060:	8bfb      	ldrh	r3, [r7, #30]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1ea      	bne.n	800603c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006068:	4618      	mov	r0, r3
 800606a:	372c      	adds	r7, #44	@ 0x2c
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	785b      	ldrb	r3, [r3, #1]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d12c      	bne.n	80060ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	db12      	blt.n	80060c8 <USB_EPSetStall+0x54>
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00f      	beq.n	80060c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	015a      	lsls	r2, r3, #5
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4413      	add	r3, r2
 80060b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	0151      	lsls	r1, r2, #5
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	440a      	add	r2, r1
 80060be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80060c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	0151      	lsls	r1, r2, #5
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	440a      	add	r2, r1
 80060de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80060e6:	6013      	str	r3, [r2, #0]
 80060e8:	e02b      	b.n	8006142 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	db12      	blt.n	8006122 <USB_EPSetStall+0xae>
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00f      	beq.n	8006122 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4413      	add	r3, r2
 800610a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	0151      	lsls	r1, r2, #5
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	440a      	add	r2, r1
 8006118:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800611c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006120:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4413      	add	r3, r2
 800612a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	0151      	lsls	r1, r2, #5
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	440a      	add	r2, r1
 8006138:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800613c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006140:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	785b      	ldrb	r3, [r3, #1]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d128      	bne.n	80061be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	0151      	lsls	r1, r2, #5
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	440a      	add	r2, r1
 8006182:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006186:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800618a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	791b      	ldrb	r3, [r3, #4]
 8006190:	2b03      	cmp	r3, #3
 8006192:	d003      	beq.n	800619c <USB_EPClearStall+0x4c>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	791b      	ldrb	r3, [r3, #4]
 8006198:	2b02      	cmp	r3, #2
 800619a:	d138      	bne.n	800620e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	0151      	lsls	r1, r2, #5
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	440a      	add	r2, r1
 80061b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061ba:	6013      	str	r3, [r2, #0]
 80061bc:	e027      	b.n	800620e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	0151      	lsls	r1, r2, #5
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	440a      	add	r2, r1
 80061d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80061dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	791b      	ldrb	r3, [r3, #4]
 80061e2:	2b03      	cmp	r3, #3
 80061e4:	d003      	beq.n	80061ee <USB_EPClearStall+0x9e>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	791b      	ldrb	r3, [r3, #4]
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d10f      	bne.n	800620e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	0151      	lsls	r1, r2, #5
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	440a      	add	r2, r1
 8006204:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006208:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800620c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	460b      	mov	r3, r1
 8006226:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800623a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800623e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	78fb      	ldrb	r3, [r7, #3]
 800624a:	011b      	lsls	r3, r3, #4
 800624c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006250:	68f9      	ldr	r1, [r7, #12]
 8006252:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006256:	4313      	orrs	r3, r2
 8006258:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006282:	f023 0303 	bic.w	r3, r3, #3
 8006286:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006296:	f023 0302 	bic.w	r3, r3, #2
 800629a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b085      	sub	sp, #20
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80062c4:	f023 0303 	bic.w	r3, r3, #3
 80062c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062d8:	f043 0302 	orr.w	r3, r3, #2
 80062dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	4013      	ands	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006304:	68fb      	ldr	r3, [r7, #12]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006312:	b480      	push	{r7}
 8006314:	b085      	sub	sp, #20
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	4013      	ands	r3, r2
 8006334:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	0c1b      	lsrs	r3, r3, #16
}
 800633a:	4618      	mov	r0, r3
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006346:	b480      	push	{r7}
 8006348:	b085      	sub	sp, #20
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	4013      	ands	r3, r2
 8006368:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	b29b      	uxth	r3, r3
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800637a:	b480      	push	{r7}
 800637c:	b085      	sub	sp, #20
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	460b      	mov	r3, r1
 8006384:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800638a:	78fb      	ldrb	r3, [r7, #3]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	4013      	ands	r3, r2
 80063a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063a8:	68bb      	ldr	r3, [r7, #8]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b087      	sub	sp, #28
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	460b      	mov	r3, r1
 80063c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80063da:	78fb      	ldrb	r3, [r7, #3]
 80063dc:	f003 030f 	and.w	r3, r3, #15
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	fa22 f303 	lsr.w	r3, r2, r3
 80063e6:	01db      	lsls	r3, r3, #7
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80063f0:	78fb      	ldrb	r3, [r7, #3]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	4013      	ands	r3, r2
 8006402:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006404:	68bb      	ldr	r3, [r7, #8]
}
 8006406:	4618      	mov	r0, r3
 8006408:	371c      	adds	r7, #28
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	f003 0301 	and.w	r3, r3, #1
}
 8006422:	4618      	mov	r0, r3
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
	...

08006430 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800644a:	4619      	mov	r1, r3
 800644c:	4b09      	ldr	r3, [pc, #36]	@ (8006474 <USB_ActivateSetup+0x44>)
 800644e:	4013      	ands	r3, r2
 8006450:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006464:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	fffff800 	.word	0xfffff800

08006478 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	460b      	mov	r3, r1
 8006482:	607a      	str	r2, [r7, #4]
 8006484:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	333c      	adds	r3, #60	@ 0x3c
 800648e:	3304      	adds	r3, #4
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	4a26      	ldr	r2, [pc, #152]	@ (8006530 <USB_EP0_OutStart+0xb8>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d90a      	bls.n	80064b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064ac:	d101      	bne.n	80064b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80064ae:	2300      	movs	r3, #0
 80064b0:	e037      	b.n	8006522 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064b8:	461a      	mov	r2, r3
 80064ba:	2300      	movs	r3, #0
 80064bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80064d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064e0:	f043 0318 	orr.w	r3, r3, #24
 80064e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064f4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80064f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80064fa:	7afb      	ldrb	r3, [r7, #11]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d10f      	bne.n	8006520 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006506:	461a      	mov	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800651a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800651e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	371c      	adds	r7, #28
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	4f54300a 	.word	0x4f54300a

08006534 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800653c:	2300      	movs	r3, #0
 800653e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	3301      	adds	r3, #1
 8006544:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4a13      	ldr	r2, [pc, #76]	@ (8006598 <USB_CoreReset+0x64>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d901      	bls.n	8006552 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e01b      	b.n	800658a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	daf2      	bge.n	8006540 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800655a:	2300      	movs	r3, #0
 800655c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f043 0201 	orr.w	r2, r3, #1
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	3301      	adds	r3, #1
 800656e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4a09      	ldr	r2, [pc, #36]	@ (8006598 <USB_CoreReset+0x64>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d901      	bls.n	800657c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e006      	b.n	800658a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	2b01      	cmp	r3, #1
 8006586:	d0f0      	beq.n	800656a <USB_CoreReset+0x36>

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	00030d40 	.word	0x00030d40

0800659c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	460b      	mov	r3, r1
 80065a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80065a8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80065ac:	f005 fbac 	bl	800bd08 <malloc>
 80065b0:	4603      	mov	r3, r0
 80065b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d109      	bne.n	80065ce <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	32b0      	adds	r2, #176	@ 0xb0
 80065c4:	2100      	movs	r1, #0
 80065c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80065ca:	2302      	movs	r3, #2
 80065cc:	e0d4      	b.n	8006778 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80065ce:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80065d2:	2100      	movs	r1, #0
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f005 fe5f 	bl	800c298 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	32b0      	adds	r2, #176	@ 0xb0
 80065e4:	68f9      	ldr	r1, [r7, #12]
 80065e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	32b0      	adds	r2, #176	@ 0xb0
 80065f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	7c1b      	ldrb	r3, [r3, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d138      	bne.n	8006678 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006606:	4b5e      	ldr	r3, [pc, #376]	@ (8006780 <USBD_CDC_Init+0x1e4>)
 8006608:	7819      	ldrb	r1, [r3, #0]
 800660a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800660e:	2202      	movs	r2, #2
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f005 f9d6 	bl	800b9c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006616:	4b5a      	ldr	r3, [pc, #360]	@ (8006780 <USBD_CDC_Init+0x1e4>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	f003 020f 	and.w	r2, r3, #15
 800661e:	6879      	ldr	r1, [r7, #4]
 8006620:	4613      	mov	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	440b      	add	r3, r1
 800662a:	3324      	adds	r3, #36	@ 0x24
 800662c:	2201      	movs	r2, #1
 800662e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006630:	4b54      	ldr	r3, [pc, #336]	@ (8006784 <USBD_CDC_Init+0x1e8>)
 8006632:	7819      	ldrb	r1, [r3, #0]
 8006634:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006638:	2202      	movs	r2, #2
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f005 f9c1 	bl	800b9c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006640:	4b50      	ldr	r3, [pc, #320]	@ (8006784 <USBD_CDC_Init+0x1e8>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	f003 020f 	and.w	r2, r3, #15
 8006648:	6879      	ldr	r1, [r7, #4]
 800664a:	4613      	mov	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	440b      	add	r3, r1
 8006654:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006658:	2201      	movs	r2, #1
 800665a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800665c:	4b4a      	ldr	r3, [pc, #296]	@ (8006788 <USBD_CDC_Init+0x1ec>)
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	f003 020f 	and.w	r2, r3, #15
 8006664:	6879      	ldr	r1, [r7, #4]
 8006666:	4613      	mov	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4413      	add	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	440b      	add	r3, r1
 8006670:	3326      	adds	r3, #38	@ 0x26
 8006672:	2210      	movs	r2, #16
 8006674:	801a      	strh	r2, [r3, #0]
 8006676:	e035      	b.n	80066e4 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006678:	4b41      	ldr	r3, [pc, #260]	@ (8006780 <USBD_CDC_Init+0x1e4>)
 800667a:	7819      	ldrb	r1, [r3, #0]
 800667c:	2340      	movs	r3, #64	@ 0x40
 800667e:	2202      	movs	r2, #2
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f005 f99e 	bl	800b9c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006686:	4b3e      	ldr	r3, [pc, #248]	@ (8006780 <USBD_CDC_Init+0x1e4>)
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	f003 020f 	and.w	r2, r3, #15
 800668e:	6879      	ldr	r1, [r7, #4]
 8006690:	4613      	mov	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	440b      	add	r3, r1
 800669a:	3324      	adds	r3, #36	@ 0x24
 800669c:	2201      	movs	r2, #1
 800669e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80066a0:	4b38      	ldr	r3, [pc, #224]	@ (8006784 <USBD_CDC_Init+0x1e8>)
 80066a2:	7819      	ldrb	r1, [r3, #0]
 80066a4:	2340      	movs	r3, #64	@ 0x40
 80066a6:	2202      	movs	r2, #2
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f005 f98a 	bl	800b9c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80066ae:	4b35      	ldr	r3, [pc, #212]	@ (8006784 <USBD_CDC_Init+0x1e8>)
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	f003 020f 	and.w	r2, r3, #15
 80066b6:	6879      	ldr	r1, [r7, #4]
 80066b8:	4613      	mov	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	440b      	add	r3, r1
 80066c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80066c6:	2201      	movs	r2, #1
 80066c8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80066ca:	4b2f      	ldr	r3, [pc, #188]	@ (8006788 <USBD_CDC_Init+0x1ec>)
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	f003 020f 	and.w	r2, r3, #15
 80066d2:	6879      	ldr	r1, [r7, #4]
 80066d4:	4613      	mov	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	440b      	add	r3, r1
 80066de:	3326      	adds	r3, #38	@ 0x26
 80066e0:	2210      	movs	r2, #16
 80066e2:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80066e4:	4b28      	ldr	r3, [pc, #160]	@ (8006788 <USBD_CDC_Init+0x1ec>)
 80066e6:	7819      	ldrb	r1, [r3, #0]
 80066e8:	2308      	movs	r3, #8
 80066ea:	2203      	movs	r2, #3
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f005 f968 	bl	800b9c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80066f2:	4b25      	ldr	r3, [pc, #148]	@ (8006788 <USBD_CDC_Init+0x1ec>)
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	f003 020f 	and.w	r2, r3, #15
 80066fa:	6879      	ldr	r1, [r7, #4]
 80066fc:	4613      	mov	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	440b      	add	r3, r1
 8006706:	3324      	adds	r3, #36	@ 0x24
 8006708:	2201      	movs	r2, #1
 800670a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	33b0      	adds	r3, #176	@ 0xb0
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8006742:	2302      	movs	r3, #2
 8006744:	e018      	b.n	8006778 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	7c1b      	ldrb	r3, [r3, #16]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10a      	bne.n	8006764 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800674e:	4b0d      	ldr	r3, [pc, #52]	@ (8006784 <USBD_CDC_Init+0x1e8>)
 8006750:	7819      	ldrb	r1, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006758:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f005 fa1f 	bl	800bba0 <USBD_LL_PrepareReceive>
 8006762:	e008      	b.n	8006776 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006764:	4b07      	ldr	r3, [pc, #28]	@ (8006784 <USBD_CDC_Init+0x1e8>)
 8006766:	7819      	ldrb	r1, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800676e:	2340      	movs	r3, #64	@ 0x40
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f005 fa15 	bl	800bba0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	20000093 	.word	0x20000093
 8006784:	20000094 	.word	0x20000094
 8006788:	20000095 	.word	0x20000095

0800678c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	460b      	mov	r3, r1
 8006796:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006798:	4b3a      	ldr	r3, [pc, #232]	@ (8006884 <USBD_CDC_DeInit+0xf8>)
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	4619      	mov	r1, r3
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f005 f935 	bl	800ba0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80067a4:	4b37      	ldr	r3, [pc, #220]	@ (8006884 <USBD_CDC_DeInit+0xf8>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	f003 020f 	and.w	r2, r3, #15
 80067ac:	6879      	ldr	r1, [r7, #4]
 80067ae:	4613      	mov	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	440b      	add	r3, r1
 80067b8:	3324      	adds	r3, #36	@ 0x24
 80067ba:	2200      	movs	r2, #0
 80067bc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80067be:	4b32      	ldr	r3, [pc, #200]	@ (8006888 <USBD_CDC_DeInit+0xfc>)
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	4619      	mov	r1, r3
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f005 f922 	bl	800ba0e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80067ca:	4b2f      	ldr	r3, [pc, #188]	@ (8006888 <USBD_CDC_DeInit+0xfc>)
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	f003 020f 	and.w	r2, r3, #15
 80067d2:	6879      	ldr	r1, [r7, #4]
 80067d4:	4613      	mov	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	440b      	add	r3, r1
 80067de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80067e2:	2200      	movs	r2, #0
 80067e4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80067e6:	4b29      	ldr	r3, [pc, #164]	@ (800688c <USBD_CDC_DeInit+0x100>)
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	4619      	mov	r1, r3
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f005 f90e 	bl	800ba0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80067f2:	4b26      	ldr	r3, [pc, #152]	@ (800688c <USBD_CDC_DeInit+0x100>)
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	f003 020f 	and.w	r2, r3, #15
 80067fa:	6879      	ldr	r1, [r7, #4]
 80067fc:	4613      	mov	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	440b      	add	r3, r1
 8006806:	3324      	adds	r3, #36	@ 0x24
 8006808:	2200      	movs	r2, #0
 800680a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800680c:	4b1f      	ldr	r3, [pc, #124]	@ (800688c <USBD_CDC_DeInit+0x100>)
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	f003 020f 	and.w	r2, r3, #15
 8006814:	6879      	ldr	r1, [r7, #4]
 8006816:	4613      	mov	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	440b      	add	r3, r1
 8006820:	3326      	adds	r3, #38	@ 0x26
 8006822:	2200      	movs	r2, #0
 8006824:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	32b0      	adds	r2, #176	@ 0xb0
 8006830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d01f      	beq.n	8006878 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	33b0      	adds	r3, #176	@ 0xb0
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	32b0      	adds	r2, #176	@ 0xb0
 8006856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800685a:	4618      	mov	r0, r3
 800685c:	f005 fa5c 	bl	800bd18 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	32b0      	adds	r2, #176	@ 0xb0
 800686a:	2100      	movs	r1, #0
 800686c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	20000093 	.word	0x20000093
 8006888:	20000094 	.word	0x20000094
 800688c:	20000095 	.word	0x20000095

08006890 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	32b0      	adds	r2, #176	@ 0xb0
 80068a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80068bc:	2303      	movs	r3, #3
 80068be:	e0bf      	b.n	8006a40 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d050      	beq.n	800696e <USBD_CDC_Setup+0xde>
 80068cc:	2b20      	cmp	r3, #32
 80068ce:	f040 80af 	bne.w	8006a30 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	88db      	ldrh	r3, [r3, #6]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d03a      	beq.n	8006950 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	b25b      	sxtb	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	da1b      	bge.n	800691c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	33b0      	adds	r3, #176	@ 0xb0
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80068fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068fc:	683a      	ldr	r2, [r7, #0]
 80068fe:	88d2      	ldrh	r2, [r2, #6]
 8006900:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	88db      	ldrh	r3, [r3, #6]
 8006906:	2b07      	cmp	r3, #7
 8006908:	bf28      	it	cs
 800690a:	2307      	movcs	r3, #7
 800690c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	89fa      	ldrh	r2, [r7, #14]
 8006912:	4619      	mov	r1, r3
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f001 fdab 	bl	8008470 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800691a:	e090      	b.n	8006a3e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	785a      	ldrb	r2, [r3, #1]
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	88db      	ldrh	r3, [r3, #6]
 800692a:	2b3f      	cmp	r3, #63	@ 0x3f
 800692c:	d803      	bhi.n	8006936 <USBD_CDC_Setup+0xa6>
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	88db      	ldrh	r3, [r3, #6]
 8006932:	b2da      	uxtb	r2, r3
 8006934:	e000      	b.n	8006938 <USBD_CDC_Setup+0xa8>
 8006936:	2240      	movs	r2, #64	@ 0x40
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800693e:	6939      	ldr	r1, [r7, #16]
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006946:	461a      	mov	r2, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f001 fdbd 	bl	80084c8 <USBD_CtlPrepareRx>
      break;
 800694e:	e076      	b.n	8006a3e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	33b0      	adds	r3, #176	@ 0xb0
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	7850      	ldrb	r0, [r2, #1]
 8006966:	2200      	movs	r2, #0
 8006968:	6839      	ldr	r1, [r7, #0]
 800696a:	4798      	blx	r3
      break;
 800696c:	e067      	b.n	8006a3e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	785b      	ldrb	r3, [r3, #1]
 8006972:	2b0b      	cmp	r3, #11
 8006974:	d851      	bhi.n	8006a1a <USBD_CDC_Setup+0x18a>
 8006976:	a201      	add	r2, pc, #4	@ (adr r2, 800697c <USBD_CDC_Setup+0xec>)
 8006978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697c:	080069ad 	.word	0x080069ad
 8006980:	08006a29 	.word	0x08006a29
 8006984:	08006a1b 	.word	0x08006a1b
 8006988:	08006a1b 	.word	0x08006a1b
 800698c:	08006a1b 	.word	0x08006a1b
 8006990:	08006a1b 	.word	0x08006a1b
 8006994:	08006a1b 	.word	0x08006a1b
 8006998:	08006a1b 	.word	0x08006a1b
 800699c:	08006a1b 	.word	0x08006a1b
 80069a0:	08006a1b 	.word	0x08006a1b
 80069a4:	080069d7 	.word	0x080069d7
 80069a8:	08006a01 	.word	0x08006a01
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b03      	cmp	r3, #3
 80069b6:	d107      	bne.n	80069c8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80069b8:	f107 030a 	add.w	r3, r7, #10
 80069bc:	2202      	movs	r2, #2
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f001 fd55 	bl	8008470 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069c6:	e032      	b.n	8006a2e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80069c8:	6839      	ldr	r1, [r7, #0]
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f001 fcdf 	bl	800838e <USBD_CtlError>
            ret = USBD_FAIL;
 80069d0:	2303      	movs	r3, #3
 80069d2:	75fb      	strb	r3, [r7, #23]
          break;
 80069d4:	e02b      	b.n	8006a2e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d107      	bne.n	80069f2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80069e2:	f107 030d 	add.w	r3, r7, #13
 80069e6:	2201      	movs	r2, #1
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f001 fd40 	bl	8008470 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069f0:	e01d      	b.n	8006a2e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80069f2:	6839      	ldr	r1, [r7, #0]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f001 fcca 	bl	800838e <USBD_CtlError>
            ret = USBD_FAIL;
 80069fa:	2303      	movs	r3, #3
 80069fc:	75fb      	strb	r3, [r7, #23]
          break;
 80069fe:	e016      	b.n	8006a2e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b03      	cmp	r3, #3
 8006a0a:	d00f      	beq.n	8006a2c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f001 fcbd 	bl	800838e <USBD_CtlError>
            ret = USBD_FAIL;
 8006a14:	2303      	movs	r3, #3
 8006a16:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a18:	e008      	b.n	8006a2c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f001 fcb6 	bl	800838e <USBD_CtlError>
          ret = USBD_FAIL;
 8006a22:	2303      	movs	r3, #3
 8006a24:	75fb      	strb	r3, [r7, #23]
          break;
 8006a26:	e002      	b.n	8006a2e <USBD_CDC_Setup+0x19e>
          break;
 8006a28:	bf00      	nop
 8006a2a:	e008      	b.n	8006a3e <USBD_CDC_Setup+0x1ae>
          break;
 8006a2c:	bf00      	nop
      }
      break;
 8006a2e:	e006      	b.n	8006a3e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f001 fcab 	bl	800838e <USBD_CtlError>
      ret = USBD_FAIL;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a3c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3718      	adds	r7, #24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006a5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	32b0      	adds	r2, #176	@ 0xb0
 8006a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e065      	b.n	8006b3e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	32b0      	adds	r2, #176	@ 0xb0
 8006a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a80:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a82:	78fb      	ldrb	r3, [r7, #3]
 8006a84:	f003 020f 	and.w	r2, r3, #15
 8006a88:	6879      	ldr	r1, [r7, #4]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	440b      	add	r3, r1
 8006a94:	3318      	adds	r3, #24
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d02f      	beq.n	8006afc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006a9c:	78fb      	ldrb	r3, [r7, #3]
 8006a9e:	f003 020f 	and.w	r2, r3, #15
 8006aa2:	6879      	ldr	r1, [r7, #4]
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	440b      	add	r3, r1
 8006aae:	3318      	adds	r3, #24
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	78fb      	ldrb	r3, [r7, #3]
 8006ab4:	f003 010f 	and.w	r1, r3, #15
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	460b      	mov	r3, r1
 8006abc:	00db      	lsls	r3, r3, #3
 8006abe:	440b      	add	r3, r1
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4403      	add	r3, r0
 8006ac4:	3348      	adds	r3, #72	@ 0x48
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	fbb2 f1f3 	udiv	r1, r2, r3
 8006acc:	fb01 f303 	mul.w	r3, r1, r3
 8006ad0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d112      	bne.n	8006afc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006ad6:	78fb      	ldrb	r3, [r7, #3]
 8006ad8:	f003 020f 	and.w	r2, r3, #15
 8006adc:	6879      	ldr	r1, [r7, #4]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	440b      	add	r3, r1
 8006ae8:	3318      	adds	r3, #24
 8006aea:	2200      	movs	r2, #0
 8006aec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006aee:	78f9      	ldrb	r1, [r7, #3]
 8006af0:	2300      	movs	r3, #0
 8006af2:	2200      	movs	r2, #0
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f005 f832 	bl	800bb5e <USBD_LL_Transmit>
 8006afa:	e01f      	b.n	8006b3c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	33b0      	adds	r3, #176	@ 0xb0
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d010      	beq.n	8006b3c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	33b0      	adds	r3, #176	@ 0xb0
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006b38:	78fa      	ldrb	r2, [r7, #3]
 8006b3a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b084      	sub	sp, #16
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	460b      	mov	r3, r1
 8006b50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	32b0      	adds	r2, #176	@ 0xb0
 8006b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b60:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	32b0      	adds	r2, #176	@ 0xb0
 8006b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d101      	bne.n	8006b78 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e01a      	b.n	8006bae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b78:	78fb      	ldrb	r3, [r7, #3]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f005 f830 	bl	800bbe2 <USBD_LL_GetRxDataSize>
 8006b82:	4602      	mov	r2, r0
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	33b0      	adds	r3, #176	@ 0xb0
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006ba8:	4611      	mov	r1, r2
 8006baa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b084      	sub	sp, #16
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	32b0      	adds	r2, #176	@ 0xb0
 8006bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bcc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d101      	bne.n	8006bd8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e024      	b.n	8006c22 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	33b0      	adds	r3, #176	@ 0xb0
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4413      	add	r3, r2
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d019      	beq.n	8006c20 <USBD_CDC_EP0_RxReady+0x6a>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006bf2:	2bff      	cmp	r3, #255	@ 0xff
 8006bf4:	d014      	beq.n	8006c20 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	33b0      	adds	r3, #176	@ 0xb0
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006c0e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c16:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	22ff      	movs	r2, #255	@ 0xff
 8006c1c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c34:	2182      	movs	r1, #130	@ 0x82
 8006c36:	4818      	ldr	r0, [pc, #96]	@ (8006c98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c38:	f000 fd49 	bl	80076ce <USBD_GetEpDesc>
 8006c3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c3e:	2101      	movs	r1, #1
 8006c40:	4815      	ldr	r0, [pc, #84]	@ (8006c98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c42:	f000 fd44 	bl	80076ce <USBD_GetEpDesc>
 8006c46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c48:	2181      	movs	r1, #129	@ 0x81
 8006c4a:	4813      	ldr	r0, [pc, #76]	@ (8006c98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c4c:	f000 fd3f 	bl	80076ce <USBD_GetEpDesc>
 8006c50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d002      	beq.n	8006c5e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	2210      	movs	r2, #16
 8006c5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d006      	beq.n	8006c72 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c6c:	711a      	strb	r2, [r3, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d006      	beq.n	8006c86 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c80:	711a      	strb	r2, [r3, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2243      	movs	r2, #67	@ 0x43
 8006c8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c8c:	4b02      	ldr	r3, [pc, #8]	@ (8006c98 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3718      	adds	r7, #24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	20000050 	.word	0x20000050

08006c9c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ca4:	2182      	movs	r1, #130	@ 0x82
 8006ca6:	4818      	ldr	r0, [pc, #96]	@ (8006d08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ca8:	f000 fd11 	bl	80076ce <USBD_GetEpDesc>
 8006cac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cae:	2101      	movs	r1, #1
 8006cb0:	4815      	ldr	r0, [pc, #84]	@ (8006d08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006cb2:	f000 fd0c 	bl	80076ce <USBD_GetEpDesc>
 8006cb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006cb8:	2181      	movs	r1, #129	@ 0x81
 8006cba:	4813      	ldr	r0, [pc, #76]	@ (8006d08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006cbc:	f000 fd07 	bl	80076ce <USBD_GetEpDesc>
 8006cc0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	2210      	movs	r2, #16
 8006ccc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d006      	beq.n	8006ce2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	711a      	strb	r2, [r3, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f042 0202 	orr.w	r2, r2, #2
 8006ce0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d006      	beq.n	8006cf6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	711a      	strb	r2, [r3, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f042 0202 	orr.w	r2, r2, #2
 8006cf4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2243      	movs	r2, #67	@ 0x43
 8006cfa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006cfc:	4b02      	ldr	r3, [pc, #8]	@ (8006d08 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	20000050 	.word	0x20000050

08006d0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d14:	2182      	movs	r1, #130	@ 0x82
 8006d16:	4818      	ldr	r0, [pc, #96]	@ (8006d78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d18:	f000 fcd9 	bl	80076ce <USBD_GetEpDesc>
 8006d1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d1e:	2101      	movs	r1, #1
 8006d20:	4815      	ldr	r0, [pc, #84]	@ (8006d78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d22:	f000 fcd4 	bl	80076ce <USBD_GetEpDesc>
 8006d26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d28:	2181      	movs	r1, #129	@ 0x81
 8006d2a:	4813      	ldr	r0, [pc, #76]	@ (8006d78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d2c:	f000 fccf 	bl	80076ce <USBD_GetEpDesc>
 8006d30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d002      	beq.n	8006d3e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	2210      	movs	r2, #16
 8006d3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d006      	beq.n	8006d52 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d4c:	711a      	strb	r2, [r3, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d006      	beq.n	8006d66 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d60:	711a      	strb	r2, [r3, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2243      	movs	r2, #67	@ 0x43
 8006d6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d6c:	4b02      	ldr	r3, [pc, #8]	@ (8006d78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3718      	adds	r7, #24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	20000050 	.word	0x20000050

08006d7c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	220a      	movs	r2, #10
 8006d88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006d8a:	4b03      	ldr	r3, [pc, #12]	@ (8006d98 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr
 8006d98:	2000000c 	.word	0x2000000c

08006d9c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d101      	bne.n	8006db0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e009      	b.n	8006dc4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	33b0      	adds	r3, #176	@ 0xb0
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	32b0      	adds	r2, #176	@ 0xb0
 8006de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e008      	b.n	8006e08 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	371c      	adds	r7, #28
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	32b0      	adds	r2, #176	@ 0xb0
 8006e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e2c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e004      	b.n	8006e42 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
	...

08006e50 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	32b0      	adds	r2, #176	@ 0xb0
 8006e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e66:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e025      	b.n	8006ec2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d11f      	bne.n	8006ec0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006e88:	4b10      	ldr	r3, [pc, #64]	@ (8006ecc <USBD_CDC_TransmitPacket+0x7c>)
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	f003 020f 	and.w	r2, r3, #15
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4403      	add	r3, r0
 8006ea2:	3318      	adds	r3, #24
 8006ea4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006ea6:	4b09      	ldr	r3, [pc, #36]	@ (8006ecc <USBD_CDC_TransmitPacket+0x7c>)
 8006ea8:	7819      	ldrb	r1, [r3, #0]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f004 fe51 	bl	800bb5e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	20000093 	.word	0x20000093

08006ed0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	32b0      	adds	r2, #176	@ 0xb0
 8006ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	32b0      	adds	r2, #176	@ 0xb0
 8006ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e018      	b.n	8006f30 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	7c1b      	ldrb	r3, [r3, #16]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10a      	bne.n	8006f1c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f06:	4b0c      	ldr	r3, [pc, #48]	@ (8006f38 <USBD_CDC_ReceivePacket+0x68>)
 8006f08:	7819      	ldrb	r1, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f004 fe43 	bl	800bba0 <USBD_LL_PrepareReceive>
 8006f1a:	e008      	b.n	8006f2e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f1c:	4b06      	ldr	r3, [pc, #24]	@ (8006f38 <USBD_CDC_ReceivePacket+0x68>)
 8006f1e:	7819      	ldrb	r1, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f26:	2340      	movs	r3, #64	@ 0x40
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f004 fe39 	bl	800bba0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	20000094 	.word	0x20000094

08006f3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	4613      	mov	r3, r2
 8006f48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e01f      	b.n	8006f94 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	79fa      	ldrb	r2, [r7, #7]
 8006f86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f004 fcb3 	bl	800b8f4 <USBD_LL_Init>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e025      	b.n	8007000 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	32ae      	adds	r2, #174	@ 0xae
 8006fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00f      	beq.n	8006ff0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	32ae      	adds	r2, #174	@ 0xae
 8006fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe0:	f107 020e 	add.w	r2, r7, #14
 8006fe4:	4610      	mov	r0, r2
 8006fe6:	4798      	blx	r3
 8006fe8:	4602      	mov	r2, r0
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006ff6:	1c5a      	adds	r2, r3, #1
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f004 fcbb 	bl	800b98c <USBD_LL_Start>
 8007016:	4603      	mov	r3, r0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007028:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800702a:	4618      	mov	r0, r3
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b084      	sub	sp, #16
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	460b      	mov	r3, r1
 8007040:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800704c:	2b00      	cmp	r3, #0
 800704e:	d009      	beq.n	8007064 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	78fa      	ldrb	r2, [r7, #3]
 800705a:	4611      	mov	r1, r2
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	4798      	blx	r3
 8007060:	4603      	mov	r3, r0
 8007062:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007064:	7bfb      	ldrb	r3, [r7, #15]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b084      	sub	sp, #16
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	460b      	mov	r3, r1
 8007078:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	78fa      	ldrb	r2, [r7, #3]
 8007088:	4611      	mov	r1, r2
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	4798      	blx	r3
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d001      	beq.n	8007098 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007094:	2303      	movs	r3, #3
 8007096:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007098:	7bfb      	ldrb	r3, [r7, #15]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b084      	sub	sp, #16
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	4618      	mov	r0, r3
 80070b6:	f001 f930 	bl	800831a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80070c8:	461a      	mov	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80070d6:	f003 031f 	and.w	r3, r3, #31
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d01a      	beq.n	8007114 <USBD_LL_SetupStage+0x72>
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d822      	bhi.n	8007128 <USBD_LL_SetupStage+0x86>
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <USBD_LL_SetupStage+0x4a>
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d00a      	beq.n	8007100 <USBD_LL_SetupStage+0x5e>
 80070ea:	e01d      	b.n	8007128 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fb5d 	bl	80077b4 <USBD_StdDevReq>
 80070fa:	4603      	mov	r3, r0
 80070fc:	73fb      	strb	r3, [r7, #15]
      break;
 80070fe:	e020      	b.n	8007142 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fbc5 	bl	8007898 <USBD_StdItfReq>
 800710e:	4603      	mov	r3, r0
 8007110:	73fb      	strb	r3, [r7, #15]
      break;
 8007112:	e016      	b.n	8007142 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fc27 	bl	8007970 <USBD_StdEPReq>
 8007122:	4603      	mov	r3, r0
 8007124:	73fb      	strb	r3, [r7, #15]
      break;
 8007126:	e00c      	b.n	8007142 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800712e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007132:	b2db      	uxtb	r3, r3
 8007134:	4619      	mov	r1, r3
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f004 fc88 	bl	800ba4c <USBD_LL_StallEP>
 800713c:	4603      	mov	r3, r0
 800713e:	73fb      	strb	r3, [r7, #15]
      break;
 8007140:	bf00      	nop
  }

  return ret;
 8007142:	7bfb      	ldrb	r3, [r7, #15]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	460b      	mov	r3, r1
 8007156:	607a      	str	r2, [r7, #4]
 8007158:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800715e:	7afb      	ldrb	r3, [r7, #11]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d16e      	bne.n	8007242 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800716a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007172:	2b03      	cmp	r3, #3
 8007174:	f040 8098 	bne.w	80072a8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	689a      	ldr	r2, [r3, #8]
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	429a      	cmp	r2, r3
 8007182:	d913      	bls.n	80071ac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	1ad2      	subs	r2, r2, r3
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	68da      	ldr	r2, [r3, #12]
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	4293      	cmp	r3, r2
 800719c:	bf28      	it	cs
 800719e:	4613      	movcs	r3, r2
 80071a0:	461a      	mov	r2, r3
 80071a2:	6879      	ldr	r1, [r7, #4]
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f001 f9ac 	bl	8008502 <USBD_CtlContinueRx>
 80071aa:	e07d      	b.n	80072a8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80071b2:	f003 031f 	and.w	r3, r3, #31
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d014      	beq.n	80071e4 <USBD_LL_DataOutStage+0x98>
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d81d      	bhi.n	80071fa <USBD_LL_DataOutStage+0xae>
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d002      	beq.n	80071c8 <USBD_LL_DataOutStage+0x7c>
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d003      	beq.n	80071ce <USBD_LL_DataOutStage+0x82>
 80071c6:	e018      	b.n	80071fa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80071c8:	2300      	movs	r3, #0
 80071ca:	75bb      	strb	r3, [r7, #22]
            break;
 80071cc:	e018      	b.n	8007200 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	4619      	mov	r1, r3
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f000 fa5e 	bl	800769a <USBD_CoreFindIF>
 80071de:	4603      	mov	r3, r0
 80071e0:	75bb      	strb	r3, [r7, #22]
            break;
 80071e2:	e00d      	b.n	8007200 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	4619      	mov	r1, r3
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f000 fa60 	bl	80076b4 <USBD_CoreFindEP>
 80071f4:	4603      	mov	r3, r0
 80071f6:	75bb      	strb	r3, [r7, #22]
            break;
 80071f8:	e002      	b.n	8007200 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80071fa:	2300      	movs	r3, #0
 80071fc:	75bb      	strb	r3, [r7, #22]
            break;
 80071fe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007200:	7dbb      	ldrb	r3, [r7, #22]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d119      	bne.n	800723a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b03      	cmp	r3, #3
 8007210:	d113      	bne.n	800723a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007212:	7dba      	ldrb	r2, [r7, #22]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	32ae      	adds	r2, #174	@ 0xae
 8007218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00b      	beq.n	800723a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007222:	7dba      	ldrb	r2, [r7, #22]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800722a:	7dba      	ldrb	r2, [r7, #22]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	32ae      	adds	r2, #174	@ 0xae
 8007230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f001 f972 	bl	8008524 <USBD_CtlSendStatus>
 8007240:	e032      	b.n	80072a8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007242:	7afb      	ldrb	r3, [r7, #11]
 8007244:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007248:	b2db      	uxtb	r3, r3
 800724a:	4619      	mov	r1, r3
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 fa31 	bl	80076b4 <USBD_CoreFindEP>
 8007252:	4603      	mov	r3, r0
 8007254:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007256:	7dbb      	ldrb	r3, [r7, #22]
 8007258:	2bff      	cmp	r3, #255	@ 0xff
 800725a:	d025      	beq.n	80072a8 <USBD_LL_DataOutStage+0x15c>
 800725c:	7dbb      	ldrb	r3, [r7, #22]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d122      	bne.n	80072a8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b03      	cmp	r3, #3
 800726c:	d117      	bne.n	800729e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800726e:	7dba      	ldrb	r2, [r7, #22]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	32ae      	adds	r2, #174	@ 0xae
 8007274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00f      	beq.n	800729e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800727e:	7dba      	ldrb	r2, [r7, #22]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007286:	7dba      	ldrb	r2, [r7, #22]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	32ae      	adds	r2, #174	@ 0xae
 800728c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	7afa      	ldrb	r2, [r7, #11]
 8007294:	4611      	mov	r1, r2
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	4798      	blx	r3
 800729a:	4603      	mov	r3, r0
 800729c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800729e:	7dfb      	ldrb	r3, [r7, #23]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d001      	beq.n	80072a8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80072a4:	7dfb      	ldrb	r3, [r7, #23]
 80072a6:	e000      	b.n	80072aa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3718      	adds	r7, #24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b086      	sub	sp, #24
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	60f8      	str	r0, [r7, #12]
 80072ba:	460b      	mov	r3, r1
 80072bc:	607a      	str	r2, [r7, #4]
 80072be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80072c0:	7afb      	ldrb	r3, [r7, #11]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d16f      	bne.n	80073a6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	3314      	adds	r3, #20
 80072ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d15a      	bne.n	800738c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	689a      	ldr	r2, [r3, #8]
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d914      	bls.n	800730c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	689a      	ldr	r2, [r3, #8]
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	1ad2      	subs	r2, r2, r3
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	461a      	mov	r2, r3
 80072f6:	6879      	ldr	r1, [r7, #4]
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f001 f8d4 	bl	80084a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072fe:	2300      	movs	r3, #0
 8007300:	2200      	movs	r2, #0
 8007302:	2100      	movs	r1, #0
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f004 fc4b 	bl	800bba0 <USBD_LL_PrepareReceive>
 800730a:	e03f      	b.n	800738c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	68da      	ldr	r2, [r3, #12]
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	429a      	cmp	r2, r3
 8007316:	d11c      	bne.n	8007352 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	685a      	ldr	r2, [r3, #4]
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007320:	429a      	cmp	r2, r3
 8007322:	d316      	bcc.n	8007352 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800732e:	429a      	cmp	r2, r3
 8007330:	d20f      	bcs.n	8007352 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007332:	2200      	movs	r2, #0
 8007334:	2100      	movs	r1, #0
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f001 f8b5 	bl	80084a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007344:	2300      	movs	r3, #0
 8007346:	2200      	movs	r2, #0
 8007348:	2100      	movs	r1, #0
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f004 fc28 	bl	800bba0 <USBD_LL_PrepareReceive>
 8007350:	e01c      	b.n	800738c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b03      	cmp	r3, #3
 800735c:	d10f      	bne.n	800737e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d009      	beq.n	800737e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800737e:	2180      	movs	r1, #128	@ 0x80
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f004 fb63 	bl	800ba4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f001 f8df 	bl	800854a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d03a      	beq.n	800740c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f7ff fe42 	bl	8007020 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80073a4:	e032      	b.n	800740c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80073a6:	7afb      	ldrb	r3, [r7, #11]
 80073a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	4619      	mov	r1, r3
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 f97f 	bl	80076b4 <USBD_CoreFindEP>
 80073b6:	4603      	mov	r3, r0
 80073b8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073ba:	7dfb      	ldrb	r3, [r7, #23]
 80073bc:	2bff      	cmp	r3, #255	@ 0xff
 80073be:	d025      	beq.n	800740c <USBD_LL_DataInStage+0x15a>
 80073c0:	7dfb      	ldrb	r3, [r7, #23]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d122      	bne.n	800740c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	d11c      	bne.n	800740c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80073d2:	7dfa      	ldrb	r2, [r7, #23]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	32ae      	adds	r2, #174	@ 0xae
 80073d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d014      	beq.n	800740c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80073e2:	7dfa      	ldrb	r2, [r7, #23]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80073ea:	7dfa      	ldrb	r2, [r7, #23]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	32ae      	adds	r2, #174	@ 0xae
 80073f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	7afa      	ldrb	r2, [r7, #11]
 80073f8:	4611      	mov	r1, r2
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	4798      	blx	r3
 80073fe:	4603      	mov	r3, r0
 8007400:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007402:	7dbb      	ldrb	r3, [r7, #22]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d001      	beq.n	800740c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007408:	7dbb      	ldrb	r3, [r7, #22]
 800740a:	e000      	b.n	800740e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3718      	adds	r7, #24
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b084      	sub	sp, #16
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800744e:	2b00      	cmp	r3, #0
 8007450:	d014      	beq.n	800747c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00e      	beq.n	800747c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	6852      	ldr	r2, [r2, #4]
 800746a:	b2d2      	uxtb	r2, r2
 800746c:	4611      	mov	r1, r2
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	4798      	blx	r3
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007478:	2303      	movs	r3, #3
 800747a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800747c:	2340      	movs	r3, #64	@ 0x40
 800747e:	2200      	movs	r2, #0
 8007480:	2100      	movs	r1, #0
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f004 fa9d 	bl	800b9c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2240      	movs	r2, #64	@ 0x40
 8007494:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007498:	2340      	movs	r3, #64	@ 0x40
 800749a:	2200      	movs	r2, #0
 800749c:	2180      	movs	r1, #128	@ 0x80
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f004 fa8f 	bl	800b9c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2240      	movs	r2, #64	@ 0x40
 80074ae:	621a      	str	r2, [r3, #32]

  return ret;
 80074b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b083      	sub	sp, #12
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	460b      	mov	r3, r1
 80074c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	78fa      	ldrb	r2, [r7, #3]
 80074ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074da:	b480      	push	{r7}
 80074dc:	b083      	sub	sp, #12
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2204      	movs	r2, #4
 80074f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007506:	b480      	push	{r7}
 8007508:	b083      	sub	sp, #12
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b04      	cmp	r3, #4
 8007518:	d106      	bne.n	8007528 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007520:	b2da      	uxtb	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b082      	sub	sp, #8
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b03      	cmp	r3, #3
 8007548:	d110      	bne.n	800756c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00b      	beq.n	800756c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800755a:	69db      	ldr	r3, [r3, #28]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d005      	beq.n	800756c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007566:	69db      	ldr	r3, [r3, #28]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3708      	adds	r7, #8
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b082      	sub	sp, #8
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	460b      	mov	r3, r1
 8007580:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	32ae      	adds	r2, #174	@ 0xae
 800758c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007594:	2303      	movs	r3, #3
 8007596:	e01c      	b.n	80075d2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d115      	bne.n	80075d0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	32ae      	adds	r2, #174	@ 0xae
 80075ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b2:	6a1b      	ldr	r3, [r3, #32]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00b      	beq.n	80075d0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	32ae      	adds	r2, #174	@ 0xae
 80075c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075c6:	6a1b      	ldr	r3, [r3, #32]
 80075c8:	78fa      	ldrb	r2, [r7, #3]
 80075ca:	4611      	mov	r1, r2
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b082      	sub	sp, #8
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	460b      	mov	r3, r1
 80075e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	32ae      	adds	r2, #174	@ 0xae
 80075f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d101      	bne.n	80075fc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e01c      	b.n	8007636 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b03      	cmp	r3, #3
 8007606:	d115      	bne.n	8007634 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	32ae      	adds	r2, #174	@ 0xae
 8007612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00b      	beq.n	8007634 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	32ae      	adds	r2, #174	@ 0xae
 8007626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800762a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800762c:	78fa      	ldrb	r2, [r7, #3]
 800762e:	4611      	mov	r1, r2
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800763e:	b480      	push	{r7}
 8007640:	b083      	sub	sp, #12
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00e      	beq.n	8007690 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	6852      	ldr	r2, [r2, #4]
 800767e:	b2d2      	uxtb	r2, r2
 8007680:	4611      	mov	r1, r2
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	4798      	blx	r3
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800768c:	2303      	movs	r3, #3
 800768e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007690:	7bfb      	ldrb	r3, [r7, #15]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800769a:	b480      	push	{r7}
 800769c:	b083      	sub	sp, #12
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	460b      	mov	r3, r1
 80076a4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076a6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	460b      	mov	r3, r1
 80076be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b086      	sub	sp, #24
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	460b      	mov	r3, r1
 80076d8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	885b      	ldrh	r3, [r3, #2]
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	7812      	ldrb	r2, [r2, #0]
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d91f      	bls.n	8007734 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80076fa:	e013      	b.n	8007724 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80076fc:	f107 030a 	add.w	r3, r7, #10
 8007700:	4619      	mov	r1, r3
 8007702:	6978      	ldr	r0, [r7, #20]
 8007704:	f000 f81b 	bl	800773e <USBD_GetNextDesc>
 8007708:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	785b      	ldrb	r3, [r3, #1]
 800770e:	2b05      	cmp	r3, #5
 8007710:	d108      	bne.n	8007724 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	789b      	ldrb	r3, [r3, #2]
 800771a:	78fa      	ldrb	r2, [r7, #3]
 800771c:	429a      	cmp	r2, r3
 800771e:	d008      	beq.n	8007732 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007720:	2300      	movs	r3, #0
 8007722:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	885b      	ldrh	r3, [r3, #2]
 8007728:	b29a      	uxth	r2, r3
 800772a:	897b      	ldrh	r3, [r7, #10]
 800772c:	429a      	cmp	r2, r3
 800772e:	d8e5      	bhi.n	80076fc <USBD_GetEpDesc+0x2e>
 8007730:	e000      	b.n	8007734 <USBD_GetEpDesc+0x66>
          break;
 8007732:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007734:	693b      	ldr	r3, [r7, #16]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3718      	adds	r7, #24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800773e:	b480      	push	{r7}
 8007740:	b085      	sub	sp, #20
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	881b      	ldrh	r3, [r3, #0]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	7812      	ldrb	r2, [r2, #0]
 8007754:	4413      	add	r3, r2
 8007756:	b29a      	uxth	r2, r3
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	461a      	mov	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4413      	add	r3, r2
 8007766:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007768:	68fb      	ldr	r3, [r7, #12]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007776:	b480      	push	{r7}
 8007778:	b087      	sub	sp, #28
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	3301      	adds	r3, #1
 800778c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007794:	8a3b      	ldrh	r3, [r7, #16]
 8007796:	021b      	lsls	r3, r3, #8
 8007798:	b21a      	sxth	r2, r3
 800779a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800779e:	4313      	orrs	r3, r2
 80077a0:	b21b      	sxth	r3, r3
 80077a2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80077a4:	89fb      	ldrh	r3, [r7, #14]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	371c      	adds	r7, #28
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
	...

080077b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077ca:	2b40      	cmp	r3, #64	@ 0x40
 80077cc:	d005      	beq.n	80077da <USBD_StdDevReq+0x26>
 80077ce:	2b40      	cmp	r3, #64	@ 0x40
 80077d0:	d857      	bhi.n	8007882 <USBD_StdDevReq+0xce>
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00f      	beq.n	80077f6 <USBD_StdDevReq+0x42>
 80077d6:	2b20      	cmp	r3, #32
 80077d8:	d153      	bne.n	8007882 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	32ae      	adds	r2, #174	@ 0xae
 80077e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	4798      	blx	r3
 80077f0:	4603      	mov	r3, r0
 80077f2:	73fb      	strb	r3, [r7, #15]
      break;
 80077f4:	e04a      	b.n	800788c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	785b      	ldrb	r3, [r3, #1]
 80077fa:	2b09      	cmp	r3, #9
 80077fc:	d83b      	bhi.n	8007876 <USBD_StdDevReq+0xc2>
 80077fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007804 <USBD_StdDevReq+0x50>)
 8007800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007804:	08007859 	.word	0x08007859
 8007808:	0800786d 	.word	0x0800786d
 800780c:	08007877 	.word	0x08007877
 8007810:	08007863 	.word	0x08007863
 8007814:	08007877 	.word	0x08007877
 8007818:	08007837 	.word	0x08007837
 800781c:	0800782d 	.word	0x0800782d
 8007820:	08007877 	.word	0x08007877
 8007824:	0800784f 	.word	0x0800784f
 8007828:	08007841 	.word	0x08007841
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fa3c 	bl	8007cac <USBD_GetDescriptor>
          break;
 8007834:	e024      	b.n	8007880 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007836:	6839      	ldr	r1, [r7, #0]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fbcb 	bl	8007fd4 <USBD_SetAddress>
          break;
 800783e:	e01f      	b.n	8007880 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fc0a 	bl	800805c <USBD_SetConfig>
 8007848:	4603      	mov	r3, r0
 800784a:	73fb      	strb	r3, [r7, #15]
          break;
 800784c:	e018      	b.n	8007880 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fcad 	bl	80081b0 <USBD_GetConfig>
          break;
 8007856:	e013      	b.n	8007880 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fcde 	bl	800821c <USBD_GetStatus>
          break;
 8007860:	e00e      	b.n	8007880 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fd0d 	bl	8008284 <USBD_SetFeature>
          break;
 800786a:	e009      	b.n	8007880 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800786c:	6839      	ldr	r1, [r7, #0]
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fd31 	bl	80082d6 <USBD_ClrFeature>
          break;
 8007874:	e004      	b.n	8007880 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fd88 	bl	800838e <USBD_CtlError>
          break;
 800787e:	bf00      	nop
      }
      break;
 8007880:	e004      	b.n	800788c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fd82 	bl	800838e <USBD_CtlError>
      break;
 800788a:	bf00      	nop
  }

  return ret;
 800788c:	7bfb      	ldrb	r3, [r7, #15]
}
 800788e:	4618      	mov	r0, r3
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop

08007898 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078a2:	2300      	movs	r3, #0
 80078a4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80078ae:	2b40      	cmp	r3, #64	@ 0x40
 80078b0:	d005      	beq.n	80078be <USBD_StdItfReq+0x26>
 80078b2:	2b40      	cmp	r3, #64	@ 0x40
 80078b4:	d852      	bhi.n	800795c <USBD_StdItfReq+0xc4>
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d001      	beq.n	80078be <USBD_StdItfReq+0x26>
 80078ba:	2b20      	cmp	r3, #32
 80078bc:	d14e      	bne.n	800795c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	3b01      	subs	r3, #1
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d840      	bhi.n	800794e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	889b      	ldrh	r3, [r3, #4]
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d836      	bhi.n	8007944 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	889b      	ldrh	r3, [r3, #4]
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7ff fedb 	bl	800769a <USBD_CoreFindIF>
 80078e4:	4603      	mov	r3, r0
 80078e6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078e8:	7bbb      	ldrb	r3, [r7, #14]
 80078ea:	2bff      	cmp	r3, #255	@ 0xff
 80078ec:	d01d      	beq.n	800792a <USBD_StdItfReq+0x92>
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d11a      	bne.n	800792a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80078f4:	7bba      	ldrb	r2, [r7, #14]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	32ae      	adds	r2, #174	@ 0xae
 80078fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00f      	beq.n	8007924 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007904:	7bba      	ldrb	r2, [r7, #14]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800790c:	7bba      	ldrb	r2, [r7, #14]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	32ae      	adds	r2, #174	@ 0xae
 8007912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	6839      	ldr	r1, [r7, #0]
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	4798      	blx	r3
 800791e:	4603      	mov	r3, r0
 8007920:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007922:	e004      	b.n	800792e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007924:	2303      	movs	r3, #3
 8007926:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007928:	e001      	b.n	800792e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800792a:	2303      	movs	r3, #3
 800792c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	88db      	ldrh	r3, [r3, #6]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d110      	bne.n	8007958 <USBD_StdItfReq+0xc0>
 8007936:	7bfb      	ldrb	r3, [r7, #15]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d10d      	bne.n	8007958 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fdf1 	bl	8008524 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007942:	e009      	b.n	8007958 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fd21 	bl	800838e <USBD_CtlError>
          break;
 800794c:	e004      	b.n	8007958 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fd1c 	bl	800838e <USBD_CtlError>
          break;
 8007956:	e000      	b.n	800795a <USBD_StdItfReq+0xc2>
          break;
 8007958:	bf00      	nop
      }
      break;
 800795a:	e004      	b.n	8007966 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fd15 	bl	800838e <USBD_CtlError>
      break;
 8007964:	bf00      	nop
  }

  return ret;
 8007966:	7bfb      	ldrb	r3, [r7, #15]
}
 8007968:	4618      	mov	r0, r3
 800796a:	3710      	adds	r7, #16
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	889b      	ldrh	r3, [r3, #4]
 8007982:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800798c:	2b40      	cmp	r3, #64	@ 0x40
 800798e:	d007      	beq.n	80079a0 <USBD_StdEPReq+0x30>
 8007990:	2b40      	cmp	r3, #64	@ 0x40
 8007992:	f200 817f 	bhi.w	8007c94 <USBD_StdEPReq+0x324>
 8007996:	2b00      	cmp	r3, #0
 8007998:	d02a      	beq.n	80079f0 <USBD_StdEPReq+0x80>
 800799a:	2b20      	cmp	r3, #32
 800799c:	f040 817a 	bne.w	8007c94 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80079a0:	7bbb      	ldrb	r3, [r7, #14]
 80079a2:	4619      	mov	r1, r3
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7ff fe85 	bl	80076b4 <USBD_CoreFindEP>
 80079aa:	4603      	mov	r3, r0
 80079ac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079ae:	7b7b      	ldrb	r3, [r7, #13]
 80079b0:	2bff      	cmp	r3, #255	@ 0xff
 80079b2:	f000 8174 	beq.w	8007c9e <USBD_StdEPReq+0x32e>
 80079b6:	7b7b      	ldrb	r3, [r7, #13]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f040 8170 	bne.w	8007c9e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80079be:	7b7a      	ldrb	r2, [r7, #13]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80079c6:	7b7a      	ldrb	r2, [r7, #13]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	32ae      	adds	r2, #174	@ 0xae
 80079cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 8163 	beq.w	8007c9e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80079d8:	7b7a      	ldrb	r2, [r7, #13]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	32ae      	adds	r2, #174	@ 0xae
 80079de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	6839      	ldr	r1, [r7, #0]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	4798      	blx	r3
 80079ea:	4603      	mov	r3, r0
 80079ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079ee:	e156      	b.n	8007c9e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	785b      	ldrb	r3, [r3, #1]
 80079f4:	2b03      	cmp	r3, #3
 80079f6:	d008      	beq.n	8007a0a <USBD_StdEPReq+0x9a>
 80079f8:	2b03      	cmp	r3, #3
 80079fa:	f300 8145 	bgt.w	8007c88 <USBD_StdEPReq+0x318>
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f000 809b 	beq.w	8007b3a <USBD_StdEPReq+0x1ca>
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d03c      	beq.n	8007a82 <USBD_StdEPReq+0x112>
 8007a08:	e13e      	b.n	8007c88 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d002      	beq.n	8007a1c <USBD_StdEPReq+0xac>
 8007a16:	2b03      	cmp	r3, #3
 8007a18:	d016      	beq.n	8007a48 <USBD_StdEPReq+0xd8>
 8007a1a:	e02c      	b.n	8007a76 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a1c:	7bbb      	ldrb	r3, [r7, #14]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00d      	beq.n	8007a3e <USBD_StdEPReq+0xce>
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	2b80      	cmp	r3, #128	@ 0x80
 8007a26:	d00a      	beq.n	8007a3e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a28:	7bbb      	ldrb	r3, [r7, #14]
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f004 f80d 	bl	800ba4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a32:	2180      	movs	r1, #128	@ 0x80
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f004 f809 	bl	800ba4c <USBD_LL_StallEP>
 8007a3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a3c:	e020      	b.n	8007a80 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fca4 	bl	800838e <USBD_CtlError>
              break;
 8007a46:	e01b      	b.n	8007a80 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	885b      	ldrh	r3, [r3, #2]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10e      	bne.n	8007a6e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00b      	beq.n	8007a6e <USBD_StdEPReq+0xfe>
 8007a56:	7bbb      	ldrb	r3, [r7, #14]
 8007a58:	2b80      	cmp	r3, #128	@ 0x80
 8007a5a:	d008      	beq.n	8007a6e <USBD_StdEPReq+0xfe>
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	88db      	ldrh	r3, [r3, #6]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d104      	bne.n	8007a6e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a64:	7bbb      	ldrb	r3, [r7, #14]
 8007a66:	4619      	mov	r1, r3
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f003 ffef 	bl	800ba4c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fd58 	bl	8008524 <USBD_CtlSendStatus>

              break;
 8007a74:	e004      	b.n	8007a80 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007a76:	6839      	ldr	r1, [r7, #0]
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fc88 	bl	800838e <USBD_CtlError>
              break;
 8007a7e:	bf00      	nop
          }
          break;
 8007a80:	e107      	b.n	8007c92 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d002      	beq.n	8007a94 <USBD_StdEPReq+0x124>
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	d016      	beq.n	8007ac0 <USBD_StdEPReq+0x150>
 8007a92:	e04b      	b.n	8007b2c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00d      	beq.n	8007ab6 <USBD_StdEPReq+0x146>
 8007a9a:	7bbb      	ldrb	r3, [r7, #14]
 8007a9c:	2b80      	cmp	r3, #128	@ 0x80
 8007a9e:	d00a      	beq.n	8007ab6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f003 ffd1 	bl	800ba4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007aaa:	2180      	movs	r1, #128	@ 0x80
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f003 ffcd 	bl	800ba4c <USBD_LL_StallEP>
 8007ab2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ab4:	e040      	b.n	8007b38 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fc68 	bl	800838e <USBD_CtlError>
              break;
 8007abe:	e03b      	b.n	8007b38 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	885b      	ldrh	r3, [r3, #2]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d136      	bne.n	8007b36 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ac8:	7bbb      	ldrb	r3, [r7, #14]
 8007aca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d004      	beq.n	8007adc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ad2:	7bbb      	ldrb	r3, [r7, #14]
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f003 ffd7 	bl	800ba8a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 fd21 	bl	8008524 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ae2:	7bbb      	ldrb	r3, [r7, #14]
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7ff fde4 	bl	80076b4 <USBD_CoreFindEP>
 8007aec:	4603      	mov	r3, r0
 8007aee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007af0:	7b7b      	ldrb	r3, [r7, #13]
 8007af2:	2bff      	cmp	r3, #255	@ 0xff
 8007af4:	d01f      	beq.n	8007b36 <USBD_StdEPReq+0x1c6>
 8007af6:	7b7b      	ldrb	r3, [r7, #13]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d11c      	bne.n	8007b36 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007afc:	7b7a      	ldrb	r2, [r7, #13]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007b04:	7b7a      	ldrb	r2, [r7, #13]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	32ae      	adds	r2, #174	@ 0xae
 8007b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d010      	beq.n	8007b36 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b14:	7b7a      	ldrb	r2, [r7, #13]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	32ae      	adds	r2, #174	@ 0xae
 8007b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	6839      	ldr	r1, [r7, #0]
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	4798      	blx	r3
 8007b26:	4603      	mov	r3, r0
 8007b28:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007b2a:	e004      	b.n	8007b36 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007b2c:	6839      	ldr	r1, [r7, #0]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fc2d 	bl	800838e <USBD_CtlError>
              break;
 8007b34:	e000      	b.n	8007b38 <USBD_StdEPReq+0x1c8>
              break;
 8007b36:	bf00      	nop
          }
          break;
 8007b38:	e0ab      	b.n	8007c92 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d002      	beq.n	8007b4c <USBD_StdEPReq+0x1dc>
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d032      	beq.n	8007bb0 <USBD_StdEPReq+0x240>
 8007b4a:	e097      	b.n	8007c7c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d007      	beq.n	8007b62 <USBD_StdEPReq+0x1f2>
 8007b52:	7bbb      	ldrb	r3, [r7, #14]
 8007b54:	2b80      	cmp	r3, #128	@ 0x80
 8007b56:	d004      	beq.n	8007b62 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007b58:	6839      	ldr	r1, [r7, #0]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fc17 	bl	800838e <USBD_CtlError>
                break;
 8007b60:	e091      	b.n	8007c86 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	da0b      	bge.n	8007b82 <USBD_StdEPReq+0x212>
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
 8007b6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b70:	4613      	mov	r3, r2
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	4413      	add	r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	3310      	adds	r3, #16
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	3304      	adds	r3, #4
 8007b80:	e00b      	b.n	8007b9a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b82:	7bbb      	ldrb	r3, [r7, #14]
 8007b84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b88:	4613      	mov	r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4413      	add	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	4413      	add	r3, r2
 8007b98:	3304      	adds	r3, #4
 8007b9a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	2202      	movs	r2, #2
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 fc61 	bl	8008470 <USBD_CtlSendData>
              break;
 8007bae:	e06a      	b.n	8007c86 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007bb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	da11      	bge.n	8007bdc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007bb8:	7bbb      	ldrb	r3, [r7, #14]
 8007bba:	f003 020f 	and.w	r2, r3, #15
 8007bbe:	6879      	ldr	r1, [r7, #4]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	440b      	add	r3, r1
 8007bca:	3324      	adds	r3, #36	@ 0x24
 8007bcc:	881b      	ldrh	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d117      	bne.n	8007c02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007bd2:	6839      	ldr	r1, [r7, #0]
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fbda 	bl	800838e <USBD_CtlError>
                  break;
 8007bda:	e054      	b.n	8007c86 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007bdc:	7bbb      	ldrb	r3, [r7, #14]
 8007bde:	f003 020f 	and.w	r2, r3, #15
 8007be2:	6879      	ldr	r1, [r7, #4]
 8007be4:	4613      	mov	r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4413      	add	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	440b      	add	r3, r1
 8007bee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007bf2:	881b      	ldrh	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d104      	bne.n	8007c02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fbc7 	bl	800838e <USBD_CtlError>
                  break;
 8007c00:	e041      	b.n	8007c86 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	da0b      	bge.n	8007c22 <USBD_StdEPReq+0x2b2>
 8007c0a:	7bbb      	ldrb	r3, [r7, #14]
 8007c0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c10:	4613      	mov	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	3310      	adds	r3, #16
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	3304      	adds	r3, #4
 8007c20:	e00b      	b.n	8007c3a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c22:	7bbb      	ldrb	r3, [r7, #14]
 8007c24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c28:	4613      	mov	r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	4413      	add	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	4413      	add	r3, r2
 8007c38:	3304      	adds	r3, #4
 8007c3a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c3c:	7bbb      	ldrb	r3, [r7, #14]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d002      	beq.n	8007c48 <USBD_StdEPReq+0x2d8>
 8007c42:	7bbb      	ldrb	r3, [r7, #14]
 8007c44:	2b80      	cmp	r3, #128	@ 0x80
 8007c46:	d103      	bne.n	8007c50 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	601a      	str	r2, [r3, #0]
 8007c4e:	e00e      	b.n	8007c6e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
 8007c52:	4619      	mov	r1, r3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f003 ff37 	bl	800bac8 <USBD_LL_IsStallEP>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d003      	beq.n	8007c68 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	2201      	movs	r2, #1
 8007c64:	601a      	str	r2, [r3, #0]
 8007c66:	e002      	b.n	8007c6e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	2202      	movs	r2, #2
 8007c72:	4619      	mov	r1, r3
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fbfb 	bl	8008470 <USBD_CtlSendData>
              break;
 8007c7a:	e004      	b.n	8007c86 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fb85 	bl	800838e <USBD_CtlError>
              break;
 8007c84:	bf00      	nop
          }
          break;
 8007c86:	e004      	b.n	8007c92 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fb7f 	bl	800838e <USBD_CtlError>
          break;
 8007c90:	bf00      	nop
      }
      break;
 8007c92:	e005      	b.n	8007ca0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007c94:	6839      	ldr	r1, [r7, #0]
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fb79 	bl	800838e <USBD_CtlError>
      break;
 8007c9c:	e000      	b.n	8007ca0 <USBD_StdEPReq+0x330>
      break;
 8007c9e:	bf00      	nop
  }

  return ret;
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
	...

08007cac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	885b      	ldrh	r3, [r3, #2]
 8007cc6:	0a1b      	lsrs	r3, r3, #8
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	2b0e      	cmp	r3, #14
 8007cce:	f200 8152 	bhi.w	8007f76 <USBD_GetDescriptor+0x2ca>
 8007cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8007cd8 <USBD_GetDescriptor+0x2c>)
 8007cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd8:	08007d49 	.word	0x08007d49
 8007cdc:	08007d61 	.word	0x08007d61
 8007ce0:	08007da1 	.word	0x08007da1
 8007ce4:	08007f77 	.word	0x08007f77
 8007ce8:	08007f77 	.word	0x08007f77
 8007cec:	08007f17 	.word	0x08007f17
 8007cf0:	08007f43 	.word	0x08007f43
 8007cf4:	08007f77 	.word	0x08007f77
 8007cf8:	08007f77 	.word	0x08007f77
 8007cfc:	08007f77 	.word	0x08007f77
 8007d00:	08007f77 	.word	0x08007f77
 8007d04:	08007f77 	.word	0x08007f77
 8007d08:	08007f77 	.word	0x08007f77
 8007d0c:	08007f77 	.word	0x08007f77
 8007d10:	08007d15 	.word	0x08007d15
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00b      	beq.n	8007d38 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d26:	69db      	ldr	r3, [r3, #28]
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	7c12      	ldrb	r2, [r2, #16]
 8007d2c:	f107 0108 	add.w	r1, r7, #8
 8007d30:	4610      	mov	r0, r2
 8007d32:	4798      	blx	r3
 8007d34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d36:	e126      	b.n	8007f86 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fb27 	bl	800838e <USBD_CtlError>
        err++;
 8007d40:	7afb      	ldrb	r3, [r7, #11]
 8007d42:	3301      	adds	r3, #1
 8007d44:	72fb      	strb	r3, [r7, #11]
      break;
 8007d46:	e11e      	b.n	8007f86 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	7c12      	ldrb	r2, [r2, #16]
 8007d54:	f107 0108 	add.w	r1, r7, #8
 8007d58:	4610      	mov	r0, r2
 8007d5a:	4798      	blx	r3
 8007d5c:	60f8      	str	r0, [r7, #12]
      break;
 8007d5e:	e112      	b.n	8007f86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	7c1b      	ldrb	r3, [r3, #16]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d10d      	bne.n	8007d84 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d70:	f107 0208 	add.w	r2, r7, #8
 8007d74:	4610      	mov	r0, r2
 8007d76:	4798      	blx	r3
 8007d78:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	2202      	movs	r2, #2
 8007d80:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d82:	e100      	b.n	8007f86 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d8c:	f107 0208 	add.w	r2, r7, #8
 8007d90:	4610      	mov	r0, r2
 8007d92:	4798      	blx	r3
 8007d94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	701a      	strb	r2, [r3, #0]
      break;
 8007d9e:	e0f2      	b.n	8007f86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	885b      	ldrh	r3, [r3, #2]
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b05      	cmp	r3, #5
 8007da8:	f200 80ac 	bhi.w	8007f04 <USBD_GetDescriptor+0x258>
 8007dac:	a201      	add	r2, pc, #4	@ (adr r2, 8007db4 <USBD_GetDescriptor+0x108>)
 8007dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db2:	bf00      	nop
 8007db4:	08007dcd 	.word	0x08007dcd
 8007db8:	08007e01 	.word	0x08007e01
 8007dbc:	08007e35 	.word	0x08007e35
 8007dc0:	08007e69 	.word	0x08007e69
 8007dc4:	08007e9d 	.word	0x08007e9d
 8007dc8:	08007ed1 	.word	0x08007ed1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00b      	beq.n	8007df0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	7c12      	ldrb	r2, [r2, #16]
 8007de4:	f107 0108 	add.w	r1, r7, #8
 8007de8:	4610      	mov	r0, r2
 8007dea:	4798      	blx	r3
 8007dec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dee:	e091      	b.n	8007f14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 facb 	bl	800838e <USBD_CtlError>
            err++;
 8007df8:	7afb      	ldrb	r3, [r7, #11]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	72fb      	strb	r3, [r7, #11]
          break;
 8007dfe:	e089      	b.n	8007f14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00b      	beq.n	8007e24 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	7c12      	ldrb	r2, [r2, #16]
 8007e18:	f107 0108 	add.w	r1, r7, #8
 8007e1c:	4610      	mov	r0, r2
 8007e1e:	4798      	blx	r3
 8007e20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e22:	e077      	b.n	8007f14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fab1 	bl	800838e <USBD_CtlError>
            err++;
 8007e2c:	7afb      	ldrb	r3, [r7, #11]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	72fb      	strb	r3, [r7, #11]
          break;
 8007e32:	e06f      	b.n	8007f14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00b      	beq.n	8007e58 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	7c12      	ldrb	r2, [r2, #16]
 8007e4c:	f107 0108 	add.w	r1, r7, #8
 8007e50:	4610      	mov	r0, r2
 8007e52:	4798      	blx	r3
 8007e54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e56:	e05d      	b.n	8007f14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fa97 	bl	800838e <USBD_CtlError>
            err++;
 8007e60:	7afb      	ldrb	r3, [r7, #11]
 8007e62:	3301      	adds	r3, #1
 8007e64:	72fb      	strb	r3, [r7, #11]
          break;
 8007e66:	e055      	b.n	8007f14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00b      	beq.n	8007e8c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	7c12      	ldrb	r2, [r2, #16]
 8007e80:	f107 0108 	add.w	r1, r7, #8
 8007e84:	4610      	mov	r0, r2
 8007e86:	4798      	blx	r3
 8007e88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e8a:	e043      	b.n	8007f14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fa7d 	bl	800838e <USBD_CtlError>
            err++;
 8007e94:	7afb      	ldrb	r3, [r7, #11]
 8007e96:	3301      	adds	r3, #1
 8007e98:	72fb      	strb	r3, [r7, #11]
          break;
 8007e9a:	e03b      	b.n	8007f14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ea2:	695b      	ldr	r3, [r3, #20]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00b      	beq.n	8007ec0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eae:	695b      	ldr	r3, [r3, #20]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	7c12      	ldrb	r2, [r2, #16]
 8007eb4:	f107 0108 	add.w	r1, r7, #8
 8007eb8:	4610      	mov	r0, r2
 8007eba:	4798      	blx	r3
 8007ebc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ebe:	e029      	b.n	8007f14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fa63 	bl	800838e <USBD_CtlError>
            err++;
 8007ec8:	7afb      	ldrb	r3, [r7, #11]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ece:	e021      	b.n	8007f14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00b      	beq.n	8007ef4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	7c12      	ldrb	r2, [r2, #16]
 8007ee8:	f107 0108 	add.w	r1, r7, #8
 8007eec:	4610      	mov	r0, r2
 8007eee:	4798      	blx	r3
 8007ef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ef2:	e00f      	b.n	8007f14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fa49 	bl	800838e <USBD_CtlError>
            err++;
 8007efc:	7afb      	ldrb	r3, [r7, #11]
 8007efe:	3301      	adds	r3, #1
 8007f00:	72fb      	strb	r3, [r7, #11]
          break;
 8007f02:	e007      	b.n	8007f14 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007f04:	6839      	ldr	r1, [r7, #0]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 fa41 	bl	800838e <USBD_CtlError>
          err++;
 8007f0c:	7afb      	ldrb	r3, [r7, #11]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007f12:	bf00      	nop
      }
      break;
 8007f14:	e037      	b.n	8007f86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	7c1b      	ldrb	r3, [r3, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d109      	bne.n	8007f32 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f26:	f107 0208 	add.w	r2, r7, #8
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	4798      	blx	r3
 8007f2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f30:	e029      	b.n	8007f86 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fa2a 	bl	800838e <USBD_CtlError>
        err++;
 8007f3a:	7afb      	ldrb	r3, [r7, #11]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f40:	e021      	b.n	8007f86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	7c1b      	ldrb	r3, [r3, #16]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d10d      	bne.n	8007f66 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f52:	f107 0208 	add.w	r2, r7, #8
 8007f56:	4610      	mov	r0, r2
 8007f58:	4798      	blx	r3
 8007f5a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	2207      	movs	r2, #7
 8007f62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f64:	e00f      	b.n	8007f86 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007f66:	6839      	ldr	r1, [r7, #0]
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fa10 	bl	800838e <USBD_CtlError>
        err++;
 8007f6e:	7afb      	ldrb	r3, [r7, #11]
 8007f70:	3301      	adds	r3, #1
 8007f72:	72fb      	strb	r3, [r7, #11]
      break;
 8007f74:	e007      	b.n	8007f86 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fa08 	bl	800838e <USBD_CtlError>
      err++;
 8007f7e:	7afb      	ldrb	r3, [r7, #11]
 8007f80:	3301      	adds	r3, #1
 8007f82:	72fb      	strb	r3, [r7, #11]
      break;
 8007f84:	bf00      	nop
  }

  if (err != 0U)
 8007f86:	7afb      	ldrb	r3, [r7, #11]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d11e      	bne.n	8007fca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	88db      	ldrh	r3, [r3, #6]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d016      	beq.n	8007fc2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007f94:	893b      	ldrh	r3, [r7, #8]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00e      	beq.n	8007fb8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	88da      	ldrh	r2, [r3, #6]
 8007f9e:	893b      	ldrh	r3, [r7, #8]
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	bf28      	it	cs
 8007fa4:	4613      	movcs	r3, r2
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007faa:	893b      	ldrh	r3, [r7, #8]
 8007fac:	461a      	mov	r2, r3
 8007fae:	68f9      	ldr	r1, [r7, #12]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fa5d 	bl	8008470 <USBD_CtlSendData>
 8007fb6:	e009      	b.n	8007fcc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f9e7 	bl	800838e <USBD_CtlError>
 8007fc0:	e004      	b.n	8007fcc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 faae 	bl	8008524 <USBD_CtlSendStatus>
 8007fc8:	e000      	b.n	8007fcc <USBD_GetDescriptor+0x320>
    return;
 8007fca:	bf00      	nop
  }
}
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop

08007fd4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	889b      	ldrh	r3, [r3, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d131      	bne.n	800804a <USBD_SetAddress+0x76>
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	88db      	ldrh	r3, [r3, #6]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d12d      	bne.n	800804a <USBD_SetAddress+0x76>
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	885b      	ldrh	r3, [r3, #2]
 8007ff2:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ff4:	d829      	bhi.n	800804a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	885b      	ldrh	r3, [r3, #2]
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008000:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b03      	cmp	r3, #3
 800800c:	d104      	bne.n	8008018 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800800e:	6839      	ldr	r1, [r7, #0]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 f9bc 	bl	800838e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008016:	e01d      	b.n	8008054 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	7bfa      	ldrb	r2, [r7, #15]
 800801c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008020:	7bfb      	ldrb	r3, [r7, #15]
 8008022:	4619      	mov	r1, r3
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f003 fd7b 	bl	800bb20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 fa7a 	bl	8008524 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008030:	7bfb      	ldrb	r3, [r7, #15]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d004      	beq.n	8008040 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2202      	movs	r2, #2
 800803a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800803e:	e009      	b.n	8008054 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008048:	e004      	b.n	8008054 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 f99e 	bl	800838e <USBD_CtlError>
  }
}
 8008052:	bf00      	nop
 8008054:	bf00      	nop
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008066:	2300      	movs	r3, #0
 8008068:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	885b      	ldrh	r3, [r3, #2]
 800806e:	b2da      	uxtb	r2, r3
 8008070:	4b4e      	ldr	r3, [pc, #312]	@ (80081ac <USBD_SetConfig+0x150>)
 8008072:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008074:	4b4d      	ldr	r3, [pc, #308]	@ (80081ac <USBD_SetConfig+0x150>)
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d905      	bls.n	8008088 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f985 	bl	800838e <USBD_CtlError>
    return USBD_FAIL;
 8008084:	2303      	movs	r3, #3
 8008086:	e08c      	b.n	80081a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b02      	cmp	r3, #2
 8008092:	d002      	beq.n	800809a <USBD_SetConfig+0x3e>
 8008094:	2b03      	cmp	r3, #3
 8008096:	d029      	beq.n	80080ec <USBD_SetConfig+0x90>
 8008098:	e075      	b.n	8008186 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800809a:	4b44      	ldr	r3, [pc, #272]	@ (80081ac <USBD_SetConfig+0x150>)
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d020      	beq.n	80080e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80080a2:	4b42      	ldr	r3, [pc, #264]	@ (80081ac <USBD_SetConfig+0x150>)
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	461a      	mov	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080ac:	4b3f      	ldr	r3, [pc, #252]	@ (80081ac <USBD_SetConfig+0x150>)
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	4619      	mov	r1, r3
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7fe ffbf 	bl	8007036 <USBD_SetClassConfig>
 80080b8:	4603      	mov	r3, r0
 80080ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d008      	beq.n	80080d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80080c2:	6839      	ldr	r1, [r7, #0]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f962 	bl	800838e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2202      	movs	r2, #2
 80080ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080d2:	e065      	b.n	80081a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fa25 	bl	8008524 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2203      	movs	r2, #3
 80080de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80080e2:	e05d      	b.n	80081a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fa1d 	bl	8008524 <USBD_CtlSendStatus>
      break;
 80080ea:	e059      	b.n	80081a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80080ec:	4b2f      	ldr	r3, [pc, #188]	@ (80081ac <USBD_SetConfig+0x150>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d112      	bne.n	800811a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2202      	movs	r2, #2
 80080f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80080fc:	4b2b      	ldr	r3, [pc, #172]	@ (80081ac <USBD_SetConfig+0x150>)
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	461a      	mov	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008106:	4b29      	ldr	r3, [pc, #164]	@ (80081ac <USBD_SetConfig+0x150>)
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7fe ffae 	bl	800706e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fa06 	bl	8008524 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008118:	e042      	b.n	80081a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800811a:	4b24      	ldr	r3, [pc, #144]	@ (80081ac <USBD_SetConfig+0x150>)
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	461a      	mov	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	429a      	cmp	r2, r3
 8008126:	d02a      	beq.n	800817e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	b2db      	uxtb	r3, r3
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f7fe ff9c 	bl	800706e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008136:	4b1d      	ldr	r3, [pc, #116]	@ (80081ac <USBD_SetConfig+0x150>)
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	461a      	mov	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008140:	4b1a      	ldr	r3, [pc, #104]	@ (80081ac <USBD_SetConfig+0x150>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	4619      	mov	r1, r3
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7fe ff75 	bl	8007036 <USBD_SetClassConfig>
 800814c:	4603      	mov	r3, r0
 800814e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008150:	7bfb      	ldrb	r3, [r7, #15]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00f      	beq.n	8008176 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008156:	6839      	ldr	r1, [r7, #0]
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 f918 	bl	800838e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	b2db      	uxtb	r3, r3
 8008164:	4619      	mov	r1, r3
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f7fe ff81 	bl	800706e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2202      	movs	r2, #2
 8008170:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008174:	e014      	b.n	80081a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f9d4 	bl	8008524 <USBD_CtlSendStatus>
      break;
 800817c:	e010      	b.n	80081a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f9d0 	bl	8008524 <USBD_CtlSendStatus>
      break;
 8008184:	e00c      	b.n	80081a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f900 	bl	800838e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800818e:	4b07      	ldr	r3, [pc, #28]	@ (80081ac <USBD_SetConfig+0x150>)
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	4619      	mov	r1, r3
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f7fe ff6a 	bl	800706e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800819a:	2303      	movs	r3, #3
 800819c:	73fb      	strb	r3, [r7, #15]
      break;
 800819e:	bf00      	nop
  }

  return ret;
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	200002f4 	.word	0x200002f4

080081b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	88db      	ldrh	r3, [r3, #6]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d004      	beq.n	80081cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081c2:	6839      	ldr	r1, [r7, #0]
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 f8e2 	bl	800838e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80081ca:	e023      	b.n	8008214 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	dc02      	bgt.n	80081de <USBD_GetConfig+0x2e>
 80081d8:	2b00      	cmp	r3, #0
 80081da:	dc03      	bgt.n	80081e4 <USBD_GetConfig+0x34>
 80081dc:	e015      	b.n	800820a <USBD_GetConfig+0x5a>
 80081de:	2b03      	cmp	r3, #3
 80081e0:	d00b      	beq.n	80081fa <USBD_GetConfig+0x4a>
 80081e2:	e012      	b.n	800820a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	3308      	adds	r3, #8
 80081ee:	2201      	movs	r2, #1
 80081f0:	4619      	mov	r1, r3
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f93c 	bl	8008470 <USBD_CtlSendData>
        break;
 80081f8:	e00c      	b.n	8008214 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	3304      	adds	r3, #4
 80081fe:	2201      	movs	r2, #1
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f934 	bl	8008470 <USBD_CtlSendData>
        break;
 8008208:	e004      	b.n	8008214 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800820a:	6839      	ldr	r1, [r7, #0]
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f8be 	bl	800838e <USBD_CtlError>
        break;
 8008212:	bf00      	nop
}
 8008214:	bf00      	nop
 8008216:	3708      	adds	r7, #8
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800822c:	b2db      	uxtb	r3, r3
 800822e:	3b01      	subs	r3, #1
 8008230:	2b02      	cmp	r3, #2
 8008232:	d81e      	bhi.n	8008272 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	88db      	ldrh	r3, [r3, #6]
 8008238:	2b02      	cmp	r3, #2
 800823a:	d004      	beq.n	8008246 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f8a5 	bl	800838e <USBD_CtlError>
        break;
 8008244:	e01a      	b.n	800827c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2201      	movs	r2, #1
 800824a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008252:	2b00      	cmp	r3, #0
 8008254:	d005      	beq.n	8008262 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	f043 0202 	orr.w	r2, r3, #2
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	330c      	adds	r3, #12
 8008266:	2202      	movs	r2, #2
 8008268:	4619      	mov	r1, r3
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f900 	bl	8008470 <USBD_CtlSendData>
      break;
 8008270:	e004      	b.n	800827c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008272:	6839      	ldr	r1, [r7, #0]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 f88a 	bl	800838e <USBD_CtlError>
      break;
 800827a:	bf00      	nop
  }
}
 800827c:	bf00      	nop
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	885b      	ldrh	r3, [r3, #2]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d107      	bne.n	80082a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f940 	bl	8008524 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80082a4:	e013      	b.n	80082ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	885b      	ldrh	r3, [r3, #2]
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d10b      	bne.n	80082c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	889b      	ldrh	r3, [r3, #4]
 80082b2:	0a1b      	lsrs	r3, r3, #8
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	b2da      	uxtb	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f930 	bl	8008524 <USBD_CtlSendStatus>
}
 80082c4:	e003      	b.n	80082ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80082c6:	6839      	ldr	r1, [r7, #0]
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f860 	bl	800838e <USBD_CtlError>
}
 80082ce:	bf00      	nop
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b082      	sub	sp, #8
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	3b01      	subs	r3, #1
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	d80b      	bhi.n	8008306 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	885b      	ldrh	r3, [r3, #2]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d10c      	bne.n	8008310 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f910 	bl	8008524 <USBD_CtlSendStatus>
      }
      break;
 8008304:	e004      	b.n	8008310 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008306:	6839      	ldr	r1, [r7, #0]
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f840 	bl	800838e <USBD_CtlError>
      break;
 800830e:	e000      	b.n	8008312 <USBD_ClrFeature+0x3c>
      break;
 8008310:	bf00      	nop
  }
}
 8008312:	bf00      	nop
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	781a      	ldrb	r2, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	3301      	adds	r3, #1
 8008334:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	781a      	ldrb	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	3301      	adds	r3, #1
 8008342:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f7ff fa16 	bl	8007776 <SWAPBYTE>
 800834a:	4603      	mov	r3, r0
 800834c:	461a      	mov	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	3301      	adds	r3, #1
 8008356:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	3301      	adds	r3, #1
 800835c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f7ff fa09 	bl	8007776 <SWAPBYTE>
 8008364:	4603      	mov	r3, r0
 8008366:	461a      	mov	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	3301      	adds	r3, #1
 8008370:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	3301      	adds	r3, #1
 8008376:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f7ff f9fc 	bl	8007776 <SWAPBYTE>
 800837e:	4603      	mov	r3, r0
 8008380:	461a      	mov	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	80da      	strh	r2, [r3, #6]
}
 8008386:	bf00      	nop
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b082      	sub	sp, #8
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008398:	2180      	movs	r1, #128	@ 0x80
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f003 fb56 	bl	800ba4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80083a0:	2100      	movs	r1, #0
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f003 fb52 	bl	800ba4c <USBD_LL_StallEP>
}
 80083a8:	bf00      	nop
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80083bc:	2300      	movs	r3, #0
 80083be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d036      	beq.n	8008434 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80083ca:	6938      	ldr	r0, [r7, #16]
 80083cc:	f000 f836 	bl	800843c <USBD_GetLen>
 80083d0:	4603      	mov	r3, r0
 80083d2:	3301      	adds	r3, #1
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	005b      	lsls	r3, r3, #1
 80083d8:	b29a      	uxth	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80083de:	7dfb      	ldrb	r3, [r7, #23]
 80083e0:	68ba      	ldr	r2, [r7, #8]
 80083e2:	4413      	add	r3, r2
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	7812      	ldrb	r2, [r2, #0]
 80083e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	3301      	adds	r3, #1
 80083ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083f0:	7dfb      	ldrb	r3, [r7, #23]
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	4413      	add	r3, r2
 80083f6:	2203      	movs	r2, #3
 80083f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80083fa:	7dfb      	ldrb	r3, [r7, #23]
 80083fc:	3301      	adds	r3, #1
 80083fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008400:	e013      	b.n	800842a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008402:	7dfb      	ldrb	r3, [r7, #23]
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	4413      	add	r3, r2
 8008408:	693a      	ldr	r2, [r7, #16]
 800840a:	7812      	ldrb	r2, [r2, #0]
 800840c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	3301      	adds	r3, #1
 8008412:	613b      	str	r3, [r7, #16]
    idx++;
 8008414:	7dfb      	ldrb	r3, [r7, #23]
 8008416:	3301      	adds	r3, #1
 8008418:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800841a:	7dfb      	ldrb	r3, [r7, #23]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	4413      	add	r3, r2
 8008420:	2200      	movs	r2, #0
 8008422:	701a      	strb	r2, [r3, #0]
    idx++;
 8008424:	7dfb      	ldrb	r3, [r7, #23]
 8008426:	3301      	adds	r3, #1
 8008428:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1e7      	bne.n	8008402 <USBD_GetString+0x52>
 8008432:	e000      	b.n	8008436 <USBD_GetString+0x86>
    return;
 8008434:	bf00      	nop
  }
}
 8008436:	3718      	adds	r7, #24
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008444:	2300      	movs	r3, #0
 8008446:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800844c:	e005      	b.n	800845a <USBD_GetLen+0x1e>
  {
    len++;
 800844e:	7bfb      	ldrb	r3, [r7, #15]
 8008450:	3301      	adds	r3, #1
 8008452:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	3301      	adds	r3, #1
 8008458:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1f5      	bne.n	800844e <USBD_GetLen+0x12>
  }

  return len;
 8008462:	7bfb      	ldrb	r3, [r7, #15]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3714      	adds	r7, #20
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2202      	movs	r2, #2
 8008480:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	2100      	movs	r1, #0
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f003 fb61 	bl	800bb5e <USBD_LL_Transmit>

  return USBD_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b084      	sub	sp, #16
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	60f8      	str	r0, [r7, #12]
 80084ae:	60b9      	str	r1, [r7, #8]
 80084b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	2100      	movs	r1, #0
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f003 fb50 	bl	800bb5e <USBD_LL_Transmit>

  return USBD_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2203      	movs	r2, #3
 80084d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	2100      	movs	r1, #0
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f003 fb54 	bl	800bba0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b084      	sub	sp, #16
 8008506:	af00      	add	r7, sp, #0
 8008508:	60f8      	str	r0, [r7, #12]
 800850a:	60b9      	str	r1, [r7, #8]
 800850c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	2100      	movs	r1, #0
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f003 fb43 	bl	800bba0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2204      	movs	r2, #4
 8008530:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008534:	2300      	movs	r3, #0
 8008536:	2200      	movs	r2, #0
 8008538:	2100      	movs	r1, #0
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f003 fb0f 	bl	800bb5e <USBD_LL_Transmit>

  return USBD_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b082      	sub	sp, #8
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2205      	movs	r2, #5
 8008556:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800855a:	2300      	movs	r3, #0
 800855c:	2200      	movs	r2, #0
 800855e:	2100      	movs	r1, #0
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f003 fb1d 	bl	800bba0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3708      	adds	r7, #8
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008570:	b480      	push	{r7}
 8008572:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008574:	bf00      	nop
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
	...

08008580 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008586:	f3ef 8305 	mrs	r3, IPSR
 800858a:	60bb      	str	r3, [r7, #8]
  return(result);
 800858c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800858e:	2b00      	cmp	r3, #0
 8008590:	d10f      	bne.n	80085b2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008592:	f3ef 8310 	mrs	r3, PRIMASK
 8008596:	607b      	str	r3, [r7, #4]
  return(result);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d105      	bne.n	80085aa <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800859e:	f3ef 8311 	mrs	r3, BASEPRI
 80085a2:	603b      	str	r3, [r7, #0]
  return(result);
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d007      	beq.n	80085ba <osKernelInitialize+0x3a>
 80085aa:	4b0e      	ldr	r3, [pc, #56]	@ (80085e4 <osKernelInitialize+0x64>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d103      	bne.n	80085ba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80085b2:	f06f 0305 	mvn.w	r3, #5
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	e00c      	b.n	80085d4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80085ba:	4b0a      	ldr	r3, [pc, #40]	@ (80085e4 <osKernelInitialize+0x64>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d105      	bne.n	80085ce <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80085c2:	4b08      	ldr	r3, [pc, #32]	@ (80085e4 <osKernelInitialize+0x64>)
 80085c4:	2201      	movs	r2, #1
 80085c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	60fb      	str	r3, [r7, #12]
 80085cc:	e002      	b.n	80085d4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80085ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80085d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80085d4:	68fb      	ldr	r3, [r7, #12]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	200002f8 	.word	0x200002f8

080085e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085ee:	f3ef 8305 	mrs	r3, IPSR
 80085f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80085f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d10f      	bne.n	800861a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085fa:	f3ef 8310 	mrs	r3, PRIMASK
 80085fe:	607b      	str	r3, [r7, #4]
  return(result);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d105      	bne.n	8008612 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008606:	f3ef 8311 	mrs	r3, BASEPRI
 800860a:	603b      	str	r3, [r7, #0]
  return(result);
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d007      	beq.n	8008622 <osKernelStart+0x3a>
 8008612:	4b0f      	ldr	r3, [pc, #60]	@ (8008650 <osKernelStart+0x68>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b02      	cmp	r3, #2
 8008618:	d103      	bne.n	8008622 <osKernelStart+0x3a>
    stat = osErrorISR;
 800861a:	f06f 0305 	mvn.w	r3, #5
 800861e:	60fb      	str	r3, [r7, #12]
 8008620:	e010      	b.n	8008644 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008622:	4b0b      	ldr	r3, [pc, #44]	@ (8008650 <osKernelStart+0x68>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2b01      	cmp	r3, #1
 8008628:	d109      	bne.n	800863e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800862a:	f7ff ffa1 	bl	8008570 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800862e:	4b08      	ldr	r3, [pc, #32]	@ (8008650 <osKernelStart+0x68>)
 8008630:	2202      	movs	r2, #2
 8008632:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008634:	f001 f8e2 	bl	80097fc <vTaskStartScheduler>
      stat = osOK;
 8008638:	2300      	movs	r3, #0
 800863a:	60fb      	str	r3, [r7, #12]
 800863c:	e002      	b.n	8008644 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800863e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008642:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008644:	68fb      	ldr	r3, [r7, #12]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	200002f8 	.word	0x200002f8

08008654 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008654:	b580      	push	{r7, lr}
 8008656:	b090      	sub	sp, #64	@ 0x40
 8008658:	af04      	add	r7, sp, #16
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008660:	2300      	movs	r3, #0
 8008662:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008664:	f3ef 8305 	mrs	r3, IPSR
 8008668:	61fb      	str	r3, [r7, #28]
  return(result);
 800866a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800866c:	2b00      	cmp	r3, #0
 800866e:	f040 808f 	bne.w	8008790 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008672:	f3ef 8310 	mrs	r3, PRIMASK
 8008676:	61bb      	str	r3, [r7, #24]
  return(result);
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d105      	bne.n	800868a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800867e:	f3ef 8311 	mrs	r3, BASEPRI
 8008682:	617b      	str	r3, [r7, #20]
  return(result);
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d003      	beq.n	8008692 <osThreadNew+0x3e>
 800868a:	4b44      	ldr	r3, [pc, #272]	@ (800879c <osThreadNew+0x148>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b02      	cmp	r3, #2
 8008690:	d07e      	beq.n	8008790 <osThreadNew+0x13c>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d07b      	beq.n	8008790 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008698:	2380      	movs	r3, #128	@ 0x80
 800869a:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800869c:	2318      	movs	r3, #24
 800869e:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80086a0:	2300      	movs	r3, #0
 80086a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80086a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80086a8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d045      	beq.n	800873c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d002      	beq.n	80086be <osThreadNew+0x6a>
        name = attr->name;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d002      	beq.n	80086cc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80086cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d008      	beq.n	80086e4 <osThreadNew+0x90>
 80086d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d4:	2b38      	cmp	r3, #56	@ 0x38
 80086d6:	d805      	bhi.n	80086e4 <osThreadNew+0x90>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	f003 0301 	and.w	r3, r3, #1
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d001      	beq.n	80086e8 <osThreadNew+0x94>
        return (NULL);
 80086e4:	2300      	movs	r3, #0
 80086e6:	e054      	b.n	8008792 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	695b      	ldr	r3, [r3, #20]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d003      	beq.n	80086f8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	695b      	ldr	r3, [r3, #20]
 80086f4:	089b      	lsrs	r3, r3, #2
 80086f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00e      	beq.n	800871e <osThreadNew+0xca>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	2ba7      	cmp	r3, #167	@ 0xa7
 8008706:	d90a      	bls.n	800871e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800870c:	2b00      	cmp	r3, #0
 800870e:	d006      	beq.n	800871e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	695b      	ldr	r3, [r3, #20]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d002      	beq.n	800871e <osThreadNew+0xca>
        mem = 1;
 8008718:	2301      	movs	r3, #1
 800871a:	623b      	str	r3, [r7, #32]
 800871c:	e010      	b.n	8008740 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d10c      	bne.n	8008740 <osThreadNew+0xec>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d108      	bne.n	8008740 <osThreadNew+0xec>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d104      	bne.n	8008740 <osThreadNew+0xec>
          mem = 0;
 8008736:	2300      	movs	r3, #0
 8008738:	623b      	str	r3, [r7, #32]
 800873a:	e001      	b.n	8008740 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800873c:	2300      	movs	r3, #0
 800873e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d110      	bne.n	8008768 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800874e:	9202      	str	r2, [sp, #8]
 8008750:	9301      	str	r3, [sp, #4]
 8008752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800875a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f000 fe4f 	bl	8009400 <xTaskCreateStatic>
 8008762:	4603      	mov	r3, r0
 8008764:	613b      	str	r3, [r7, #16]
 8008766:	e013      	b.n	8008790 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008768:	6a3b      	ldr	r3, [r7, #32]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d110      	bne.n	8008790 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800876e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008770:	b29a      	uxth	r2, r3
 8008772:	f107 0310 	add.w	r3, r7, #16
 8008776:	9301      	str	r3, [sp, #4]
 8008778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f000 fea3 	bl	80094cc <xTaskCreate>
 8008786:	4603      	mov	r3, r0
 8008788:	2b01      	cmp	r3, #1
 800878a:	d001      	beq.n	8008790 <osThreadNew+0x13c>
          hTask = NULL;
 800878c:	2300      	movs	r3, #0
 800878e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008790:	693b      	ldr	r3, [r7, #16]
}
 8008792:	4618      	mov	r0, r3
 8008794:	3730      	adds	r7, #48	@ 0x30
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	200002f8 	.word	0x200002f8

080087a0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087a8:	f3ef 8305 	mrs	r3, IPSR
 80087ac:	613b      	str	r3, [r7, #16]
  return(result);
 80087ae:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10f      	bne.n	80087d4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087b4:	f3ef 8310 	mrs	r3, PRIMASK
 80087b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d105      	bne.n	80087cc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80087c0:	f3ef 8311 	mrs	r3, BASEPRI
 80087c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d007      	beq.n	80087dc <osDelay+0x3c>
 80087cc:	4b0a      	ldr	r3, [pc, #40]	@ (80087f8 <osDelay+0x58>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d103      	bne.n	80087dc <osDelay+0x3c>
    stat = osErrorISR;
 80087d4:	f06f 0305 	mvn.w	r3, #5
 80087d8:	617b      	str	r3, [r7, #20]
 80087da:	e007      	b.n	80087ec <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80087dc:	2300      	movs	r3, #0
 80087de:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d002      	beq.n	80087ec <osDelay+0x4c>
      vTaskDelay(ticks);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 ffd0 	bl	800978c <vTaskDelay>
    }
  }

  return (stat);
 80087ec:	697b      	ldr	r3, [r7, #20]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3718      	adds	r7, #24
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	200002f8 	.word	0x200002f8

080087fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	4a07      	ldr	r2, [pc, #28]	@ (8008828 <vApplicationGetIdleTaskMemory+0x2c>)
 800880c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	4a06      	ldr	r2, [pc, #24]	@ (800882c <vApplicationGetIdleTaskMemory+0x30>)
 8008812:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2280      	movs	r2, #128	@ 0x80
 8008818:	601a      	str	r2, [r3, #0]
}
 800881a:	bf00      	nop
 800881c:	3714      	adds	r7, #20
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr
 8008826:	bf00      	nop
 8008828:	200002fc 	.word	0x200002fc
 800882c:	200003a4 	.word	0x200003a4

08008830 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	4a07      	ldr	r2, [pc, #28]	@ (800885c <vApplicationGetTimerTaskMemory+0x2c>)
 8008840:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	4a06      	ldr	r2, [pc, #24]	@ (8008860 <vApplicationGetTimerTaskMemory+0x30>)
 8008846:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800884e:	601a      	str	r2, [r3, #0]
}
 8008850:	bf00      	nop
 8008852:	3714      	adds	r7, #20
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr
 800885c:	200005a4 	.word	0x200005a4
 8008860:	2000064c 	.word	0x2000064c

08008864 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f103 0208 	add.w	r2, r3, #8
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800887c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f103 0208 	add.w	r2, r3, #8
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f103 0208 	add.w	r2, r3, #8
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80088b2:	bf00      	nop
 80088b4:	370c      	adds	r7, #12
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr

080088be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80088be:	b480      	push	{r7}
 80088c0:	b085      	sub	sp, #20
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	689a      	ldr	r2, [r3, #8]
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	683a      	ldr	r2, [r7, #0]
 80088e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	683a      	ldr	r2, [r7, #0]
 80088e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	1c5a      	adds	r2, r3, #1
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	601a      	str	r2, [r3, #0]
}
 80088fa:	bf00      	nop
 80088fc:	3714      	adds	r7, #20
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr

08008906 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008906:	b480      	push	{r7}
 8008908:	b085      	sub	sp, #20
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
 800890e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800891c:	d103      	bne.n	8008926 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	60fb      	str	r3, [r7, #12]
 8008924:	e00c      	b.n	8008940 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	3308      	adds	r3, #8
 800892a:	60fb      	str	r3, [r7, #12]
 800892c:	e002      	b.n	8008934 <vListInsert+0x2e>
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	60fb      	str	r3, [r7, #12]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	429a      	cmp	r2, r3
 800893e:	d2f6      	bcs.n	800892e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	685a      	ldr	r2, [r3, #4]
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	683a      	ldr	r2, [r7, #0]
 800894e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	683a      	ldr	r2, [r7, #0]
 800895a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	1c5a      	adds	r2, r3, #1
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	601a      	str	r2, [r3, #0]
}
 800896c:	bf00      	nop
 800896e:	3714      	adds	r7, #20
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	6892      	ldr	r2, [r2, #8]
 800898e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	6852      	ldr	r2, [r2, #4]
 8008998:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d103      	bne.n	80089ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	689a      	ldr	r2, [r3, #8]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	1e5a      	subs	r2, r3, #1
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10d      	bne.n	80089fc <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80089e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e4:	b672      	cpsid	i
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	b662      	cpsie	i
 80089f4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80089f6:	bf00      	nop
 80089f8:	bf00      	nop
 80089fa:	e7fd      	b.n	80089f8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80089fc:	f002 f8d6 	bl	800abac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a08:	68f9      	ldr	r1, [r7, #12]
 8008a0a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008a0c:	fb01 f303 	mul.w	r3, r1, r3
 8008a10:	441a      	add	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	68f9      	ldr	r1, [r7, #12]
 8008a30:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008a32:	fb01 f303 	mul.w	r3, r1, r3
 8008a36:	441a      	add	r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	22ff      	movs	r2, #255	@ 0xff
 8008a40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	22ff      	movs	r2, #255	@ 0xff
 8008a48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d114      	bne.n	8008a7c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d01a      	beq.n	8008a90 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	3310      	adds	r3, #16
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f001 f978 	bl	8009d54 <xTaskRemoveFromEventList>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d012      	beq.n	8008a90 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8008aa0 <xQueueGenericReset+0xd4>)
 8008a6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a70:	601a      	str	r2, [r3, #0]
 8008a72:	f3bf 8f4f 	dsb	sy
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	e009      	b.n	8008a90 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	3310      	adds	r3, #16
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7ff feef 	bl	8008864 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	3324      	adds	r3, #36	@ 0x24
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7ff feea 	bl	8008864 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008a90:	f002 f8c2 	bl	800ac18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008a94:	2301      	movs	r3, #1
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	e000ed04 	.word	0xe000ed04

08008aa4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b08e      	sub	sp, #56	@ 0x38
 8008aa8:	af02      	add	r7, sp, #8
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
 8008ab0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10d      	bne.n	8008ad4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8008ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008abc:	b672      	cpsid	i
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	b662      	cpsie	i
 8008acc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008ace:	bf00      	nop
 8008ad0:	bf00      	nop
 8008ad2:	e7fd      	b.n	8008ad0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d10d      	bne.n	8008af6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8008ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ade:	b672      	cpsid	i
 8008ae0:	f383 8811 	msr	BASEPRI, r3
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	b662      	cpsie	i
 8008aee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008af0:	bf00      	nop
 8008af2:	bf00      	nop
 8008af4:	e7fd      	b.n	8008af2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d002      	beq.n	8008b02 <xQueueGenericCreateStatic+0x5e>
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d001      	beq.n	8008b06 <xQueueGenericCreateStatic+0x62>
 8008b02:	2301      	movs	r3, #1
 8008b04:	e000      	b.n	8008b08 <xQueueGenericCreateStatic+0x64>
 8008b06:	2300      	movs	r3, #0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10d      	bne.n	8008b28 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8008b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b10:	b672      	cpsid	i
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	b662      	cpsie	i
 8008b20:	623b      	str	r3, [r7, #32]
}
 8008b22:	bf00      	nop
 8008b24:	bf00      	nop
 8008b26:	e7fd      	b.n	8008b24 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d102      	bne.n	8008b34 <xQueueGenericCreateStatic+0x90>
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d101      	bne.n	8008b38 <xQueueGenericCreateStatic+0x94>
 8008b34:	2301      	movs	r3, #1
 8008b36:	e000      	b.n	8008b3a <xQueueGenericCreateStatic+0x96>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d10d      	bne.n	8008b5a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8008b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b42:	b672      	cpsid	i
 8008b44:	f383 8811 	msr	BASEPRI, r3
 8008b48:	f3bf 8f6f 	isb	sy
 8008b4c:	f3bf 8f4f 	dsb	sy
 8008b50:	b662      	cpsie	i
 8008b52:	61fb      	str	r3, [r7, #28]
}
 8008b54:	bf00      	nop
 8008b56:	bf00      	nop
 8008b58:	e7fd      	b.n	8008b56 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008b5a:	2350      	movs	r3, #80	@ 0x50
 8008b5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	2b50      	cmp	r3, #80	@ 0x50
 8008b62:	d00d      	beq.n	8008b80 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8008b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b68:	b672      	cpsid	i
 8008b6a:	f383 8811 	msr	BASEPRI, r3
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f3bf 8f4f 	dsb	sy
 8008b76:	b662      	cpsie	i
 8008b78:	61bb      	str	r3, [r7, #24]
}
 8008b7a:	bf00      	nop
 8008b7c:	bf00      	nop
 8008b7e:	e7fd      	b.n	8008b7c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008b80:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d00d      	beq.n	8008ba8 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b94:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	68b9      	ldr	r1, [r7, #8]
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f000 f805 	bl	8008bb2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3730      	adds	r7, #48	@ 0x30
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b084      	sub	sp, #16
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	60f8      	str	r0, [r7, #12]
 8008bba:	60b9      	str	r1, [r7, #8]
 8008bbc:	607a      	str	r2, [r7, #4]
 8008bbe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d103      	bne.n	8008bce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	69ba      	ldr	r2, [r7, #24]
 8008bca:	601a      	str	r2, [r3, #0]
 8008bcc:	e002      	b.n	8008bd4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008be0:	2101      	movs	r1, #1
 8008be2:	69b8      	ldr	r0, [r7, #24]
 8008be4:	f7ff fef2 	bl	80089cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	78fa      	ldrb	r2, [r7, #3]
 8008bec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008bf0:	bf00      	nop
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b08e      	sub	sp, #56	@ 0x38
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
 8008c04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008c06:	2300      	movs	r3, #0
 8008c08:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10d      	bne.n	8008c30 <xQueueGenericSend+0x38>
	__asm volatile
 8008c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c18:	b672      	cpsid	i
 8008c1a:	f383 8811 	msr	BASEPRI, r3
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	b662      	cpsie	i
 8008c28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008c2a:	bf00      	nop
 8008c2c:	bf00      	nop
 8008c2e:	e7fd      	b.n	8008c2c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d103      	bne.n	8008c3e <xQueueGenericSend+0x46>
 8008c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d101      	bne.n	8008c42 <xQueueGenericSend+0x4a>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e000      	b.n	8008c44 <xQueueGenericSend+0x4c>
 8008c42:	2300      	movs	r3, #0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10d      	bne.n	8008c64 <xQueueGenericSend+0x6c>
	__asm volatile
 8008c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c4c:	b672      	cpsid	i
 8008c4e:	f383 8811 	msr	BASEPRI, r3
 8008c52:	f3bf 8f6f 	isb	sy
 8008c56:	f3bf 8f4f 	dsb	sy
 8008c5a:	b662      	cpsie	i
 8008c5c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008c5e:	bf00      	nop
 8008c60:	bf00      	nop
 8008c62:	e7fd      	b.n	8008c60 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d103      	bne.n	8008c72 <xQueueGenericSend+0x7a>
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d101      	bne.n	8008c76 <xQueueGenericSend+0x7e>
 8008c72:	2301      	movs	r3, #1
 8008c74:	e000      	b.n	8008c78 <xQueueGenericSend+0x80>
 8008c76:	2300      	movs	r3, #0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10d      	bne.n	8008c98 <xQueueGenericSend+0xa0>
	__asm volatile
 8008c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c80:	b672      	cpsid	i
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	b662      	cpsie	i
 8008c90:	623b      	str	r3, [r7, #32]
}
 8008c92:	bf00      	nop
 8008c94:	bf00      	nop
 8008c96:	e7fd      	b.n	8008c94 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c98:	f001 fa2a 	bl	800a0f0 <xTaskGetSchedulerState>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d102      	bne.n	8008ca8 <xQueueGenericSend+0xb0>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d101      	bne.n	8008cac <xQueueGenericSend+0xb4>
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e000      	b.n	8008cae <xQueueGenericSend+0xb6>
 8008cac:	2300      	movs	r3, #0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10d      	bne.n	8008cce <xQueueGenericSend+0xd6>
	__asm volatile
 8008cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb6:	b672      	cpsid	i
 8008cb8:	f383 8811 	msr	BASEPRI, r3
 8008cbc:	f3bf 8f6f 	isb	sy
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	b662      	cpsie	i
 8008cc6:	61fb      	str	r3, [r7, #28]
}
 8008cc8:	bf00      	nop
 8008cca:	bf00      	nop
 8008ccc:	e7fd      	b.n	8008cca <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cce:	f001 ff6d 	bl	800abac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d302      	bcc.n	8008ce4 <xQueueGenericSend+0xec>
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d129      	bne.n	8008d38 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ce4:	683a      	ldr	r2, [r7, #0]
 8008ce6:	68b9      	ldr	r1, [r7, #8]
 8008ce8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cea:	f000 fa1b 	bl	8009124 <prvCopyDataToQueue>
 8008cee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d010      	beq.n	8008d1a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cfa:	3324      	adds	r3, #36	@ 0x24
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f001 f829 	bl	8009d54 <xTaskRemoveFromEventList>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d013      	beq.n	8008d30 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008d08:	4b3f      	ldr	r3, [pc, #252]	@ (8008e08 <xQueueGenericSend+0x210>)
 8008d0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d0e:	601a      	str	r2, [r3, #0]
 8008d10:	f3bf 8f4f 	dsb	sy
 8008d14:	f3bf 8f6f 	isb	sy
 8008d18:	e00a      	b.n	8008d30 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d007      	beq.n	8008d30 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008d20:	4b39      	ldr	r3, [pc, #228]	@ (8008e08 <xQueueGenericSend+0x210>)
 8008d22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d26:	601a      	str	r2, [r3, #0]
 8008d28:	f3bf 8f4f 	dsb	sy
 8008d2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008d30:	f001 ff72 	bl	800ac18 <vPortExitCritical>
				return pdPASS;
 8008d34:	2301      	movs	r3, #1
 8008d36:	e063      	b.n	8008e00 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d103      	bne.n	8008d46 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d3e:	f001 ff6b 	bl	800ac18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008d42:	2300      	movs	r3, #0
 8008d44:	e05c      	b.n	8008e00 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d106      	bne.n	8008d5a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d4c:	f107 0314 	add.w	r3, r7, #20
 8008d50:	4618      	mov	r0, r3
 8008d52:	f001 f865 	bl	8009e20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d56:	2301      	movs	r3, #1
 8008d58:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d5a:	f001 ff5d 	bl	800ac18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d5e:	f000 fdc1 	bl	80098e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d62:	f001 ff23 	bl	800abac <vPortEnterCritical>
 8008d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d6c:	b25b      	sxtb	r3, r3
 8008d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d72:	d103      	bne.n	8008d7c <xQueueGenericSend+0x184>
 8008d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d76:	2200      	movs	r2, #0
 8008d78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d82:	b25b      	sxtb	r3, r3
 8008d84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d88:	d103      	bne.n	8008d92 <xQueueGenericSend+0x19a>
 8008d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d92:	f001 ff41 	bl	800ac18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d96:	1d3a      	adds	r2, r7, #4
 8008d98:	f107 0314 	add.w	r3, r7, #20
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f001 f854 	bl	8009e4c <xTaskCheckForTimeOut>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d124      	bne.n	8008df4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008daa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008dac:	f000 fab2 	bl	8009314 <prvIsQueueFull>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d018      	beq.n	8008de8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db8:	3310      	adds	r3, #16
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f000 ff72 	bl	8009ca8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008dc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008dc6:	f000 fa3d 	bl	8009244 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008dca:	f000 fd99 	bl	8009900 <xTaskResumeAll>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f47f af7c 	bne.w	8008cce <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8008dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8008e08 <xQueueGenericSend+0x210>)
 8008dd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ddc:	601a      	str	r2, [r3, #0]
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	f3bf 8f6f 	isb	sy
 8008de6:	e772      	b.n	8008cce <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008de8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008dea:	f000 fa2b 	bl	8009244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008dee:	f000 fd87 	bl	8009900 <xTaskResumeAll>
 8008df2:	e76c      	b.n	8008cce <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008df4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008df6:	f000 fa25 	bl	8009244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008dfa:	f000 fd81 	bl	8009900 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008dfe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3738      	adds	r7, #56	@ 0x38
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	e000ed04 	.word	0xe000ed04

08008e0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b08e      	sub	sp, #56	@ 0x38
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]
 8008e18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10d      	bne.n	8008e40 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e28:	b672      	cpsid	i
 8008e2a:	f383 8811 	msr	BASEPRI, r3
 8008e2e:	f3bf 8f6f 	isb	sy
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	b662      	cpsie	i
 8008e38:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008e3a:	bf00      	nop
 8008e3c:	bf00      	nop
 8008e3e:	e7fd      	b.n	8008e3c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d103      	bne.n	8008e4e <xQueueGenericSendFromISR+0x42>
 8008e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <xQueueGenericSendFromISR+0x46>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e000      	b.n	8008e54 <xQueueGenericSendFromISR+0x48>
 8008e52:	2300      	movs	r3, #0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10d      	bne.n	8008e74 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8008e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e5c:	b672      	cpsid	i
 8008e5e:	f383 8811 	msr	BASEPRI, r3
 8008e62:	f3bf 8f6f 	isb	sy
 8008e66:	f3bf 8f4f 	dsb	sy
 8008e6a:	b662      	cpsie	i
 8008e6c:	623b      	str	r3, [r7, #32]
}
 8008e6e:	bf00      	nop
 8008e70:	bf00      	nop
 8008e72:	e7fd      	b.n	8008e70 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d103      	bne.n	8008e82 <xQueueGenericSendFromISR+0x76>
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d101      	bne.n	8008e86 <xQueueGenericSendFromISR+0x7a>
 8008e82:	2301      	movs	r3, #1
 8008e84:	e000      	b.n	8008e88 <xQueueGenericSendFromISR+0x7c>
 8008e86:	2300      	movs	r3, #0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d10d      	bne.n	8008ea8 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8008e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e90:	b672      	cpsid	i
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	b662      	cpsie	i
 8008ea0:	61fb      	str	r3, [r7, #28]
}
 8008ea2:	bf00      	nop
 8008ea4:	bf00      	nop
 8008ea6:	e7fd      	b.n	8008ea4 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ea8:	f001 ff68 	bl	800ad7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008eac:	f3ef 8211 	mrs	r2, BASEPRI
 8008eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb4:	b672      	cpsid	i
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	b662      	cpsie	i
 8008ec4:	61ba      	str	r2, [r7, #24]
 8008ec6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008ec8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ece:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d302      	bcc.n	8008ede <xQueueGenericSendFromISR+0xd2>
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d12c      	bne.n	8008f38 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ee4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ee8:	683a      	ldr	r2, [r7, #0]
 8008eea:	68b9      	ldr	r1, [r7, #8]
 8008eec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008eee:	f000 f919 	bl	8009124 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008ef2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008ef6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008efa:	d112      	bne.n	8008f22 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d016      	beq.n	8008f32 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f06:	3324      	adds	r3, #36	@ 0x24
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f000 ff23 	bl	8009d54 <xTaskRemoveFromEventList>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00e      	beq.n	8008f32 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00b      	beq.n	8008f32 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	601a      	str	r2, [r3, #0]
 8008f20:	e007      	b.n	8008f32 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008f26:	3301      	adds	r3, #1
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	b25a      	sxtb	r2, r3
 8008f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008f32:	2301      	movs	r3, #1
 8008f34:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8008f36:	e001      	b.n	8008f3c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f3e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008f46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3738      	adds	r7, #56	@ 0x38
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
	...

08008f54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b08c      	sub	sp, #48	@ 0x30
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008f60:	2300      	movs	r3, #0
 8008f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10d      	bne.n	8008f8a <xQueueReceive+0x36>
	__asm volatile
 8008f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f72:	b672      	cpsid	i
 8008f74:	f383 8811 	msr	BASEPRI, r3
 8008f78:	f3bf 8f6f 	isb	sy
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	b662      	cpsie	i
 8008f82:	623b      	str	r3, [r7, #32]
}
 8008f84:	bf00      	nop
 8008f86:	bf00      	nop
 8008f88:	e7fd      	b.n	8008f86 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d103      	bne.n	8008f98 <xQueueReceive+0x44>
 8008f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d101      	bne.n	8008f9c <xQueueReceive+0x48>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e000      	b.n	8008f9e <xQueueReceive+0x4a>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10d      	bne.n	8008fbe <xQueueReceive+0x6a>
	__asm volatile
 8008fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa6:	b672      	cpsid	i
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	b662      	cpsie	i
 8008fb6:	61fb      	str	r3, [r7, #28]
}
 8008fb8:	bf00      	nop
 8008fba:	bf00      	nop
 8008fbc:	e7fd      	b.n	8008fba <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008fbe:	f001 f897 	bl	800a0f0 <xTaskGetSchedulerState>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d102      	bne.n	8008fce <xQueueReceive+0x7a>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d101      	bne.n	8008fd2 <xQueueReceive+0x7e>
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e000      	b.n	8008fd4 <xQueueReceive+0x80>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10d      	bne.n	8008ff4 <xQueueReceive+0xa0>
	__asm volatile
 8008fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fdc:	b672      	cpsid	i
 8008fde:	f383 8811 	msr	BASEPRI, r3
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	f3bf 8f4f 	dsb	sy
 8008fea:	b662      	cpsie	i
 8008fec:	61bb      	str	r3, [r7, #24]
}
 8008fee:	bf00      	nop
 8008ff0:	bf00      	nop
 8008ff2:	e7fd      	b.n	8008ff0 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ff4:	f001 fdda 	bl	800abac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ffc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009000:	2b00      	cmp	r3, #0
 8009002:	d01f      	beq.n	8009044 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009004:	68b9      	ldr	r1, [r7, #8]
 8009006:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009008:	f000 f8f6 	bl	80091f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800900c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800900e:	1e5a      	subs	r2, r3, #1
 8009010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009012:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00f      	beq.n	800903c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800901c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800901e:	3310      	adds	r3, #16
 8009020:	4618      	mov	r0, r3
 8009022:	f000 fe97 	bl	8009d54 <xTaskRemoveFromEventList>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d007      	beq.n	800903c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800902c:	4b3c      	ldr	r3, [pc, #240]	@ (8009120 <xQueueReceive+0x1cc>)
 800902e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009032:	601a      	str	r2, [r3, #0]
 8009034:	f3bf 8f4f 	dsb	sy
 8009038:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800903c:	f001 fdec 	bl	800ac18 <vPortExitCritical>
				return pdPASS;
 8009040:	2301      	movs	r3, #1
 8009042:	e069      	b.n	8009118 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d103      	bne.n	8009052 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800904a:	f001 fde5 	bl	800ac18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800904e:	2300      	movs	r3, #0
 8009050:	e062      	b.n	8009118 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009054:	2b00      	cmp	r3, #0
 8009056:	d106      	bne.n	8009066 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009058:	f107 0310 	add.w	r3, r7, #16
 800905c:	4618      	mov	r0, r3
 800905e:	f000 fedf 	bl	8009e20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009062:	2301      	movs	r3, #1
 8009064:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009066:	f001 fdd7 	bl	800ac18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800906a:	f000 fc3b 	bl	80098e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800906e:	f001 fd9d 	bl	800abac <vPortEnterCritical>
 8009072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009074:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009078:	b25b      	sxtb	r3, r3
 800907a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800907e:	d103      	bne.n	8009088 <xQueueReceive+0x134>
 8009080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009082:	2200      	movs	r2, #0
 8009084:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800908a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800908e:	b25b      	sxtb	r3, r3
 8009090:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009094:	d103      	bne.n	800909e <xQueueReceive+0x14a>
 8009096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009098:	2200      	movs	r2, #0
 800909a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800909e:	f001 fdbb 	bl	800ac18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80090a2:	1d3a      	adds	r2, r7, #4
 80090a4:	f107 0310 	add.w	r3, r7, #16
 80090a8:	4611      	mov	r1, r2
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 fece 	bl	8009e4c <xTaskCheckForTimeOut>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d123      	bne.n	80090fe <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090b8:	f000 f916 	bl	80092e8 <prvIsQueueEmpty>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d017      	beq.n	80090f2 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80090c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090c4:	3324      	adds	r3, #36	@ 0x24
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	4611      	mov	r1, r2
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 fdec 	bl	8009ca8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80090d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090d2:	f000 f8b7 	bl	8009244 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80090d6:	f000 fc13 	bl	8009900 <xTaskResumeAll>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d189      	bne.n	8008ff4 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80090e0:	4b0f      	ldr	r3, [pc, #60]	@ (8009120 <xQueueReceive+0x1cc>)
 80090e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090e6:	601a      	str	r2, [r3, #0]
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	f3bf 8f6f 	isb	sy
 80090f0:	e780      	b.n	8008ff4 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80090f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090f4:	f000 f8a6 	bl	8009244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090f8:	f000 fc02 	bl	8009900 <xTaskResumeAll>
 80090fc:	e77a      	b.n	8008ff4 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80090fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009100:	f000 f8a0 	bl	8009244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009104:	f000 fbfc 	bl	8009900 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009108:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800910a:	f000 f8ed 	bl	80092e8 <prvIsQueueEmpty>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	f43f af6f 	beq.w	8008ff4 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009116:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009118:	4618      	mov	r0, r3
 800911a:	3730      	adds	r7, #48	@ 0x30
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	e000ed04 	.word	0xe000ed04

08009124 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b086      	sub	sp, #24
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009130:	2300      	movs	r3, #0
 8009132:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009138:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800913e:	2b00      	cmp	r3, #0
 8009140:	d10d      	bne.n	800915e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d14d      	bne.n	80091e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	4618      	mov	r0, r3
 8009150:	f000 ffec 	bl	800a12c <xTaskPriorityDisinherit>
 8009154:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	609a      	str	r2, [r3, #8]
 800915c:	e043      	b.n	80091e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d119      	bne.n	8009198 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6858      	ldr	r0, [r3, #4]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800916c:	461a      	mov	r2, r3
 800916e:	68b9      	ldr	r1, [r7, #8]
 8009170:	f003 f973 	bl	800c45a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	685a      	ldr	r2, [r3, #4]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800917c:	441a      	add	r2, r3
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	685a      	ldr	r2, [r3, #4]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	429a      	cmp	r2, r3
 800918c:	d32b      	bcc.n	80091e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	605a      	str	r2, [r3, #4]
 8009196:	e026      	b.n	80091e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	68d8      	ldr	r0, [r3, #12]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091a0:	461a      	mov	r2, r3
 80091a2:	68b9      	ldr	r1, [r7, #8]
 80091a4:	f003 f959 	bl	800c45a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	68da      	ldr	r2, [r3, #12]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091b0:	425b      	negs	r3, r3
 80091b2:	441a      	add	r2, r3
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	68da      	ldr	r2, [r3, #12]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d207      	bcs.n	80091d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	689a      	ldr	r2, [r3, #8]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091cc:	425b      	negs	r3, r3
 80091ce:	441a      	add	r2, r3
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d105      	bne.n	80091e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d002      	beq.n	80091e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	3b01      	subs	r3, #1
 80091e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	1c5a      	adds	r2, r3, #1
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80091ee:	697b      	ldr	r3, [r7, #20]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3718      	adds	r7, #24
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009206:	2b00      	cmp	r3, #0
 8009208:	d018      	beq.n	800923c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	68da      	ldr	r2, [r3, #12]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009212:	441a      	add	r2, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	68da      	ldr	r2, [r3, #12]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	429a      	cmp	r2, r3
 8009222:	d303      	bcc.n	800922c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	68d9      	ldr	r1, [r3, #12]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009234:	461a      	mov	r2, r3
 8009236:	6838      	ldr	r0, [r7, #0]
 8009238:	f003 f90f 	bl	800c45a <memcpy>
	}
}
 800923c:	bf00      	nop
 800923e:	3708      	adds	r7, #8
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800924c:	f001 fcae 	bl	800abac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009256:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009258:	e011      	b.n	800927e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800925e:	2b00      	cmp	r3, #0
 8009260:	d012      	beq.n	8009288 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	3324      	adds	r3, #36	@ 0x24
 8009266:	4618      	mov	r0, r3
 8009268:	f000 fd74 	bl	8009d54 <xTaskRemoveFromEventList>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d001      	beq.n	8009276 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009272:	f000 fe53 	bl	8009f1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009276:	7bfb      	ldrb	r3, [r7, #15]
 8009278:	3b01      	subs	r3, #1
 800927a:	b2db      	uxtb	r3, r3
 800927c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800927e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009282:	2b00      	cmp	r3, #0
 8009284:	dce9      	bgt.n	800925a <prvUnlockQueue+0x16>
 8009286:	e000      	b.n	800928a <prvUnlockQueue+0x46>
					break;
 8009288:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	22ff      	movs	r2, #255	@ 0xff
 800928e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009292:	f001 fcc1 	bl	800ac18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009296:	f001 fc89 	bl	800abac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80092a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092a2:	e011      	b.n	80092c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d012      	beq.n	80092d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	3310      	adds	r3, #16
 80092b0:	4618      	mov	r0, r3
 80092b2:	f000 fd4f 	bl	8009d54 <xTaskRemoveFromEventList>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d001      	beq.n	80092c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80092bc:	f000 fe2e 	bl	8009f1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80092c0:	7bbb      	ldrb	r3, [r7, #14]
 80092c2:	3b01      	subs	r3, #1
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	dce9      	bgt.n	80092a4 <prvUnlockQueue+0x60>
 80092d0:	e000      	b.n	80092d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80092d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	22ff      	movs	r2, #255	@ 0xff
 80092d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80092dc:	f001 fc9c 	bl	800ac18 <vPortExitCritical>
}
 80092e0:	bf00      	nop
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80092f0:	f001 fc5c 	bl	800abac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d102      	bne.n	8009302 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80092fc:	2301      	movs	r3, #1
 80092fe:	60fb      	str	r3, [r7, #12]
 8009300:	e001      	b.n	8009306 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009302:	2300      	movs	r3, #0
 8009304:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009306:	f001 fc87 	bl	800ac18 <vPortExitCritical>

	return xReturn;
 800930a:	68fb      	ldr	r3, [r7, #12]
}
 800930c:	4618      	mov	r0, r3
 800930e:	3710      	adds	r7, #16
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800931c:	f001 fc46 	bl	800abac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009328:	429a      	cmp	r2, r3
 800932a:	d102      	bne.n	8009332 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800932c:	2301      	movs	r3, #1
 800932e:	60fb      	str	r3, [r7, #12]
 8009330:	e001      	b.n	8009336 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009332:	2300      	movs	r3, #0
 8009334:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009336:	f001 fc6f 	bl	800ac18 <vPortExitCritical>

	return xReturn;
 800933a:	68fb      	ldr	r3, [r7, #12]
}
 800933c:	4618      	mov	r0, r3
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800934e:	2300      	movs	r3, #0
 8009350:	60fb      	str	r3, [r7, #12]
 8009352:	e014      	b.n	800937e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009354:	4a0f      	ldr	r2, [pc, #60]	@ (8009394 <vQueueAddToRegistry+0x50>)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d10b      	bne.n	8009378 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009360:	490c      	ldr	r1, [pc, #48]	@ (8009394 <vQueueAddToRegistry+0x50>)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	683a      	ldr	r2, [r7, #0]
 8009366:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800936a:	4a0a      	ldr	r2, [pc, #40]	@ (8009394 <vQueueAddToRegistry+0x50>)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	00db      	lsls	r3, r3, #3
 8009370:	4413      	add	r3, r2
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009376:	e006      	b.n	8009386 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	3301      	adds	r3, #1
 800937c:	60fb      	str	r3, [r7, #12]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2b07      	cmp	r3, #7
 8009382:	d9e7      	bls.n	8009354 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009384:	bf00      	nop
 8009386:	bf00      	nop
 8009388:	3714      	adds	r7, #20
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop
 8009394:	20000a4c 	.word	0x20000a4c

08009398 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009398:	b580      	push	{r7, lr}
 800939a:	b086      	sub	sp, #24
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80093a8:	f001 fc00 	bl	800abac <vPortEnterCritical>
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80093b2:	b25b      	sxtb	r3, r3
 80093b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093b8:	d103      	bne.n	80093c2 <vQueueWaitForMessageRestricted+0x2a>
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80093c8:	b25b      	sxtb	r3, r3
 80093ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093ce:	d103      	bne.n	80093d8 <vQueueWaitForMessageRestricted+0x40>
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093d8:	f001 fc1e 	bl	800ac18 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d106      	bne.n	80093f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	3324      	adds	r3, #36	@ 0x24
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	68b9      	ldr	r1, [r7, #8]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f000 fc83 	bl	8009cf8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80093f2:	6978      	ldr	r0, [r7, #20]
 80093f4:	f7ff ff26 	bl	8009244 <prvUnlockQueue>
	}
 80093f8:	bf00      	nop
 80093fa:	3718      	adds	r7, #24
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009400:	b580      	push	{r7, lr}
 8009402:	b08e      	sub	sp, #56	@ 0x38
 8009404:	af04      	add	r7, sp, #16
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
 800940c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800940e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10d      	bne.n	8009430 <xTaskCreateStatic+0x30>
	__asm volatile
 8009414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009418:	b672      	cpsid	i
 800941a:	f383 8811 	msr	BASEPRI, r3
 800941e:	f3bf 8f6f 	isb	sy
 8009422:	f3bf 8f4f 	dsb	sy
 8009426:	b662      	cpsie	i
 8009428:	623b      	str	r3, [r7, #32]
}
 800942a:	bf00      	nop
 800942c:	bf00      	nop
 800942e:	e7fd      	b.n	800942c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8009430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009432:	2b00      	cmp	r3, #0
 8009434:	d10d      	bne.n	8009452 <xTaskCreateStatic+0x52>
	__asm volatile
 8009436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800943a:	b672      	cpsid	i
 800943c:	f383 8811 	msr	BASEPRI, r3
 8009440:	f3bf 8f6f 	isb	sy
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	b662      	cpsie	i
 800944a:	61fb      	str	r3, [r7, #28]
}
 800944c:	bf00      	nop
 800944e:	bf00      	nop
 8009450:	e7fd      	b.n	800944e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009452:	23a8      	movs	r3, #168	@ 0xa8
 8009454:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	2ba8      	cmp	r3, #168	@ 0xa8
 800945a:	d00d      	beq.n	8009478 <xTaskCreateStatic+0x78>
	__asm volatile
 800945c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009460:	b672      	cpsid	i
 8009462:	f383 8811 	msr	BASEPRI, r3
 8009466:	f3bf 8f6f 	isb	sy
 800946a:	f3bf 8f4f 	dsb	sy
 800946e:	b662      	cpsie	i
 8009470:	61bb      	str	r3, [r7, #24]
}
 8009472:	bf00      	nop
 8009474:	bf00      	nop
 8009476:	e7fd      	b.n	8009474 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009478:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800947a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800947c:	2b00      	cmp	r3, #0
 800947e:	d01e      	beq.n	80094be <xTaskCreateStatic+0xbe>
 8009480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009482:	2b00      	cmp	r3, #0
 8009484:	d01b      	beq.n	80094be <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009488:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800948a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800948c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800948e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009492:	2202      	movs	r2, #2
 8009494:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009498:	2300      	movs	r3, #0
 800949a:	9303      	str	r3, [sp, #12]
 800949c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800949e:	9302      	str	r3, [sp, #8]
 80094a0:	f107 0314 	add.w	r3, r7, #20
 80094a4:	9301      	str	r3, [sp, #4]
 80094a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	68b9      	ldr	r1, [r7, #8]
 80094b0:	68f8      	ldr	r0, [r7, #12]
 80094b2:	f000 f851 	bl	8009558 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80094b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80094b8:	f000 f8f8 	bl	80096ac <prvAddNewTaskToReadyList>
 80094bc:	e001      	b.n	80094c2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80094be:	2300      	movs	r3, #0
 80094c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80094c2:	697b      	ldr	r3, [r7, #20]
	}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3728      	adds	r7, #40	@ 0x28
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b08c      	sub	sp, #48	@ 0x30
 80094d0:	af04      	add	r7, sp, #16
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	603b      	str	r3, [r7, #0]
 80094d8:	4613      	mov	r3, r2
 80094da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80094dc:	88fb      	ldrh	r3, [r7, #6]
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	4618      	mov	r0, r3
 80094e2:	f001 fc91 	bl	800ae08 <pvPortMalloc>
 80094e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00e      	beq.n	800950c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80094ee:	20a8      	movs	r0, #168	@ 0xa8
 80094f0:	f001 fc8a 	bl	800ae08 <pvPortMalloc>
 80094f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d003      	beq.n	8009504 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	631a      	str	r2, [r3, #48]	@ 0x30
 8009502:	e005      	b.n	8009510 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009504:	6978      	ldr	r0, [r7, #20]
 8009506:	f001 fd4d 	bl	800afa4 <vPortFree>
 800950a:	e001      	b.n	8009510 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800950c:	2300      	movs	r3, #0
 800950e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d017      	beq.n	8009546 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	2200      	movs	r2, #0
 800951a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800951e:	88fa      	ldrh	r2, [r7, #6]
 8009520:	2300      	movs	r3, #0
 8009522:	9303      	str	r3, [sp, #12]
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	9302      	str	r3, [sp, #8]
 8009528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800952a:	9301      	str	r3, [sp, #4]
 800952c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	68b9      	ldr	r1, [r7, #8]
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f000 f80f 	bl	8009558 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800953a:	69f8      	ldr	r0, [r7, #28]
 800953c:	f000 f8b6 	bl	80096ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009540:	2301      	movs	r3, #1
 8009542:	61bb      	str	r3, [r7, #24]
 8009544:	e002      	b.n	800954c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009546:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800954a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800954c:	69bb      	ldr	r3, [r7, #24]
	}
 800954e:	4618      	mov	r0, r3
 8009550:	3720      	adds	r7, #32
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
	...

08009558 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b088      	sub	sp, #32
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
 8009564:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009568:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	461a      	mov	r2, r3
 8009570:	21a5      	movs	r1, #165	@ 0xa5
 8009572:	f002 fe91 	bl	800c298 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009578:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800957a:	6879      	ldr	r1, [r7, #4]
 800957c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8009580:	440b      	add	r3, r1
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	4413      	add	r3, r2
 8009586:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	f023 0307 	bic.w	r3, r3, #7
 800958e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	f003 0307 	and.w	r3, r3, #7
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00d      	beq.n	80095b6 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800959a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800959e:	b672      	cpsid	i
 80095a0:	f383 8811 	msr	BASEPRI, r3
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	b662      	cpsie	i
 80095ae:	617b      	str	r3, [r7, #20]
}
 80095b0:	bf00      	nop
 80095b2:	bf00      	nop
 80095b4:	e7fd      	b.n	80095b2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d01f      	beq.n	80095fc <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80095bc:	2300      	movs	r3, #0
 80095be:	61fb      	str	r3, [r7, #28]
 80095c0:	e012      	b.n	80095e8 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80095c2:	68ba      	ldr	r2, [r7, #8]
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	4413      	add	r3, r2
 80095c8:	7819      	ldrb	r1, [r3, #0]
 80095ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	4413      	add	r3, r2
 80095d0:	3334      	adds	r3, #52	@ 0x34
 80095d2:	460a      	mov	r2, r1
 80095d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80095d6:	68ba      	ldr	r2, [r7, #8]
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	4413      	add	r3, r2
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d006      	beq.n	80095f0 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	3301      	adds	r3, #1
 80095e6:	61fb      	str	r3, [r7, #28]
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	2b0f      	cmp	r3, #15
 80095ec:	d9e9      	bls.n	80095c2 <prvInitialiseNewTask+0x6a>
 80095ee:	e000      	b.n	80095f2 <prvInitialiseNewTask+0x9a>
			{
				break;
 80095f0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80095f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f4:	2200      	movs	r2, #0
 80095f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80095fa:	e003      	b.n	8009604 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80095fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009606:	2b37      	cmp	r3, #55	@ 0x37
 8009608:	d901      	bls.n	800960e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800960a:	2337      	movs	r3, #55	@ 0x37
 800960c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800960e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009610:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009612:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009616:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009618:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800961a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800961c:	2200      	movs	r2, #0
 800961e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009622:	3304      	adds	r3, #4
 8009624:	4618      	mov	r0, r3
 8009626:	f7ff f93d 	bl	80088a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800962a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800962c:	3318      	adds	r3, #24
 800962e:	4618      	mov	r0, r3
 8009630:	f7ff f938 	bl	80088a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009636:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009638:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800963a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800963c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009642:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009646:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009648:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800964a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964c:	2200      	movs	r2, #0
 800964e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009654:	2200      	movs	r2, #0
 8009656:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800965a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800965c:	3354      	adds	r3, #84	@ 0x54
 800965e:	224c      	movs	r2, #76	@ 0x4c
 8009660:	2100      	movs	r1, #0
 8009662:	4618      	mov	r0, r3
 8009664:	f002 fe18 	bl	800c298 <memset>
 8009668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966a:	4a0d      	ldr	r2, [pc, #52]	@ (80096a0 <prvInitialiseNewTask+0x148>)
 800966c:	659a      	str	r2, [r3, #88]	@ 0x58
 800966e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009670:	4a0c      	ldr	r2, [pc, #48]	@ (80096a4 <prvInitialiseNewTask+0x14c>)
 8009672:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009676:	4a0c      	ldr	r2, [pc, #48]	@ (80096a8 <prvInitialiseNewTask+0x150>)
 8009678:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800967a:	683a      	ldr	r2, [r7, #0]
 800967c:	68f9      	ldr	r1, [r7, #12]
 800967e:	69b8      	ldr	r0, [r7, #24]
 8009680:	f001 f984 	bl	800a98c <pxPortInitialiseStack>
 8009684:	4602      	mov	r2, r0
 8009686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009688:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800968a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800968c:	2b00      	cmp	r3, #0
 800968e:	d002      	beq.n	8009696 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009696:	bf00      	nop
 8009698:	3720      	adds	r7, #32
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	200066c4 	.word	0x200066c4
 80096a4:	2000672c 	.word	0x2000672c
 80096a8:	20006794 	.word	0x20006794

080096ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80096b4:	f001 fa7a 	bl	800abac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80096b8:	4b2d      	ldr	r3, [pc, #180]	@ (8009770 <prvAddNewTaskToReadyList+0xc4>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	3301      	adds	r3, #1
 80096be:	4a2c      	ldr	r2, [pc, #176]	@ (8009770 <prvAddNewTaskToReadyList+0xc4>)
 80096c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80096c2:	4b2c      	ldr	r3, [pc, #176]	@ (8009774 <prvAddNewTaskToReadyList+0xc8>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d109      	bne.n	80096de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80096ca:	4a2a      	ldr	r2, [pc, #168]	@ (8009774 <prvAddNewTaskToReadyList+0xc8>)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80096d0:	4b27      	ldr	r3, [pc, #156]	@ (8009770 <prvAddNewTaskToReadyList+0xc4>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d110      	bne.n	80096fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80096d8:	f000 fc44 	bl	8009f64 <prvInitialiseTaskLists>
 80096dc:	e00d      	b.n	80096fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80096de:	4b26      	ldr	r3, [pc, #152]	@ (8009778 <prvAddNewTaskToReadyList+0xcc>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d109      	bne.n	80096fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80096e6:	4b23      	ldr	r3, [pc, #140]	@ (8009774 <prvAddNewTaskToReadyList+0xc8>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d802      	bhi.n	80096fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80096f4:	4a1f      	ldr	r2, [pc, #124]	@ (8009774 <prvAddNewTaskToReadyList+0xc8>)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80096fa:	4b20      	ldr	r3, [pc, #128]	@ (800977c <prvAddNewTaskToReadyList+0xd0>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	3301      	adds	r3, #1
 8009700:	4a1e      	ldr	r2, [pc, #120]	@ (800977c <prvAddNewTaskToReadyList+0xd0>)
 8009702:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009704:	4b1d      	ldr	r3, [pc, #116]	@ (800977c <prvAddNewTaskToReadyList+0xd0>)
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009710:	4b1b      	ldr	r3, [pc, #108]	@ (8009780 <prvAddNewTaskToReadyList+0xd4>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	429a      	cmp	r2, r3
 8009716:	d903      	bls.n	8009720 <prvAddNewTaskToReadyList+0x74>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800971c:	4a18      	ldr	r2, [pc, #96]	@ (8009780 <prvAddNewTaskToReadyList+0xd4>)
 800971e:	6013      	str	r3, [r2, #0]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009724:	4613      	mov	r3, r2
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	4413      	add	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	4a15      	ldr	r2, [pc, #84]	@ (8009784 <prvAddNewTaskToReadyList+0xd8>)
 800972e:	441a      	add	r2, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	3304      	adds	r3, #4
 8009734:	4619      	mov	r1, r3
 8009736:	4610      	mov	r0, r2
 8009738:	f7ff f8c1 	bl	80088be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800973c:	f001 fa6c 	bl	800ac18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009740:	4b0d      	ldr	r3, [pc, #52]	@ (8009778 <prvAddNewTaskToReadyList+0xcc>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00e      	beq.n	8009766 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009748:	4b0a      	ldr	r3, [pc, #40]	@ (8009774 <prvAddNewTaskToReadyList+0xc8>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009752:	429a      	cmp	r2, r3
 8009754:	d207      	bcs.n	8009766 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009756:	4b0c      	ldr	r3, [pc, #48]	@ (8009788 <prvAddNewTaskToReadyList+0xdc>)
 8009758:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800975c:	601a      	str	r2, [r3, #0]
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009766:	bf00      	nop
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	20000f60 	.word	0x20000f60
 8009774:	20000a8c 	.word	0x20000a8c
 8009778:	20000f6c 	.word	0x20000f6c
 800977c:	20000f7c 	.word	0x20000f7c
 8009780:	20000f68 	.word	0x20000f68
 8009784:	20000a90 	.word	0x20000a90
 8009788:	e000ed04 	.word	0xe000ed04

0800978c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009794:	2300      	movs	r3, #0
 8009796:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d01a      	beq.n	80097d4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800979e:	4b15      	ldr	r3, [pc, #84]	@ (80097f4 <vTaskDelay+0x68>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00d      	beq.n	80097c2 <vTaskDelay+0x36>
	__asm volatile
 80097a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097aa:	b672      	cpsid	i
 80097ac:	f383 8811 	msr	BASEPRI, r3
 80097b0:	f3bf 8f6f 	isb	sy
 80097b4:	f3bf 8f4f 	dsb	sy
 80097b8:	b662      	cpsie	i
 80097ba:	60bb      	str	r3, [r7, #8]
}
 80097bc:	bf00      	nop
 80097be:	bf00      	nop
 80097c0:	e7fd      	b.n	80097be <vTaskDelay+0x32>
			vTaskSuspendAll();
 80097c2:	f000 f88f 	bl	80098e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80097c6:	2100      	movs	r1, #0
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 fd23 	bl	800a214 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80097ce:	f000 f897 	bl	8009900 <xTaskResumeAll>
 80097d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d107      	bne.n	80097ea <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80097da:	4b07      	ldr	r3, [pc, #28]	@ (80097f8 <vTaskDelay+0x6c>)
 80097dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097e0:	601a      	str	r2, [r3, #0]
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80097ea:	bf00      	nop
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	20000f88 	.word	0x20000f88
 80097f8:	e000ed04 	.word	0xe000ed04

080097fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b08a      	sub	sp, #40	@ 0x28
 8009800:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009802:	2300      	movs	r3, #0
 8009804:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009806:	2300      	movs	r3, #0
 8009808:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800980a:	463a      	mov	r2, r7
 800980c:	1d39      	adds	r1, r7, #4
 800980e:	f107 0308 	add.w	r3, r7, #8
 8009812:	4618      	mov	r0, r3
 8009814:	f7fe fff2 	bl	80087fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009818:	6839      	ldr	r1, [r7, #0]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	9202      	str	r2, [sp, #8]
 8009820:	9301      	str	r3, [sp, #4]
 8009822:	2300      	movs	r3, #0
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	2300      	movs	r3, #0
 8009828:	460a      	mov	r2, r1
 800982a:	4926      	ldr	r1, [pc, #152]	@ (80098c4 <vTaskStartScheduler+0xc8>)
 800982c:	4826      	ldr	r0, [pc, #152]	@ (80098c8 <vTaskStartScheduler+0xcc>)
 800982e:	f7ff fde7 	bl	8009400 <xTaskCreateStatic>
 8009832:	4603      	mov	r3, r0
 8009834:	4a25      	ldr	r2, [pc, #148]	@ (80098cc <vTaskStartScheduler+0xd0>)
 8009836:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009838:	4b24      	ldr	r3, [pc, #144]	@ (80098cc <vTaskStartScheduler+0xd0>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d002      	beq.n	8009846 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009840:	2301      	movs	r3, #1
 8009842:	617b      	str	r3, [r7, #20]
 8009844:	e001      	b.n	800984a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009846:	2300      	movs	r3, #0
 8009848:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d102      	bne.n	8009856 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009850:	f000 fd34 	bl	800a2bc <xTimerCreateTimerTask>
 8009854:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	2b01      	cmp	r3, #1
 800985a:	d11d      	bne.n	8009898 <vTaskStartScheduler+0x9c>
	__asm volatile
 800985c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009860:	b672      	cpsid	i
 8009862:	f383 8811 	msr	BASEPRI, r3
 8009866:	f3bf 8f6f 	isb	sy
 800986a:	f3bf 8f4f 	dsb	sy
 800986e:	b662      	cpsie	i
 8009870:	613b      	str	r3, [r7, #16]
}
 8009872:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009874:	4b16      	ldr	r3, [pc, #88]	@ (80098d0 <vTaskStartScheduler+0xd4>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	3354      	adds	r3, #84	@ 0x54
 800987a:	4a16      	ldr	r2, [pc, #88]	@ (80098d4 <vTaskStartScheduler+0xd8>)
 800987c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800987e:	4b16      	ldr	r3, [pc, #88]	@ (80098d8 <vTaskStartScheduler+0xdc>)
 8009880:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009884:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009886:	4b15      	ldr	r3, [pc, #84]	@ (80098dc <vTaskStartScheduler+0xe0>)
 8009888:	2201      	movs	r2, #1
 800988a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800988c:	4b14      	ldr	r3, [pc, #80]	@ (80098e0 <vTaskStartScheduler+0xe4>)
 800988e:	2200      	movs	r2, #0
 8009890:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009892:	f001 f90d 	bl	800aab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009896:	e011      	b.n	80098bc <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800989e:	d10d      	bne.n	80098bc <vTaskStartScheduler+0xc0>
	__asm volatile
 80098a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a4:	b672      	cpsid	i
 80098a6:	f383 8811 	msr	BASEPRI, r3
 80098aa:	f3bf 8f6f 	isb	sy
 80098ae:	f3bf 8f4f 	dsb	sy
 80098b2:	b662      	cpsie	i
 80098b4:	60fb      	str	r3, [r7, #12]
}
 80098b6:	bf00      	nop
 80098b8:	bf00      	nop
 80098ba:	e7fd      	b.n	80098b8 <vTaskStartScheduler+0xbc>
}
 80098bc:	bf00      	nop
 80098be:	3718      	adds	r7, #24
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	0800cda0 	.word	0x0800cda0
 80098c8:	08009f35 	.word	0x08009f35
 80098cc:	20000f84 	.word	0x20000f84
 80098d0:	20000a8c 	.word	0x20000a8c
 80098d4:	2000011c 	.word	0x2000011c
 80098d8:	20000f80 	.word	0x20000f80
 80098dc:	20000f6c 	.word	0x20000f6c
 80098e0:	20000f64 	.word	0x20000f64

080098e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80098e4:	b480      	push	{r7}
 80098e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80098e8:	4b04      	ldr	r3, [pc, #16]	@ (80098fc <vTaskSuspendAll+0x18>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	3301      	adds	r3, #1
 80098ee:	4a03      	ldr	r2, [pc, #12]	@ (80098fc <vTaskSuspendAll+0x18>)
 80098f0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80098f2:	bf00      	nop
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr
 80098fc:	20000f88 	.word	0x20000f88

08009900 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009906:	2300      	movs	r3, #0
 8009908:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800990a:	2300      	movs	r3, #0
 800990c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800990e:	4b43      	ldr	r3, [pc, #268]	@ (8009a1c <xTaskResumeAll+0x11c>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10d      	bne.n	8009932 <xTaskResumeAll+0x32>
	__asm volatile
 8009916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800991a:	b672      	cpsid	i
 800991c:	f383 8811 	msr	BASEPRI, r3
 8009920:	f3bf 8f6f 	isb	sy
 8009924:	f3bf 8f4f 	dsb	sy
 8009928:	b662      	cpsie	i
 800992a:	603b      	str	r3, [r7, #0]
}
 800992c:	bf00      	nop
 800992e:	bf00      	nop
 8009930:	e7fd      	b.n	800992e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009932:	f001 f93b 	bl	800abac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009936:	4b39      	ldr	r3, [pc, #228]	@ (8009a1c <xTaskResumeAll+0x11c>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	3b01      	subs	r3, #1
 800993c:	4a37      	ldr	r2, [pc, #220]	@ (8009a1c <xTaskResumeAll+0x11c>)
 800993e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009940:	4b36      	ldr	r3, [pc, #216]	@ (8009a1c <xTaskResumeAll+0x11c>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d162      	bne.n	8009a0e <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009948:	4b35      	ldr	r3, [pc, #212]	@ (8009a20 <xTaskResumeAll+0x120>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d05e      	beq.n	8009a0e <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009950:	e02f      	b.n	80099b2 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009952:	4b34      	ldr	r3, [pc, #208]	@ (8009a24 <xTaskResumeAll+0x124>)
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	3318      	adds	r3, #24
 800995e:	4618      	mov	r0, r3
 8009960:	f7ff f80a 	bl	8008978 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	3304      	adds	r3, #4
 8009968:	4618      	mov	r0, r3
 800996a:	f7ff f805 	bl	8008978 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009972:	4b2d      	ldr	r3, [pc, #180]	@ (8009a28 <xTaskResumeAll+0x128>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	429a      	cmp	r2, r3
 8009978:	d903      	bls.n	8009982 <xTaskResumeAll+0x82>
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800997e:	4a2a      	ldr	r2, [pc, #168]	@ (8009a28 <xTaskResumeAll+0x128>)
 8009980:	6013      	str	r3, [r2, #0]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009986:	4613      	mov	r3, r2
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	4413      	add	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4a27      	ldr	r2, [pc, #156]	@ (8009a2c <xTaskResumeAll+0x12c>)
 8009990:	441a      	add	r2, r3
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	3304      	adds	r3, #4
 8009996:	4619      	mov	r1, r3
 8009998:	4610      	mov	r0, r2
 800999a:	f7fe ff90 	bl	80088be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099a2:	4b23      	ldr	r3, [pc, #140]	@ (8009a30 <xTaskResumeAll+0x130>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d302      	bcc.n	80099b2 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80099ac:	4b21      	ldr	r3, [pc, #132]	@ (8009a34 <xTaskResumeAll+0x134>)
 80099ae:	2201      	movs	r2, #1
 80099b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099b2:	4b1c      	ldr	r3, [pc, #112]	@ (8009a24 <xTaskResumeAll+0x124>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d1cb      	bne.n	8009952 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d001      	beq.n	80099c4 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80099c0:	f000 fb76 	bl	800a0b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80099c4:	4b1c      	ldr	r3, [pc, #112]	@ (8009a38 <xTaskResumeAll+0x138>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d010      	beq.n	80099f2 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80099d0:	f000 f846 	bl	8009a60 <xTaskIncrementTick>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d002      	beq.n	80099e0 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80099da:	4b16      	ldr	r3, [pc, #88]	@ (8009a34 <xTaskResumeAll+0x134>)
 80099dc:	2201      	movs	r2, #1
 80099de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	3b01      	subs	r3, #1
 80099e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1f1      	bne.n	80099d0 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80099ec:	4b12      	ldr	r3, [pc, #72]	@ (8009a38 <xTaskResumeAll+0x138>)
 80099ee:	2200      	movs	r2, #0
 80099f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80099f2:	4b10      	ldr	r3, [pc, #64]	@ (8009a34 <xTaskResumeAll+0x134>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d009      	beq.n	8009a0e <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80099fa:	2301      	movs	r3, #1
 80099fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80099fe:	4b0f      	ldr	r3, [pc, #60]	@ (8009a3c <xTaskResumeAll+0x13c>)
 8009a00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a04:	601a      	str	r2, [r3, #0]
 8009a06:	f3bf 8f4f 	dsb	sy
 8009a0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a0e:	f001 f903 	bl	800ac18 <vPortExitCritical>

	return xAlreadyYielded;
 8009a12:	68bb      	ldr	r3, [r7, #8]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3710      	adds	r7, #16
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	20000f88 	.word	0x20000f88
 8009a20:	20000f60 	.word	0x20000f60
 8009a24:	20000f20 	.word	0x20000f20
 8009a28:	20000f68 	.word	0x20000f68
 8009a2c:	20000a90 	.word	0x20000a90
 8009a30:	20000a8c 	.word	0x20000a8c
 8009a34:	20000f74 	.word	0x20000f74
 8009a38:	20000f70 	.word	0x20000f70
 8009a3c:	e000ed04 	.word	0xe000ed04

08009a40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009a46:	4b05      	ldr	r3, [pc, #20]	@ (8009a5c <xTaskGetTickCount+0x1c>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009a4c:	687b      	ldr	r3, [r7, #4]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	370c      	adds	r7, #12
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	20000f64 	.word	0x20000f64

08009a60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b086      	sub	sp, #24
 8009a64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009a66:	2300      	movs	r3, #0
 8009a68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a6a:	4b50      	ldr	r3, [pc, #320]	@ (8009bac <xTaskIncrementTick+0x14c>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	f040 808c 	bne.w	8009b8c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009a74:	4b4e      	ldr	r3, [pc, #312]	@ (8009bb0 <xTaskIncrementTick+0x150>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009a7c:	4a4c      	ldr	r2, [pc, #304]	@ (8009bb0 <xTaskIncrementTick+0x150>)
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d123      	bne.n	8009ad0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8009a88:	4b4a      	ldr	r3, [pc, #296]	@ (8009bb4 <xTaskIncrementTick+0x154>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d00d      	beq.n	8009aae <xTaskIncrementTick+0x4e>
	__asm volatile
 8009a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a96:	b672      	cpsid	i
 8009a98:	f383 8811 	msr	BASEPRI, r3
 8009a9c:	f3bf 8f6f 	isb	sy
 8009aa0:	f3bf 8f4f 	dsb	sy
 8009aa4:	b662      	cpsie	i
 8009aa6:	603b      	str	r3, [r7, #0]
}
 8009aa8:	bf00      	nop
 8009aaa:	bf00      	nop
 8009aac:	e7fd      	b.n	8009aaa <xTaskIncrementTick+0x4a>
 8009aae:	4b41      	ldr	r3, [pc, #260]	@ (8009bb4 <xTaskIncrementTick+0x154>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	60fb      	str	r3, [r7, #12]
 8009ab4:	4b40      	ldr	r3, [pc, #256]	@ (8009bb8 <xTaskIncrementTick+0x158>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a3e      	ldr	r2, [pc, #248]	@ (8009bb4 <xTaskIncrementTick+0x154>)
 8009aba:	6013      	str	r3, [r2, #0]
 8009abc:	4a3e      	ldr	r2, [pc, #248]	@ (8009bb8 <xTaskIncrementTick+0x158>)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6013      	str	r3, [r2, #0]
 8009ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8009bbc <xTaskIncrementTick+0x15c>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	4a3c      	ldr	r2, [pc, #240]	@ (8009bbc <xTaskIncrementTick+0x15c>)
 8009aca:	6013      	str	r3, [r2, #0]
 8009acc:	f000 faf0 	bl	800a0b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009ad0:	4b3b      	ldr	r3, [pc, #236]	@ (8009bc0 <xTaskIncrementTick+0x160>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	693a      	ldr	r2, [r7, #16]
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d349      	bcc.n	8009b6e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ada:	4b36      	ldr	r3, [pc, #216]	@ (8009bb4 <xTaskIncrementTick+0x154>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d104      	bne.n	8009aee <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ae4:	4b36      	ldr	r3, [pc, #216]	@ (8009bc0 <xTaskIncrementTick+0x160>)
 8009ae6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009aea:	601a      	str	r2, [r3, #0]
					break;
 8009aec:	e03f      	b.n	8009b6e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aee:	4b31      	ldr	r3, [pc, #196]	@ (8009bb4 <xTaskIncrementTick+0x154>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009afe:	693a      	ldr	r2, [r7, #16]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d203      	bcs.n	8009b0e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009b06:	4a2e      	ldr	r2, [pc, #184]	@ (8009bc0 <xTaskIncrementTick+0x160>)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009b0c:	e02f      	b.n	8009b6e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	3304      	adds	r3, #4
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fe ff30 	bl	8008978 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d004      	beq.n	8009b2a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	3318      	adds	r3, #24
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7fe ff27 	bl	8008978 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b2e:	4b25      	ldr	r3, [pc, #148]	@ (8009bc4 <xTaskIncrementTick+0x164>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d903      	bls.n	8009b3e <xTaskIncrementTick+0xde>
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b3a:	4a22      	ldr	r2, [pc, #136]	@ (8009bc4 <xTaskIncrementTick+0x164>)
 8009b3c:	6013      	str	r3, [r2, #0]
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b42:	4613      	mov	r3, r2
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	4413      	add	r3, r2
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4a1f      	ldr	r2, [pc, #124]	@ (8009bc8 <xTaskIncrementTick+0x168>)
 8009b4c:	441a      	add	r2, r3
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	3304      	adds	r3, #4
 8009b52:	4619      	mov	r1, r3
 8009b54:	4610      	mov	r0, r2
 8009b56:	f7fe feb2 	bl	80088be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8009bcc <xTaskIncrementTick+0x16c>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d3b8      	bcc.n	8009ada <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b6c:	e7b5      	b.n	8009ada <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009b6e:	4b17      	ldr	r3, [pc, #92]	@ (8009bcc <xTaskIncrementTick+0x16c>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b74:	4914      	ldr	r1, [pc, #80]	@ (8009bc8 <xTaskIncrementTick+0x168>)
 8009b76:	4613      	mov	r3, r2
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	4413      	add	r3, r2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	440b      	add	r3, r1
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d907      	bls.n	8009b96 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8009b86:	2301      	movs	r3, #1
 8009b88:	617b      	str	r3, [r7, #20]
 8009b8a:	e004      	b.n	8009b96 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009b8c:	4b10      	ldr	r3, [pc, #64]	@ (8009bd0 <xTaskIncrementTick+0x170>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	3301      	adds	r3, #1
 8009b92:	4a0f      	ldr	r2, [pc, #60]	@ (8009bd0 <xTaskIncrementTick+0x170>)
 8009b94:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009b96:	4b0f      	ldr	r3, [pc, #60]	@ (8009bd4 <xTaskIncrementTick+0x174>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d001      	beq.n	8009ba2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009ba2:	697b      	ldr	r3, [r7, #20]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3718      	adds	r7, #24
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	20000f88 	.word	0x20000f88
 8009bb0:	20000f64 	.word	0x20000f64
 8009bb4:	20000f18 	.word	0x20000f18
 8009bb8:	20000f1c 	.word	0x20000f1c
 8009bbc:	20000f78 	.word	0x20000f78
 8009bc0:	20000f80 	.word	0x20000f80
 8009bc4:	20000f68 	.word	0x20000f68
 8009bc8:	20000a90 	.word	0x20000a90
 8009bcc:	20000a8c 	.word	0x20000a8c
 8009bd0:	20000f70 	.word	0x20000f70
 8009bd4:	20000f74 	.word	0x20000f74

08009bd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009bde:	4b2c      	ldr	r3, [pc, #176]	@ (8009c90 <vTaskSwitchContext+0xb8>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d003      	beq.n	8009bee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009be6:	4b2b      	ldr	r3, [pc, #172]	@ (8009c94 <vTaskSwitchContext+0xbc>)
 8009be8:	2201      	movs	r2, #1
 8009bea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009bec:	e049      	b.n	8009c82 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8009bee:	4b29      	ldr	r3, [pc, #164]	@ (8009c94 <vTaskSwitchContext+0xbc>)
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bf4:	4b28      	ldr	r3, [pc, #160]	@ (8009c98 <vTaskSwitchContext+0xc0>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	60fb      	str	r3, [r7, #12]
 8009bfa:	e013      	b.n	8009c24 <vTaskSwitchContext+0x4c>
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d10d      	bne.n	8009c1e <vTaskSwitchContext+0x46>
	__asm volatile
 8009c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c06:	b672      	cpsid	i
 8009c08:	f383 8811 	msr	BASEPRI, r3
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	b662      	cpsie	i
 8009c16:	607b      	str	r3, [r7, #4]
}
 8009c18:	bf00      	nop
 8009c1a:	bf00      	nop
 8009c1c:	e7fd      	b.n	8009c1a <vTaskSwitchContext+0x42>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	3b01      	subs	r3, #1
 8009c22:	60fb      	str	r3, [r7, #12]
 8009c24:	491d      	ldr	r1, [pc, #116]	@ (8009c9c <vTaskSwitchContext+0xc4>)
 8009c26:	68fa      	ldr	r2, [r7, #12]
 8009c28:	4613      	mov	r3, r2
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	4413      	add	r3, r2
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	440b      	add	r3, r1
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d0e1      	beq.n	8009bfc <vTaskSwitchContext+0x24>
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	4413      	add	r3, r2
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	4a16      	ldr	r2, [pc, #88]	@ (8009c9c <vTaskSwitchContext+0xc4>)
 8009c44:	4413      	add	r3, r2
 8009c46:	60bb      	str	r3, [r7, #8]
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	685a      	ldr	r2, [r3, #4]
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	605a      	str	r2, [r3, #4]
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	3308      	adds	r3, #8
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d104      	bne.n	8009c68 <vTaskSwitchContext+0x90>
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	685a      	ldr	r2, [r3, #4]
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	605a      	str	r2, [r3, #4]
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8009ca0 <vTaskSwitchContext+0xc8>)
 8009c70:	6013      	str	r3, [r2, #0]
 8009c72:	4a09      	ldr	r2, [pc, #36]	@ (8009c98 <vTaskSwitchContext+0xc0>)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c78:	4b09      	ldr	r3, [pc, #36]	@ (8009ca0 <vTaskSwitchContext+0xc8>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	3354      	adds	r3, #84	@ 0x54
 8009c7e:	4a09      	ldr	r2, [pc, #36]	@ (8009ca4 <vTaskSwitchContext+0xcc>)
 8009c80:	6013      	str	r3, [r2, #0]
}
 8009c82:	bf00      	nop
 8009c84:	3714      	adds	r7, #20
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	20000f88 	.word	0x20000f88
 8009c94:	20000f74 	.word	0x20000f74
 8009c98:	20000f68 	.word	0x20000f68
 8009c9c:	20000a90 	.word	0x20000a90
 8009ca0:	20000a8c 	.word	0x20000a8c
 8009ca4:	2000011c 	.word	0x2000011c

08009ca8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d10d      	bne.n	8009cd4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cbc:	b672      	cpsid	i
 8009cbe:	f383 8811 	msr	BASEPRI, r3
 8009cc2:	f3bf 8f6f 	isb	sy
 8009cc6:	f3bf 8f4f 	dsb	sy
 8009cca:	b662      	cpsie	i
 8009ccc:	60fb      	str	r3, [r7, #12]
}
 8009cce:	bf00      	nop
 8009cd0:	bf00      	nop
 8009cd2:	e7fd      	b.n	8009cd0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009cd4:	4b07      	ldr	r3, [pc, #28]	@ (8009cf4 <vTaskPlaceOnEventList+0x4c>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	3318      	adds	r3, #24
 8009cda:	4619      	mov	r1, r3
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f7fe fe12 	bl	8008906 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009ce2:	2101      	movs	r1, #1
 8009ce4:	6838      	ldr	r0, [r7, #0]
 8009ce6:	f000 fa95 	bl	800a214 <prvAddCurrentTaskToDelayedList>
}
 8009cea:	bf00      	nop
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	20000a8c 	.word	0x20000a8c

08009cf8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b086      	sub	sp, #24
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d10d      	bne.n	8009d26 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8009d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d0e:	b672      	cpsid	i
 8009d10:	f383 8811 	msr	BASEPRI, r3
 8009d14:	f3bf 8f6f 	isb	sy
 8009d18:	f3bf 8f4f 	dsb	sy
 8009d1c:	b662      	cpsie	i
 8009d1e:	617b      	str	r3, [r7, #20]
}
 8009d20:	bf00      	nop
 8009d22:	bf00      	nop
 8009d24:	e7fd      	b.n	8009d22 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d26:	4b0a      	ldr	r3, [pc, #40]	@ (8009d50 <vTaskPlaceOnEventListRestricted+0x58>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	3318      	adds	r3, #24
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	f7fe fdc5 	bl	80088be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d002      	beq.n	8009d40 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8009d3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009d3e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009d40:	6879      	ldr	r1, [r7, #4]
 8009d42:	68b8      	ldr	r0, [r7, #8]
 8009d44:	f000 fa66 	bl	800a214 <prvAddCurrentTaskToDelayedList>
	}
 8009d48:	bf00      	nop
 8009d4a:	3718      	adds	r7, #24
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	20000a8c 	.word	0x20000a8c

08009d54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b086      	sub	sp, #24
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10d      	bne.n	8009d86 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8009d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d6e:	b672      	cpsid	i
 8009d70:	f383 8811 	msr	BASEPRI, r3
 8009d74:	f3bf 8f6f 	isb	sy
 8009d78:	f3bf 8f4f 	dsb	sy
 8009d7c:	b662      	cpsie	i
 8009d7e:	60fb      	str	r3, [r7, #12]
}
 8009d80:	bf00      	nop
 8009d82:	bf00      	nop
 8009d84:	e7fd      	b.n	8009d82 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	3318      	adds	r3, #24
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7fe fdf4 	bl	8008978 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d90:	4b1d      	ldr	r3, [pc, #116]	@ (8009e08 <xTaskRemoveFromEventList+0xb4>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d11d      	bne.n	8009dd4 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	3304      	adds	r3, #4
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7fe fdeb 	bl	8008978 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009da6:	4b19      	ldr	r3, [pc, #100]	@ (8009e0c <xTaskRemoveFromEventList+0xb8>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d903      	bls.n	8009db6 <xTaskRemoveFromEventList+0x62>
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009db2:	4a16      	ldr	r2, [pc, #88]	@ (8009e0c <xTaskRemoveFromEventList+0xb8>)
 8009db4:	6013      	str	r3, [r2, #0]
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dba:	4613      	mov	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4413      	add	r3, r2
 8009dc0:	009b      	lsls	r3, r3, #2
 8009dc2:	4a13      	ldr	r2, [pc, #76]	@ (8009e10 <xTaskRemoveFromEventList+0xbc>)
 8009dc4:	441a      	add	r2, r3
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	3304      	adds	r3, #4
 8009dca:	4619      	mov	r1, r3
 8009dcc:	4610      	mov	r0, r2
 8009dce:	f7fe fd76 	bl	80088be <vListInsertEnd>
 8009dd2:	e005      	b.n	8009de0 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	3318      	adds	r3, #24
 8009dd8:	4619      	mov	r1, r3
 8009dda:	480e      	ldr	r0, [pc, #56]	@ (8009e14 <xTaskRemoveFromEventList+0xc0>)
 8009ddc:	f7fe fd6f 	bl	80088be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009de4:	4b0c      	ldr	r3, [pc, #48]	@ (8009e18 <xTaskRemoveFromEventList+0xc4>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d905      	bls.n	8009dfa <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009dee:	2301      	movs	r3, #1
 8009df0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009df2:	4b0a      	ldr	r3, [pc, #40]	@ (8009e1c <xTaskRemoveFromEventList+0xc8>)
 8009df4:	2201      	movs	r2, #1
 8009df6:	601a      	str	r2, [r3, #0]
 8009df8:	e001      	b.n	8009dfe <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009dfe:	697b      	ldr	r3, [r7, #20]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3718      	adds	r7, #24
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	20000f88 	.word	0x20000f88
 8009e0c:	20000f68 	.word	0x20000f68
 8009e10:	20000a90 	.word	0x20000a90
 8009e14:	20000f20 	.word	0x20000f20
 8009e18:	20000a8c 	.word	0x20000a8c
 8009e1c:	20000f74 	.word	0x20000f74

08009e20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009e28:	4b06      	ldr	r3, [pc, #24]	@ (8009e44 <vTaskInternalSetTimeOutState+0x24>)
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009e30:	4b05      	ldr	r3, [pc, #20]	@ (8009e48 <vTaskInternalSetTimeOutState+0x28>)
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	605a      	str	r2, [r3, #4]
}
 8009e38:	bf00      	nop
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr
 8009e44:	20000f78 	.word	0x20000f78
 8009e48:	20000f64 	.word	0x20000f64

08009e4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b088      	sub	sp, #32
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d10d      	bne.n	8009e78 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8009e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e60:	b672      	cpsid	i
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	b662      	cpsie	i
 8009e70:	613b      	str	r3, [r7, #16]
}
 8009e72:	bf00      	nop
 8009e74:	bf00      	nop
 8009e76:	e7fd      	b.n	8009e74 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10d      	bne.n	8009e9a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8009e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e82:	b672      	cpsid	i
 8009e84:	f383 8811 	msr	BASEPRI, r3
 8009e88:	f3bf 8f6f 	isb	sy
 8009e8c:	f3bf 8f4f 	dsb	sy
 8009e90:	b662      	cpsie	i
 8009e92:	60fb      	str	r3, [r7, #12]
}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop
 8009e98:	e7fd      	b.n	8009e96 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8009e9a:	f000 fe87 	bl	800abac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8009f14 <xTaskCheckForTimeOut+0xc8>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	69ba      	ldr	r2, [r7, #24]
 8009eaa:	1ad3      	subs	r3, r2, r3
 8009eac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009eb6:	d102      	bne.n	8009ebe <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	61fb      	str	r3, [r7, #28]
 8009ebc:	e023      	b.n	8009f06 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	4b15      	ldr	r3, [pc, #84]	@ (8009f18 <xTaskCheckForTimeOut+0xcc>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d007      	beq.n	8009eda <xTaskCheckForTimeOut+0x8e>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	69ba      	ldr	r2, [r7, #24]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d302      	bcc.n	8009eda <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	61fb      	str	r3, [r7, #28]
 8009ed8:	e015      	b.n	8009f06 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	697a      	ldr	r2, [r7, #20]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d20b      	bcs.n	8009efc <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	1ad2      	subs	r2, r2, r3
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f7ff ff95 	bl	8009e20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	61fb      	str	r3, [r7, #28]
 8009efa:	e004      	b.n	8009f06 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	2200      	movs	r2, #0
 8009f00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009f02:	2301      	movs	r3, #1
 8009f04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009f06:	f000 fe87 	bl	800ac18 <vPortExitCritical>

	return xReturn;
 8009f0a:	69fb      	ldr	r3, [r7, #28]
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3720      	adds	r7, #32
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	20000f64 	.word	0x20000f64
 8009f18:	20000f78 	.word	0x20000f78

08009f1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009f20:	4b03      	ldr	r3, [pc, #12]	@ (8009f30 <vTaskMissedYield+0x14>)
 8009f22:	2201      	movs	r2, #1
 8009f24:	601a      	str	r2, [r3, #0]
}
 8009f26:	bf00      	nop
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr
 8009f30:	20000f74 	.word	0x20000f74

08009f34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009f3c:	f000 f852 	bl	8009fe4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009f40:	4b06      	ldr	r3, [pc, #24]	@ (8009f5c <prvIdleTask+0x28>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d9f9      	bls.n	8009f3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009f48:	4b05      	ldr	r3, [pc, #20]	@ (8009f60 <prvIdleTask+0x2c>)
 8009f4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f4e:	601a      	str	r2, [r3, #0]
 8009f50:	f3bf 8f4f 	dsb	sy
 8009f54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009f58:	e7f0      	b.n	8009f3c <prvIdleTask+0x8>
 8009f5a:	bf00      	nop
 8009f5c:	20000a90 	.word	0x20000a90
 8009f60:	e000ed04 	.word	0xe000ed04

08009f64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	607b      	str	r3, [r7, #4]
 8009f6e:	e00c      	b.n	8009f8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	4613      	mov	r3, r2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	4a12      	ldr	r2, [pc, #72]	@ (8009fc4 <prvInitialiseTaskLists+0x60>)
 8009f7c:	4413      	add	r3, r2
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7fe fc70 	bl	8008864 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	3301      	adds	r3, #1
 8009f88:	607b      	str	r3, [r7, #4]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2b37      	cmp	r3, #55	@ 0x37
 8009f8e:	d9ef      	bls.n	8009f70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009f90:	480d      	ldr	r0, [pc, #52]	@ (8009fc8 <prvInitialiseTaskLists+0x64>)
 8009f92:	f7fe fc67 	bl	8008864 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009f96:	480d      	ldr	r0, [pc, #52]	@ (8009fcc <prvInitialiseTaskLists+0x68>)
 8009f98:	f7fe fc64 	bl	8008864 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009f9c:	480c      	ldr	r0, [pc, #48]	@ (8009fd0 <prvInitialiseTaskLists+0x6c>)
 8009f9e:	f7fe fc61 	bl	8008864 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009fa2:	480c      	ldr	r0, [pc, #48]	@ (8009fd4 <prvInitialiseTaskLists+0x70>)
 8009fa4:	f7fe fc5e 	bl	8008864 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009fa8:	480b      	ldr	r0, [pc, #44]	@ (8009fd8 <prvInitialiseTaskLists+0x74>)
 8009faa:	f7fe fc5b 	bl	8008864 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009fae:	4b0b      	ldr	r3, [pc, #44]	@ (8009fdc <prvInitialiseTaskLists+0x78>)
 8009fb0:	4a05      	ldr	r2, [pc, #20]	@ (8009fc8 <prvInitialiseTaskLists+0x64>)
 8009fb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8009fe0 <prvInitialiseTaskLists+0x7c>)
 8009fb6:	4a05      	ldr	r2, [pc, #20]	@ (8009fcc <prvInitialiseTaskLists+0x68>)
 8009fb8:	601a      	str	r2, [r3, #0]
}
 8009fba:	bf00      	nop
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	20000a90 	.word	0x20000a90
 8009fc8:	20000ef0 	.word	0x20000ef0
 8009fcc:	20000f04 	.word	0x20000f04
 8009fd0:	20000f20 	.word	0x20000f20
 8009fd4:	20000f34 	.word	0x20000f34
 8009fd8:	20000f4c 	.word	0x20000f4c
 8009fdc:	20000f18 	.word	0x20000f18
 8009fe0:	20000f1c 	.word	0x20000f1c

08009fe4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009fea:	e019      	b.n	800a020 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009fec:	f000 fdde 	bl	800abac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ff0:	4b10      	ldr	r3, [pc, #64]	@ (800a034 <prvCheckTasksWaitingTermination+0x50>)
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	3304      	adds	r3, #4
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7fe fcbb 	bl	8008978 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a002:	4b0d      	ldr	r3, [pc, #52]	@ (800a038 <prvCheckTasksWaitingTermination+0x54>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	3b01      	subs	r3, #1
 800a008:	4a0b      	ldr	r2, [pc, #44]	@ (800a038 <prvCheckTasksWaitingTermination+0x54>)
 800a00a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a00c:	4b0b      	ldr	r3, [pc, #44]	@ (800a03c <prvCheckTasksWaitingTermination+0x58>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	3b01      	subs	r3, #1
 800a012:	4a0a      	ldr	r2, [pc, #40]	@ (800a03c <prvCheckTasksWaitingTermination+0x58>)
 800a014:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a016:	f000 fdff 	bl	800ac18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f810 	bl	800a040 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a020:	4b06      	ldr	r3, [pc, #24]	@ (800a03c <prvCheckTasksWaitingTermination+0x58>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d1e1      	bne.n	8009fec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a028:	bf00      	nop
 800a02a:	bf00      	nop
 800a02c:	3708      	adds	r7, #8
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	20000f34 	.word	0x20000f34
 800a038:	20000f60 	.word	0x20000f60
 800a03c:	20000f48 	.word	0x20000f48

0800a040 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	3354      	adds	r3, #84	@ 0x54
 800a04c:	4618      	mov	r0, r3
 800a04e:	f002 f93b 	bl	800c2c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d108      	bne.n	800a06e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a060:	4618      	mov	r0, r3
 800a062:	f000 ff9f 	bl	800afa4 <vPortFree>
				vPortFree( pxTCB );
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 ff9c 	bl	800afa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a06c:	e01b      	b.n	800a0a6 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a074:	2b01      	cmp	r3, #1
 800a076:	d103      	bne.n	800a080 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 ff93 	bl	800afa4 <vPortFree>
	}
 800a07e:	e012      	b.n	800a0a6 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a086:	2b02      	cmp	r3, #2
 800a088:	d00d      	beq.n	800a0a6 <prvDeleteTCB+0x66>
	__asm volatile
 800a08a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a08e:	b672      	cpsid	i
 800a090:	f383 8811 	msr	BASEPRI, r3
 800a094:	f3bf 8f6f 	isb	sy
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	b662      	cpsie	i
 800a09e:	60fb      	str	r3, [r7, #12]
}
 800a0a0:	bf00      	nop
 800a0a2:	bf00      	nop
 800a0a4:	e7fd      	b.n	800a0a2 <prvDeleteTCB+0x62>
	}
 800a0a6:	bf00      	nop
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
	...

0800a0b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0b6:	4b0c      	ldr	r3, [pc, #48]	@ (800a0e8 <prvResetNextTaskUnblockTime+0x38>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d104      	bne.n	800a0ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a0c0:	4b0a      	ldr	r3, [pc, #40]	@ (800a0ec <prvResetNextTaskUnblockTime+0x3c>)
 800a0c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a0c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a0c8:	e008      	b.n	800a0dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0ca:	4b07      	ldr	r3, [pc, #28]	@ (800a0e8 <prvResetNextTaskUnblockTime+0x38>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	4a04      	ldr	r2, [pc, #16]	@ (800a0ec <prvResetNextTaskUnblockTime+0x3c>)
 800a0da:	6013      	str	r3, [r2, #0]
}
 800a0dc:	bf00      	nop
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr
 800a0e8:	20000f18 	.word	0x20000f18
 800a0ec:	20000f80 	.word	0x20000f80

0800a0f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a0f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a124 <xTaskGetSchedulerState+0x34>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d102      	bne.n	800a104 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a0fe:	2301      	movs	r3, #1
 800a100:	607b      	str	r3, [r7, #4]
 800a102:	e008      	b.n	800a116 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a104:	4b08      	ldr	r3, [pc, #32]	@ (800a128 <xTaskGetSchedulerState+0x38>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d102      	bne.n	800a112 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a10c:	2302      	movs	r3, #2
 800a10e:	607b      	str	r3, [r7, #4]
 800a110:	e001      	b.n	800a116 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a112:	2300      	movs	r3, #0
 800a114:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a116:	687b      	ldr	r3, [r7, #4]
	}
 800a118:	4618      	mov	r0, r3
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr
 800a124:	20000f6c 	.word	0x20000f6c
 800a128:	20000f88 	.word	0x20000f88

0800a12c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b086      	sub	sp, #24
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a138:	2300      	movs	r3, #0
 800a13a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d05c      	beq.n	800a1fc <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a142:	4b31      	ldr	r3, [pc, #196]	@ (800a208 <xTaskPriorityDisinherit+0xdc>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d00d      	beq.n	800a168 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800a14c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a150:	b672      	cpsid	i
 800a152:	f383 8811 	msr	BASEPRI, r3
 800a156:	f3bf 8f6f 	isb	sy
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	b662      	cpsie	i
 800a160:	60fb      	str	r3, [r7, #12]
}
 800a162:	bf00      	nop
 800a164:	bf00      	nop
 800a166:	e7fd      	b.n	800a164 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d10d      	bne.n	800a18c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800a170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a174:	b672      	cpsid	i
 800a176:	f383 8811 	msr	BASEPRI, r3
 800a17a:	f3bf 8f6f 	isb	sy
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	b662      	cpsie	i
 800a184:	60bb      	str	r3, [r7, #8]
}
 800a186:	bf00      	nop
 800a188:	bf00      	nop
 800a18a:	e7fd      	b.n	800a188 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a190:	1e5a      	subs	r2, r3, #1
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d02c      	beq.n	800a1fc <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d128      	bne.n	800a1fc <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	3304      	adds	r3, #4
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7fe fbe2 	bl	8008978 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1cc:	4b0f      	ldr	r3, [pc, #60]	@ (800a20c <xTaskPriorityDisinherit+0xe0>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d903      	bls.n	800a1dc <xTaskPriorityDisinherit+0xb0>
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1d8:	4a0c      	ldr	r2, [pc, #48]	@ (800a20c <xTaskPriorityDisinherit+0xe0>)
 800a1da:	6013      	str	r3, [r2, #0]
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4413      	add	r3, r2
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	4a09      	ldr	r2, [pc, #36]	@ (800a210 <xTaskPriorityDisinherit+0xe4>)
 800a1ea:	441a      	add	r2, r3
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	3304      	adds	r3, #4
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	4610      	mov	r0, r2
 800a1f4:	f7fe fb63 	bl	80088be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a1fc:	697b      	ldr	r3, [r7, #20]
	}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3718      	adds	r7, #24
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	20000a8c 	.word	0x20000a8c
 800a20c:	20000f68 	.word	0x20000f68
 800a210:	20000a90 	.word	0x20000a90

0800a214 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a21e:	4b21      	ldr	r3, [pc, #132]	@ (800a2a4 <prvAddCurrentTaskToDelayedList+0x90>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a224:	4b20      	ldr	r3, [pc, #128]	@ (800a2a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	3304      	adds	r3, #4
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7fe fba4 	bl	8008978 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a236:	d10a      	bne.n	800a24e <prvAddCurrentTaskToDelayedList+0x3a>
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d007      	beq.n	800a24e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a23e:	4b1a      	ldr	r3, [pc, #104]	@ (800a2a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	3304      	adds	r3, #4
 800a244:	4619      	mov	r1, r3
 800a246:	4819      	ldr	r0, [pc, #100]	@ (800a2ac <prvAddCurrentTaskToDelayedList+0x98>)
 800a248:	f7fe fb39 	bl	80088be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a24c:	e026      	b.n	800a29c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a24e:	68fa      	ldr	r2, [r7, #12]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	4413      	add	r3, r2
 800a254:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a256:	4b14      	ldr	r3, [pc, #80]	@ (800a2a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a25e:	68ba      	ldr	r2, [r7, #8]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	429a      	cmp	r2, r3
 800a264:	d209      	bcs.n	800a27a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a266:	4b12      	ldr	r3, [pc, #72]	@ (800a2b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	4b0f      	ldr	r3, [pc, #60]	@ (800a2a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	3304      	adds	r3, #4
 800a270:	4619      	mov	r1, r3
 800a272:	4610      	mov	r0, r2
 800a274:	f7fe fb47 	bl	8008906 <vListInsert>
}
 800a278:	e010      	b.n	800a29c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a27a:	4b0e      	ldr	r3, [pc, #56]	@ (800a2b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	4b0a      	ldr	r3, [pc, #40]	@ (800a2a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	3304      	adds	r3, #4
 800a284:	4619      	mov	r1, r3
 800a286:	4610      	mov	r0, r2
 800a288:	f7fe fb3d 	bl	8008906 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a28c:	4b0a      	ldr	r3, [pc, #40]	@ (800a2b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	68ba      	ldr	r2, [r7, #8]
 800a292:	429a      	cmp	r2, r3
 800a294:	d202      	bcs.n	800a29c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a296:	4a08      	ldr	r2, [pc, #32]	@ (800a2b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	6013      	str	r3, [r2, #0]
}
 800a29c:	bf00      	nop
 800a29e:	3710      	adds	r7, #16
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	20000f64 	.word	0x20000f64
 800a2a8:	20000a8c 	.word	0x20000a8c
 800a2ac:	20000f4c 	.word	0x20000f4c
 800a2b0:	20000f1c 	.word	0x20000f1c
 800a2b4:	20000f18 	.word	0x20000f18
 800a2b8:	20000f80 	.word	0x20000f80

0800a2bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b08a      	sub	sp, #40	@ 0x28
 800a2c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a2c6:	f000 fb21 	bl	800a90c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a2ca:	4b1e      	ldr	r3, [pc, #120]	@ (800a344 <xTimerCreateTimerTask+0x88>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d021      	beq.n	800a316 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a2da:	1d3a      	adds	r2, r7, #4
 800a2dc:	f107 0108 	add.w	r1, r7, #8
 800a2e0:	f107 030c 	add.w	r3, r7, #12
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7fe faa3 	bl	8008830 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a2ea:	6879      	ldr	r1, [r7, #4]
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	9202      	str	r2, [sp, #8]
 800a2f2:	9301      	str	r3, [sp, #4]
 800a2f4:	2302      	movs	r3, #2
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	460a      	mov	r2, r1
 800a2fc:	4912      	ldr	r1, [pc, #72]	@ (800a348 <xTimerCreateTimerTask+0x8c>)
 800a2fe:	4813      	ldr	r0, [pc, #76]	@ (800a34c <xTimerCreateTimerTask+0x90>)
 800a300:	f7ff f87e 	bl	8009400 <xTaskCreateStatic>
 800a304:	4603      	mov	r3, r0
 800a306:	4a12      	ldr	r2, [pc, #72]	@ (800a350 <xTimerCreateTimerTask+0x94>)
 800a308:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a30a:	4b11      	ldr	r3, [pc, #68]	@ (800a350 <xTimerCreateTimerTask+0x94>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d001      	beq.n	800a316 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a312:	2301      	movs	r3, #1
 800a314:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d10d      	bne.n	800a338 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800a31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a320:	b672      	cpsid	i
 800a322:	f383 8811 	msr	BASEPRI, r3
 800a326:	f3bf 8f6f 	isb	sy
 800a32a:	f3bf 8f4f 	dsb	sy
 800a32e:	b662      	cpsie	i
 800a330:	613b      	str	r3, [r7, #16]
}
 800a332:	bf00      	nop
 800a334:	bf00      	nop
 800a336:	e7fd      	b.n	800a334 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800a338:	697b      	ldr	r3, [r7, #20]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3718      	adds	r7, #24
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	20000fbc 	.word	0x20000fbc
 800a348:	0800cda8 	.word	0x0800cda8
 800a34c:	0800a495 	.word	0x0800a495
 800a350:	20000fc0 	.word	0x20000fc0

0800a354 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b08a      	sub	sp, #40	@ 0x28
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	607a      	str	r2, [r7, #4]
 800a360:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a362:	2300      	movs	r3, #0
 800a364:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d10d      	bne.n	800a388 <xTimerGenericCommand+0x34>
	__asm volatile
 800a36c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a370:	b672      	cpsid	i
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	b662      	cpsie	i
 800a380:	623b      	str	r3, [r7, #32]
}
 800a382:	bf00      	nop
 800a384:	bf00      	nop
 800a386:	e7fd      	b.n	800a384 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a388:	4b19      	ldr	r3, [pc, #100]	@ (800a3f0 <xTimerGenericCommand+0x9c>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d02a      	beq.n	800a3e6 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	2b05      	cmp	r3, #5
 800a3a0:	dc18      	bgt.n	800a3d4 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a3a2:	f7ff fea5 	bl	800a0f0 <xTaskGetSchedulerState>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	d109      	bne.n	800a3c0 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a3ac:	4b10      	ldr	r3, [pc, #64]	@ (800a3f0 <xTimerGenericCommand+0x9c>)
 800a3ae:	6818      	ldr	r0, [r3, #0]
 800a3b0:	f107 0110 	add.w	r1, r7, #16
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3b8:	f7fe fc1e 	bl	8008bf8 <xQueueGenericSend>
 800a3bc:	6278      	str	r0, [r7, #36]	@ 0x24
 800a3be:	e012      	b.n	800a3e6 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a3c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a3f0 <xTimerGenericCommand+0x9c>)
 800a3c2:	6818      	ldr	r0, [r3, #0]
 800a3c4:	f107 0110 	add.w	r1, r7, #16
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f7fe fc14 	bl	8008bf8 <xQueueGenericSend>
 800a3d0:	6278      	str	r0, [r7, #36]	@ 0x24
 800a3d2:	e008      	b.n	800a3e6 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a3d4:	4b06      	ldr	r3, [pc, #24]	@ (800a3f0 <xTimerGenericCommand+0x9c>)
 800a3d6:	6818      	ldr	r0, [r3, #0]
 800a3d8:	f107 0110 	add.w	r1, r7, #16
 800a3dc:	2300      	movs	r3, #0
 800a3de:	683a      	ldr	r2, [r7, #0]
 800a3e0:	f7fe fd14 	bl	8008e0c <xQueueGenericSendFromISR>
 800a3e4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3728      	adds	r7, #40	@ 0x28
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	20000fbc 	.word	0x20000fbc

0800a3f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b088      	sub	sp, #32
 800a3f8:	af02      	add	r7, sp, #8
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3fe:	4b24      	ldr	r3, [pc, #144]	@ (800a490 <prvProcessExpiredTimer+0x9c>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	68db      	ldr	r3, [r3, #12]
 800a404:	68db      	ldr	r3, [r3, #12]
 800a406:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	3304      	adds	r3, #4
 800a40c:	4618      	mov	r0, r3
 800a40e:	f7fe fab3 	bl	8008978 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a418:	f003 0304 	and.w	r3, r3, #4
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d025      	beq.n	800a46c <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	699a      	ldr	r2, [r3, #24]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	18d1      	adds	r1, r2, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	683a      	ldr	r2, [r7, #0]
 800a42c:	6978      	ldr	r0, [r7, #20]
 800a42e:	f000 f8d7 	bl	800a5e0 <prvInsertTimerInActiveList>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d022      	beq.n	800a47e <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a438:	2300      	movs	r3, #0
 800a43a:	9300      	str	r3, [sp, #0]
 800a43c:	2300      	movs	r3, #0
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	2100      	movs	r1, #0
 800a442:	6978      	ldr	r0, [r7, #20]
 800a444:	f7ff ff86 	bl	800a354 <xTimerGenericCommand>
 800a448:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d116      	bne.n	800a47e <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800a450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a454:	b672      	cpsid	i
 800a456:	f383 8811 	msr	BASEPRI, r3
 800a45a:	f3bf 8f6f 	isb	sy
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	b662      	cpsie	i
 800a464:	60fb      	str	r3, [r7, #12]
}
 800a466:	bf00      	nop
 800a468:	bf00      	nop
 800a46a:	e7fd      	b.n	800a468 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a472:	f023 0301 	bic.w	r3, r3, #1
 800a476:	b2da      	uxtb	r2, r3
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	6a1b      	ldr	r3, [r3, #32]
 800a482:	6978      	ldr	r0, [r7, #20]
 800a484:	4798      	blx	r3
}
 800a486:	bf00      	nop
 800a488:	3718      	adds	r7, #24
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	20000fb4 	.word	0x20000fb4

0800a494 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a49c:	f107 0308 	add.w	r3, r7, #8
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f000 f859 	bl	800a558 <prvGetNextExpireTime>
 800a4a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	68f8      	ldr	r0, [r7, #12]
 800a4ae:	f000 f805 	bl	800a4bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a4b2:	f000 f8d7 	bl	800a664 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a4b6:	bf00      	nop
 800a4b8:	e7f0      	b.n	800a49c <prvTimerTask+0x8>
	...

0800a4bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a4c6:	f7ff fa0d 	bl	80098e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4ca:	f107 0308 	add.w	r3, r7, #8
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f000 f866 	bl	800a5a0 <prvSampleTimeNow>
 800a4d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d130      	bne.n	800a53e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d10a      	bne.n	800a4f8 <prvProcessTimerOrBlockTask+0x3c>
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d806      	bhi.n	800a4f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a4ea:	f7ff fa09 	bl	8009900 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a4ee:	68f9      	ldr	r1, [r7, #12]
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f7ff ff7f 	bl	800a3f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a4f6:	e024      	b.n	800a542 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d008      	beq.n	800a510 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a4fe:	4b13      	ldr	r3, [pc, #76]	@ (800a54c <prvProcessTimerOrBlockTask+0x90>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d101      	bne.n	800a50c <prvProcessTimerOrBlockTask+0x50>
 800a508:	2301      	movs	r3, #1
 800a50a:	e000      	b.n	800a50e <prvProcessTimerOrBlockTask+0x52>
 800a50c:	2300      	movs	r3, #0
 800a50e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a510:	4b0f      	ldr	r3, [pc, #60]	@ (800a550 <prvProcessTimerOrBlockTask+0x94>)
 800a512:	6818      	ldr	r0, [r3, #0]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	1ad3      	subs	r3, r2, r3
 800a51a:	683a      	ldr	r2, [r7, #0]
 800a51c:	4619      	mov	r1, r3
 800a51e:	f7fe ff3b 	bl	8009398 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a522:	f7ff f9ed 	bl	8009900 <xTaskResumeAll>
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d10a      	bne.n	800a542 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a52c:	4b09      	ldr	r3, [pc, #36]	@ (800a554 <prvProcessTimerOrBlockTask+0x98>)
 800a52e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a532:	601a      	str	r2, [r3, #0]
 800a534:	f3bf 8f4f 	dsb	sy
 800a538:	f3bf 8f6f 	isb	sy
}
 800a53c:	e001      	b.n	800a542 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a53e:	f7ff f9df 	bl	8009900 <xTaskResumeAll>
}
 800a542:	bf00      	nop
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	20000fb8 	.word	0x20000fb8
 800a550:	20000fbc 	.word	0x20000fbc
 800a554:	e000ed04 	.word	0xe000ed04

0800a558 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a558:	b480      	push	{r7}
 800a55a:	b085      	sub	sp, #20
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a560:	4b0e      	ldr	r3, [pc, #56]	@ (800a59c <prvGetNextExpireTime+0x44>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d101      	bne.n	800a56e <prvGetNextExpireTime+0x16>
 800a56a:	2201      	movs	r2, #1
 800a56c:	e000      	b.n	800a570 <prvGetNextExpireTime+0x18>
 800a56e:	2200      	movs	r2, #0
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d105      	bne.n	800a588 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a57c:	4b07      	ldr	r3, [pc, #28]	@ (800a59c <prvGetNextExpireTime+0x44>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	68db      	ldr	r3, [r3, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	60fb      	str	r3, [r7, #12]
 800a586:	e001      	b.n	800a58c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a588:	2300      	movs	r3, #0
 800a58a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a58c:	68fb      	ldr	r3, [r7, #12]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3714      	adds	r7, #20
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	20000fb4 	.word	0x20000fb4

0800a5a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a5a8:	f7ff fa4a 	bl	8009a40 <xTaskGetTickCount>
 800a5ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a5ae:	4b0b      	ldr	r3, [pc, #44]	@ (800a5dc <prvSampleTimeNow+0x3c>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	68fa      	ldr	r2, [r7, #12]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d205      	bcs.n	800a5c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a5b8:	f000 f940 	bl	800a83c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	601a      	str	r2, [r3, #0]
 800a5c2:	e002      	b.n	800a5ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a5ca:	4a04      	ldr	r2, [pc, #16]	@ (800a5dc <prvSampleTimeNow+0x3c>)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	20000fc4 	.word	0x20000fc4

0800a5e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b086      	sub	sp, #24
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
 800a5ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	68ba      	ldr	r2, [r7, #8]
 800a5f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	68fa      	ldr	r2, [r7, #12]
 800a5fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a5fe:	68ba      	ldr	r2, [r7, #8]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	429a      	cmp	r2, r3
 800a604:	d812      	bhi.n	800a62c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	1ad2      	subs	r2, r2, r3
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	699b      	ldr	r3, [r3, #24]
 800a610:	429a      	cmp	r2, r3
 800a612:	d302      	bcc.n	800a61a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a614:	2301      	movs	r3, #1
 800a616:	617b      	str	r3, [r7, #20]
 800a618:	e01b      	b.n	800a652 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a61a:	4b10      	ldr	r3, [pc, #64]	@ (800a65c <prvInsertTimerInActiveList+0x7c>)
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	3304      	adds	r3, #4
 800a622:	4619      	mov	r1, r3
 800a624:	4610      	mov	r0, r2
 800a626:	f7fe f96e 	bl	8008906 <vListInsert>
 800a62a:	e012      	b.n	800a652 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	429a      	cmp	r2, r3
 800a632:	d206      	bcs.n	800a642 <prvInsertTimerInActiveList+0x62>
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d302      	bcc.n	800a642 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a63c:	2301      	movs	r3, #1
 800a63e:	617b      	str	r3, [r7, #20]
 800a640:	e007      	b.n	800a652 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a642:	4b07      	ldr	r3, [pc, #28]	@ (800a660 <prvInsertTimerInActiveList+0x80>)
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	3304      	adds	r3, #4
 800a64a:	4619      	mov	r1, r3
 800a64c:	4610      	mov	r0, r2
 800a64e:	f7fe f95a 	bl	8008906 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a652:	697b      	ldr	r3, [r7, #20]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3718      	adds	r7, #24
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	20000fb8 	.word	0x20000fb8
 800a660:	20000fb4 	.word	0x20000fb4

0800a664 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b08e      	sub	sp, #56	@ 0x38
 800a668:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a66a:	e0d4      	b.n	800a816 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	da1b      	bge.n	800a6aa <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a672:	1d3b      	adds	r3, r7, #4
 800a674:	3304      	adds	r3, #4
 800a676:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d10d      	bne.n	800a69a <prvProcessReceivedCommands+0x36>
	__asm volatile
 800a67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a682:	b672      	cpsid	i
 800a684:	f383 8811 	msr	BASEPRI, r3
 800a688:	f3bf 8f6f 	isb	sy
 800a68c:	f3bf 8f4f 	dsb	sy
 800a690:	b662      	cpsie	i
 800a692:	61fb      	str	r3, [r7, #28]
}
 800a694:	bf00      	nop
 800a696:	bf00      	nop
 800a698:	e7fd      	b.n	800a696 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a69a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6a0:	6850      	ldr	r0, [r2, #4]
 800a6a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6a4:	6892      	ldr	r2, [r2, #8]
 800a6a6:	4611      	mov	r1, r2
 800a6a8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	f2c0 80b2 	blt.w	800a816 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b8:	695b      	ldr	r3, [r3, #20]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d004      	beq.n	800a6c8 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6c0:	3304      	adds	r3, #4
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7fe f958 	bl	8008978 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a6c8:	463b      	mov	r3, r7
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7ff ff68 	bl	800a5a0 <prvSampleTimeNow>
 800a6d0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2b09      	cmp	r3, #9
 800a6d6:	f200 809b 	bhi.w	800a810 <prvProcessReceivedCommands+0x1ac>
 800a6da:	a201      	add	r2, pc, #4	@ (adr r2, 800a6e0 <prvProcessReceivedCommands+0x7c>)
 800a6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e0:	0800a709 	.word	0x0800a709
 800a6e4:	0800a709 	.word	0x0800a709
 800a6e8:	0800a709 	.word	0x0800a709
 800a6ec:	0800a783 	.word	0x0800a783
 800a6f0:	0800a797 	.word	0x0800a797
 800a6f4:	0800a7e7 	.word	0x0800a7e7
 800a6f8:	0800a709 	.word	0x0800a709
 800a6fc:	0800a709 	.word	0x0800a709
 800a700:	0800a783 	.word	0x0800a783
 800a704:	0800a797 	.word	0x0800a797
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a70a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a70e:	f043 0301 	orr.w	r3, r3, #1
 800a712:	b2da      	uxtb	r2, r3
 800a714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a716:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a71a:	68ba      	ldr	r2, [r7, #8]
 800a71c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a71e:	699b      	ldr	r3, [r3, #24]
 800a720:	18d1      	adds	r1, r2, r3
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a726:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a728:	f7ff ff5a 	bl	800a5e0 <prvInsertTimerInActiveList>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d070      	beq.n	800a814 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a734:	6a1b      	ldr	r3, [r3, #32]
 800a736:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a738:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a73a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a73c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a740:	f003 0304 	and.w	r3, r3, #4
 800a744:	2b00      	cmp	r3, #0
 800a746:	d065      	beq.n	800a814 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a748:	68ba      	ldr	r2, [r7, #8]
 800a74a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a74c:	699b      	ldr	r3, [r3, #24]
 800a74e:	441a      	add	r2, r3
 800a750:	2300      	movs	r3, #0
 800a752:	9300      	str	r3, [sp, #0]
 800a754:	2300      	movs	r3, #0
 800a756:	2100      	movs	r1, #0
 800a758:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a75a:	f7ff fdfb 	bl	800a354 <xTimerGenericCommand>
 800a75e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a760:	6a3b      	ldr	r3, [r7, #32]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d156      	bne.n	800a814 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800a766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a76a:	b672      	cpsid	i
 800a76c:	f383 8811 	msr	BASEPRI, r3
 800a770:	f3bf 8f6f 	isb	sy
 800a774:	f3bf 8f4f 	dsb	sy
 800a778:	b662      	cpsie	i
 800a77a:	61bb      	str	r3, [r7, #24]
}
 800a77c:	bf00      	nop
 800a77e:	bf00      	nop
 800a780:	e7fd      	b.n	800a77e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a784:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a788:	f023 0301 	bic.w	r3, r3, #1
 800a78c:	b2da      	uxtb	r2, r3
 800a78e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a790:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a794:	e03f      	b.n	800a816 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a798:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a79c:	f043 0301 	orr.w	r3, r3, #1
 800a7a0:	b2da      	uxtb	r2, r3
 800a7a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a7a8:	68ba      	ldr	r2, [r7, #8]
 800a7aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a7ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7b0:	699b      	ldr	r3, [r3, #24]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d10d      	bne.n	800a7d2 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800a7b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ba:	b672      	cpsid	i
 800a7bc:	f383 8811 	msr	BASEPRI, r3
 800a7c0:	f3bf 8f6f 	isb	sy
 800a7c4:	f3bf 8f4f 	dsb	sy
 800a7c8:	b662      	cpsie	i
 800a7ca:	617b      	str	r3, [r7, #20]
}
 800a7cc:	bf00      	nop
 800a7ce:	bf00      	nop
 800a7d0:	e7fd      	b.n	800a7ce <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d4:	699a      	ldr	r2, [r3, #24]
 800a7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d8:	18d1      	adds	r1, r2, r3
 800a7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7e0:	f7ff fefe 	bl	800a5e0 <prvInsertTimerInActiveList>
					break;
 800a7e4:	e017      	b.n	800a816 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a7e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7ec:	f003 0302 	and.w	r3, r3, #2
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d103      	bne.n	800a7fc <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800a7f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7f6:	f000 fbd5 	bl	800afa4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a7fa:	e00c      	b.n	800a816 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a802:	f023 0301 	bic.w	r3, r3, #1
 800a806:	b2da      	uxtb	r2, r3
 800a808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a80a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a80e:	e002      	b.n	800a816 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800a810:	bf00      	nop
 800a812:	e000      	b.n	800a816 <prvProcessReceivedCommands+0x1b2>
					break;
 800a814:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a816:	4b08      	ldr	r3, [pc, #32]	@ (800a838 <prvProcessReceivedCommands+0x1d4>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	1d39      	adds	r1, r7, #4
 800a81c:	2200      	movs	r2, #0
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fe fb98 	bl	8008f54 <xQueueReceive>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	f47f af20 	bne.w	800a66c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a82c:	bf00      	nop
 800a82e:	bf00      	nop
 800a830:	3730      	adds	r7, #48	@ 0x30
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	20000fbc 	.word	0x20000fbc

0800a83c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b088      	sub	sp, #32
 800a840:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a842:	e04b      	b.n	800a8dc <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a844:	4b2f      	ldr	r3, [pc, #188]	@ (800a904 <prvSwitchTimerLists+0xc8>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a84e:	4b2d      	ldr	r3, [pc, #180]	@ (800a904 <prvSwitchTimerLists+0xc8>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	3304      	adds	r3, #4
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7fe f88b 	bl	8008978 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6a1b      	ldr	r3, [r3, #32]
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a870:	f003 0304 	and.w	r3, r3, #4
 800a874:	2b00      	cmp	r3, #0
 800a876:	d031      	beq.n	800a8dc <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	699b      	ldr	r3, [r3, #24]
 800a87c:	693a      	ldr	r2, [r7, #16]
 800a87e:	4413      	add	r3, r2
 800a880:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	429a      	cmp	r2, r3
 800a888:	d90e      	bls.n	800a8a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	68fa      	ldr	r2, [r7, #12]
 800a894:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a896:	4b1b      	ldr	r3, [pc, #108]	@ (800a904 <prvSwitchTimerLists+0xc8>)
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	3304      	adds	r3, #4
 800a89e:	4619      	mov	r1, r3
 800a8a0:	4610      	mov	r0, r2
 800a8a2:	f7fe f830 	bl	8008906 <vListInsert>
 800a8a6:	e019      	b.n	800a8dc <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	9300      	str	r3, [sp, #0]
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	693a      	ldr	r2, [r7, #16]
 800a8b0:	2100      	movs	r1, #0
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f7ff fd4e 	bl	800a354 <xTimerGenericCommand>
 800a8b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d10d      	bne.n	800a8dc <prvSwitchTimerLists+0xa0>
	__asm volatile
 800a8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c4:	b672      	cpsid	i
 800a8c6:	f383 8811 	msr	BASEPRI, r3
 800a8ca:	f3bf 8f6f 	isb	sy
 800a8ce:	f3bf 8f4f 	dsb	sy
 800a8d2:	b662      	cpsie	i
 800a8d4:	603b      	str	r3, [r7, #0]
}
 800a8d6:	bf00      	nop
 800a8d8:	bf00      	nop
 800a8da:	e7fd      	b.n	800a8d8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a8dc:	4b09      	ldr	r3, [pc, #36]	@ (800a904 <prvSwitchTimerLists+0xc8>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d1ae      	bne.n	800a844 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a8e6:	4b07      	ldr	r3, [pc, #28]	@ (800a904 <prvSwitchTimerLists+0xc8>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a8ec:	4b06      	ldr	r3, [pc, #24]	@ (800a908 <prvSwitchTimerLists+0xcc>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a04      	ldr	r2, [pc, #16]	@ (800a904 <prvSwitchTimerLists+0xc8>)
 800a8f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a8f4:	4a04      	ldr	r2, [pc, #16]	@ (800a908 <prvSwitchTimerLists+0xcc>)
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	6013      	str	r3, [r2, #0]
}
 800a8fa:	bf00      	nop
 800a8fc:	3718      	adds	r7, #24
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	20000fb4 	.word	0x20000fb4
 800a908:	20000fb8 	.word	0x20000fb8

0800a90c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a912:	f000 f94b 	bl	800abac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a916:	4b15      	ldr	r3, [pc, #84]	@ (800a96c <prvCheckForValidListAndQueue+0x60>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d120      	bne.n	800a960 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a91e:	4814      	ldr	r0, [pc, #80]	@ (800a970 <prvCheckForValidListAndQueue+0x64>)
 800a920:	f7fd ffa0 	bl	8008864 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a924:	4813      	ldr	r0, [pc, #76]	@ (800a974 <prvCheckForValidListAndQueue+0x68>)
 800a926:	f7fd ff9d 	bl	8008864 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a92a:	4b13      	ldr	r3, [pc, #76]	@ (800a978 <prvCheckForValidListAndQueue+0x6c>)
 800a92c:	4a10      	ldr	r2, [pc, #64]	@ (800a970 <prvCheckForValidListAndQueue+0x64>)
 800a92e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a930:	4b12      	ldr	r3, [pc, #72]	@ (800a97c <prvCheckForValidListAndQueue+0x70>)
 800a932:	4a10      	ldr	r2, [pc, #64]	@ (800a974 <prvCheckForValidListAndQueue+0x68>)
 800a934:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a936:	2300      	movs	r3, #0
 800a938:	9300      	str	r3, [sp, #0]
 800a93a:	4b11      	ldr	r3, [pc, #68]	@ (800a980 <prvCheckForValidListAndQueue+0x74>)
 800a93c:	4a11      	ldr	r2, [pc, #68]	@ (800a984 <prvCheckForValidListAndQueue+0x78>)
 800a93e:	2110      	movs	r1, #16
 800a940:	200a      	movs	r0, #10
 800a942:	f7fe f8af 	bl	8008aa4 <xQueueGenericCreateStatic>
 800a946:	4603      	mov	r3, r0
 800a948:	4a08      	ldr	r2, [pc, #32]	@ (800a96c <prvCheckForValidListAndQueue+0x60>)
 800a94a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a94c:	4b07      	ldr	r3, [pc, #28]	@ (800a96c <prvCheckForValidListAndQueue+0x60>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d005      	beq.n	800a960 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a954:	4b05      	ldr	r3, [pc, #20]	@ (800a96c <prvCheckForValidListAndQueue+0x60>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	490b      	ldr	r1, [pc, #44]	@ (800a988 <prvCheckForValidListAndQueue+0x7c>)
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7fe fcf2 	bl	8009344 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a960:	f000 f95a 	bl	800ac18 <vPortExitCritical>
}
 800a964:	bf00      	nop
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	20000fbc 	.word	0x20000fbc
 800a970:	20000f8c 	.word	0x20000f8c
 800a974:	20000fa0 	.word	0x20000fa0
 800a978:	20000fb4 	.word	0x20000fb4
 800a97c:	20000fb8 	.word	0x20000fb8
 800a980:	20001068 	.word	0x20001068
 800a984:	20000fc8 	.word	0x20000fc8
 800a988:	0800cdb0 	.word	0x0800cdb0

0800a98c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	3b04      	subs	r3, #4
 800a99c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a9a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	3b04      	subs	r3, #4
 800a9aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	f023 0201 	bic.w	r2, r3, #1
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	3b04      	subs	r3, #4
 800a9ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a9bc:	4a0c      	ldr	r2, [pc, #48]	@ (800a9f0 <pxPortInitialiseStack+0x64>)
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	3b14      	subs	r3, #20
 800a9c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	3b04      	subs	r3, #4
 800a9d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f06f 0202 	mvn.w	r2, #2
 800a9da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	3b20      	subs	r3, #32
 800a9e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3714      	adds	r7, #20
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr
 800a9f0:	0800a9f5 	.word	0x0800a9f5

0800a9f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a9fe:	4b15      	ldr	r3, [pc, #84]	@ (800aa54 <prvTaskExitError+0x60>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa06:	d00d      	beq.n	800aa24 <prvTaskExitError+0x30>
	__asm volatile
 800aa08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa0c:	b672      	cpsid	i
 800aa0e:	f383 8811 	msr	BASEPRI, r3
 800aa12:	f3bf 8f6f 	isb	sy
 800aa16:	f3bf 8f4f 	dsb	sy
 800aa1a:	b662      	cpsie	i
 800aa1c:	60fb      	str	r3, [r7, #12]
}
 800aa1e:	bf00      	nop
 800aa20:	bf00      	nop
 800aa22:	e7fd      	b.n	800aa20 <prvTaskExitError+0x2c>
	__asm volatile
 800aa24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa28:	b672      	cpsid	i
 800aa2a:	f383 8811 	msr	BASEPRI, r3
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f3bf 8f4f 	dsb	sy
 800aa36:	b662      	cpsie	i
 800aa38:	60bb      	str	r3, [r7, #8]
}
 800aa3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aa3c:	bf00      	nop
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d0fc      	beq.n	800aa3e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aa44:	bf00      	nop
 800aa46:	bf00      	nop
 800aa48:	3714      	adds	r7, #20
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	20000098 	.word	0x20000098
	...

0800aa60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa60:	4b07      	ldr	r3, [pc, #28]	@ (800aa80 <pxCurrentTCBConst2>)
 800aa62:	6819      	ldr	r1, [r3, #0]
 800aa64:	6808      	ldr	r0, [r1, #0]
 800aa66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa6a:	f380 8809 	msr	PSP, r0
 800aa6e:	f3bf 8f6f 	isb	sy
 800aa72:	f04f 0000 	mov.w	r0, #0
 800aa76:	f380 8811 	msr	BASEPRI, r0
 800aa7a:	4770      	bx	lr
 800aa7c:	f3af 8000 	nop.w

0800aa80 <pxCurrentTCBConst2>:
 800aa80:	20000a8c 	.word	0x20000a8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa84:	bf00      	nop
 800aa86:	bf00      	nop

0800aa88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aa88:	4808      	ldr	r0, [pc, #32]	@ (800aaac <prvPortStartFirstTask+0x24>)
 800aa8a:	6800      	ldr	r0, [r0, #0]
 800aa8c:	6800      	ldr	r0, [r0, #0]
 800aa8e:	f380 8808 	msr	MSP, r0
 800aa92:	f04f 0000 	mov.w	r0, #0
 800aa96:	f380 8814 	msr	CONTROL, r0
 800aa9a:	b662      	cpsie	i
 800aa9c:	b661      	cpsie	f
 800aa9e:	f3bf 8f4f 	dsb	sy
 800aaa2:	f3bf 8f6f 	isb	sy
 800aaa6:	df00      	svc	0
 800aaa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aaaa:	bf00      	nop
 800aaac:	e000ed08 	.word	0xe000ed08

0800aab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aab6:	4b37      	ldr	r3, [pc, #220]	@ (800ab94 <xPortStartScheduler+0xe4>)
 800aab8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	22ff      	movs	r2, #255	@ 0xff
 800aac6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aad0:	78fb      	ldrb	r3, [r7, #3]
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800aad8:	b2da      	uxtb	r2, r3
 800aada:	4b2f      	ldr	r3, [pc, #188]	@ (800ab98 <xPortStartScheduler+0xe8>)
 800aadc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aade:	4b2f      	ldr	r3, [pc, #188]	@ (800ab9c <xPortStartScheduler+0xec>)
 800aae0:	2207      	movs	r2, #7
 800aae2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aae4:	e009      	b.n	800aafa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800aae6:	4b2d      	ldr	r3, [pc, #180]	@ (800ab9c <xPortStartScheduler+0xec>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	3b01      	subs	r3, #1
 800aaec:	4a2b      	ldr	r2, [pc, #172]	@ (800ab9c <xPortStartScheduler+0xec>)
 800aaee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aaf0:	78fb      	ldrb	r3, [r7, #3]
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	005b      	lsls	r3, r3, #1
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aafa:	78fb      	ldrb	r3, [r7, #3]
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab02:	2b80      	cmp	r3, #128	@ 0x80
 800ab04:	d0ef      	beq.n	800aae6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ab06:	4b25      	ldr	r3, [pc, #148]	@ (800ab9c <xPortStartScheduler+0xec>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f1c3 0307 	rsb	r3, r3, #7
 800ab0e:	2b04      	cmp	r3, #4
 800ab10:	d00d      	beq.n	800ab2e <xPortStartScheduler+0x7e>
	__asm volatile
 800ab12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab16:	b672      	cpsid	i
 800ab18:	f383 8811 	msr	BASEPRI, r3
 800ab1c:	f3bf 8f6f 	isb	sy
 800ab20:	f3bf 8f4f 	dsb	sy
 800ab24:	b662      	cpsie	i
 800ab26:	60bb      	str	r3, [r7, #8]
}
 800ab28:	bf00      	nop
 800ab2a:	bf00      	nop
 800ab2c:	e7fd      	b.n	800ab2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ab2e:	4b1b      	ldr	r3, [pc, #108]	@ (800ab9c <xPortStartScheduler+0xec>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	021b      	lsls	r3, r3, #8
 800ab34:	4a19      	ldr	r2, [pc, #100]	@ (800ab9c <xPortStartScheduler+0xec>)
 800ab36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab38:	4b18      	ldr	r3, [pc, #96]	@ (800ab9c <xPortStartScheduler+0xec>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ab40:	4a16      	ldr	r2, [pc, #88]	@ (800ab9c <xPortStartScheduler+0xec>)
 800ab42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	b2da      	uxtb	r2, r3
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab4c:	4b14      	ldr	r3, [pc, #80]	@ (800aba0 <xPortStartScheduler+0xf0>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a13      	ldr	r2, [pc, #76]	@ (800aba0 <xPortStartScheduler+0xf0>)
 800ab52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ab56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab58:	4b11      	ldr	r3, [pc, #68]	@ (800aba0 <xPortStartScheduler+0xf0>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a10      	ldr	r2, [pc, #64]	@ (800aba0 <xPortStartScheduler+0xf0>)
 800ab5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ab62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab64:	f000 f8dc 	bl	800ad20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab68:	4b0e      	ldr	r3, [pc, #56]	@ (800aba4 <xPortStartScheduler+0xf4>)
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab6e:	f000 f8fb 	bl	800ad68 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab72:	4b0d      	ldr	r3, [pc, #52]	@ (800aba8 <xPortStartScheduler+0xf8>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a0c      	ldr	r2, [pc, #48]	@ (800aba8 <xPortStartScheduler+0xf8>)
 800ab78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ab7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab7e:	f7ff ff83 	bl	800aa88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab82:	f7ff f829 	bl	8009bd8 <vTaskSwitchContext>
	prvTaskExitError();
 800ab86:	f7ff ff35 	bl	800a9f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3710      	adds	r7, #16
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	e000e400 	.word	0xe000e400
 800ab98:	200010b8 	.word	0x200010b8
 800ab9c:	200010bc 	.word	0x200010bc
 800aba0:	e000ed20 	.word	0xe000ed20
 800aba4:	20000098 	.word	0x20000098
 800aba8:	e000ef34 	.word	0xe000ef34

0800abac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
	__asm volatile
 800abb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb6:	b672      	cpsid	i
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	b662      	cpsie	i
 800abc6:	607b      	str	r3, [r7, #4]
}
 800abc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800abca:	4b11      	ldr	r3, [pc, #68]	@ (800ac10 <vPortEnterCritical+0x64>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	3301      	adds	r3, #1
 800abd0:	4a0f      	ldr	r2, [pc, #60]	@ (800ac10 <vPortEnterCritical+0x64>)
 800abd2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800abd4:	4b0e      	ldr	r3, [pc, #56]	@ (800ac10 <vPortEnterCritical+0x64>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d112      	bne.n	800ac02 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800abdc:	4b0d      	ldr	r3, [pc, #52]	@ (800ac14 <vPortEnterCritical+0x68>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d00d      	beq.n	800ac02 <vPortEnterCritical+0x56>
	__asm volatile
 800abe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abea:	b672      	cpsid	i
 800abec:	f383 8811 	msr	BASEPRI, r3
 800abf0:	f3bf 8f6f 	isb	sy
 800abf4:	f3bf 8f4f 	dsb	sy
 800abf8:	b662      	cpsie	i
 800abfa:	603b      	str	r3, [r7, #0]
}
 800abfc:	bf00      	nop
 800abfe:	bf00      	nop
 800ac00:	e7fd      	b.n	800abfe <vPortEnterCritical+0x52>
	}
}
 800ac02:	bf00      	nop
 800ac04:	370c      	adds	r7, #12
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop
 800ac10:	20000098 	.word	0x20000098
 800ac14:	e000ed04 	.word	0xe000ed04

0800ac18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ac1e:	4b13      	ldr	r3, [pc, #76]	@ (800ac6c <vPortExitCritical+0x54>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d10d      	bne.n	800ac42 <vPortExitCritical+0x2a>
	__asm volatile
 800ac26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac2a:	b672      	cpsid	i
 800ac2c:	f383 8811 	msr	BASEPRI, r3
 800ac30:	f3bf 8f6f 	isb	sy
 800ac34:	f3bf 8f4f 	dsb	sy
 800ac38:	b662      	cpsie	i
 800ac3a:	607b      	str	r3, [r7, #4]
}
 800ac3c:	bf00      	nop
 800ac3e:	bf00      	nop
 800ac40:	e7fd      	b.n	800ac3e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ac42:	4b0a      	ldr	r3, [pc, #40]	@ (800ac6c <vPortExitCritical+0x54>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	3b01      	subs	r3, #1
 800ac48:	4a08      	ldr	r2, [pc, #32]	@ (800ac6c <vPortExitCritical+0x54>)
 800ac4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac4c:	4b07      	ldr	r3, [pc, #28]	@ (800ac6c <vPortExitCritical+0x54>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d105      	bne.n	800ac60 <vPortExitCritical+0x48>
 800ac54:	2300      	movs	r3, #0
 800ac56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	f383 8811 	msr	BASEPRI, r3
}
 800ac5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac60:	bf00      	nop
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr
 800ac6c:	20000098 	.word	0x20000098

0800ac70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac70:	f3ef 8009 	mrs	r0, PSP
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	4b15      	ldr	r3, [pc, #84]	@ (800acd0 <pxCurrentTCBConst>)
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	f01e 0f10 	tst.w	lr, #16
 800ac80:	bf08      	it	eq
 800ac82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8a:	6010      	str	r0, [r2, #0]
 800ac8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ac90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ac94:	b672      	cpsid	i
 800ac96:	f380 8811 	msr	BASEPRI, r0
 800ac9a:	f3bf 8f4f 	dsb	sy
 800ac9e:	f3bf 8f6f 	isb	sy
 800aca2:	b662      	cpsie	i
 800aca4:	f7fe ff98 	bl	8009bd8 <vTaskSwitchContext>
 800aca8:	f04f 0000 	mov.w	r0, #0
 800acac:	f380 8811 	msr	BASEPRI, r0
 800acb0:	bc09      	pop	{r0, r3}
 800acb2:	6819      	ldr	r1, [r3, #0]
 800acb4:	6808      	ldr	r0, [r1, #0]
 800acb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acba:	f01e 0f10 	tst.w	lr, #16
 800acbe:	bf08      	it	eq
 800acc0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800acc4:	f380 8809 	msr	PSP, r0
 800acc8:	f3bf 8f6f 	isb	sy
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop

0800acd0 <pxCurrentTCBConst>:
 800acd0:	20000a8c 	.word	0x20000a8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800acd4:	bf00      	nop
 800acd6:	bf00      	nop

0800acd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
	__asm volatile
 800acde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ace2:	b672      	cpsid	i
 800ace4:	f383 8811 	msr	BASEPRI, r3
 800ace8:	f3bf 8f6f 	isb	sy
 800acec:	f3bf 8f4f 	dsb	sy
 800acf0:	b662      	cpsie	i
 800acf2:	607b      	str	r3, [r7, #4]
}
 800acf4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800acf6:	f7fe feb3 	bl	8009a60 <xTaskIncrementTick>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d003      	beq.n	800ad08 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ad00:	4b06      	ldr	r3, [pc, #24]	@ (800ad1c <SysTick_Handler+0x44>)
 800ad02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad06:	601a      	str	r2, [r3, #0]
 800ad08:	2300      	movs	r3, #0
 800ad0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	f383 8811 	msr	BASEPRI, r3
}
 800ad12:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ad14:	bf00      	nop
 800ad16:	3708      	adds	r7, #8
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	e000ed04 	.word	0xe000ed04

0800ad20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ad20:	b480      	push	{r7}
 800ad22:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ad24:	4b0b      	ldr	r3, [pc, #44]	@ (800ad54 <vPortSetupTimerInterrupt+0x34>)
 800ad26:	2200      	movs	r2, #0
 800ad28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ad2a:	4b0b      	ldr	r3, [pc, #44]	@ (800ad58 <vPortSetupTimerInterrupt+0x38>)
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ad30:	4b0a      	ldr	r3, [pc, #40]	@ (800ad5c <vPortSetupTimerInterrupt+0x3c>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a0a      	ldr	r2, [pc, #40]	@ (800ad60 <vPortSetupTimerInterrupt+0x40>)
 800ad36:	fba2 2303 	umull	r2, r3, r2, r3
 800ad3a:	099b      	lsrs	r3, r3, #6
 800ad3c:	4a09      	ldr	r2, [pc, #36]	@ (800ad64 <vPortSetupTimerInterrupt+0x44>)
 800ad3e:	3b01      	subs	r3, #1
 800ad40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ad42:	4b04      	ldr	r3, [pc, #16]	@ (800ad54 <vPortSetupTimerInterrupt+0x34>)
 800ad44:	2207      	movs	r2, #7
 800ad46:	601a      	str	r2, [r3, #0]
}
 800ad48:	bf00      	nop
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr
 800ad52:	bf00      	nop
 800ad54:	e000e010 	.word	0xe000e010
 800ad58:	e000e018 	.word	0xe000e018
 800ad5c:	20000000 	.word	0x20000000
 800ad60:	10624dd3 	.word	0x10624dd3
 800ad64:	e000e014 	.word	0xe000e014

0800ad68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad68:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ad78 <vPortEnableVFP+0x10>
 800ad6c:	6801      	ldr	r1, [r0, #0]
 800ad6e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ad72:	6001      	str	r1, [r0, #0]
 800ad74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad76:	bf00      	nop
 800ad78:	e000ed88 	.word	0xe000ed88

0800ad7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b085      	sub	sp, #20
 800ad80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ad82:	f3ef 8305 	mrs	r3, IPSR
 800ad86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2b0f      	cmp	r3, #15
 800ad8c:	d917      	bls.n	800adbe <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ad8e:	4a1a      	ldr	r2, [pc, #104]	@ (800adf8 <vPortValidateInterruptPriority+0x7c>)
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	4413      	add	r3, r2
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ad98:	4b18      	ldr	r3, [pc, #96]	@ (800adfc <vPortValidateInterruptPriority+0x80>)
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	7afa      	ldrb	r2, [r7, #11]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d20d      	bcs.n	800adbe <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800ada2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada6:	b672      	cpsid	i
 800ada8:	f383 8811 	msr	BASEPRI, r3
 800adac:	f3bf 8f6f 	isb	sy
 800adb0:	f3bf 8f4f 	dsb	sy
 800adb4:	b662      	cpsie	i
 800adb6:	607b      	str	r3, [r7, #4]
}
 800adb8:	bf00      	nop
 800adba:	bf00      	nop
 800adbc:	e7fd      	b.n	800adba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800adbe:	4b10      	ldr	r3, [pc, #64]	@ (800ae00 <vPortValidateInterruptPriority+0x84>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800adc6:	4b0f      	ldr	r3, [pc, #60]	@ (800ae04 <vPortValidateInterruptPriority+0x88>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d90d      	bls.n	800adea <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800adce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800add2:	b672      	cpsid	i
 800add4:	f383 8811 	msr	BASEPRI, r3
 800add8:	f3bf 8f6f 	isb	sy
 800addc:	f3bf 8f4f 	dsb	sy
 800ade0:	b662      	cpsie	i
 800ade2:	603b      	str	r3, [r7, #0]
}
 800ade4:	bf00      	nop
 800ade6:	bf00      	nop
 800ade8:	e7fd      	b.n	800ade6 <vPortValidateInterruptPriority+0x6a>
	}
 800adea:	bf00      	nop
 800adec:	3714      	adds	r7, #20
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr
 800adf6:	bf00      	nop
 800adf8:	e000e3f0 	.word	0xe000e3f0
 800adfc:	200010b8 	.word	0x200010b8
 800ae00:	e000ed0c 	.word	0xe000ed0c
 800ae04:	200010bc 	.word	0x200010bc

0800ae08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b08a      	sub	sp, #40	@ 0x28
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ae10:	2300      	movs	r3, #0
 800ae12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ae14:	f7fe fd66 	bl	80098e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ae18:	4b5d      	ldr	r3, [pc, #372]	@ (800af90 <pvPortMalloc+0x188>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d101      	bne.n	800ae24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ae20:	f000 f920 	bl	800b064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ae24:	4b5b      	ldr	r3, [pc, #364]	@ (800af94 <pvPortMalloc+0x18c>)
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4013      	ands	r3, r2
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f040 8094 	bne.w	800af5a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d020      	beq.n	800ae7a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800ae38:	2208      	movs	r2, #8
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f003 0307 	and.w	r3, r3, #7
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d017      	beq.n	800ae7a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f023 0307 	bic.w	r3, r3, #7
 800ae50:	3308      	adds	r3, #8
 800ae52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f003 0307 	and.w	r3, r3, #7
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00d      	beq.n	800ae7a <pvPortMalloc+0x72>
	__asm volatile
 800ae5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae62:	b672      	cpsid	i
 800ae64:	f383 8811 	msr	BASEPRI, r3
 800ae68:	f3bf 8f6f 	isb	sy
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	b662      	cpsie	i
 800ae72:	617b      	str	r3, [r7, #20]
}
 800ae74:	bf00      	nop
 800ae76:	bf00      	nop
 800ae78:	e7fd      	b.n	800ae76 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d06c      	beq.n	800af5a <pvPortMalloc+0x152>
 800ae80:	4b45      	ldr	r3, [pc, #276]	@ (800af98 <pvPortMalloc+0x190>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d867      	bhi.n	800af5a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae8a:	4b44      	ldr	r3, [pc, #272]	@ (800af9c <pvPortMalloc+0x194>)
 800ae8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae8e:	4b43      	ldr	r3, [pc, #268]	@ (800af9c <pvPortMalloc+0x194>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae94:	e004      	b.n	800aea0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800ae96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d903      	bls.n	800aeb2 <pvPortMalloc+0xaa>
 800aeaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d1f1      	bne.n	800ae96 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aeb2:	4b37      	ldr	r3, [pc, #220]	@ (800af90 <pvPortMalloc+0x188>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d04e      	beq.n	800af5a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aebc:	6a3b      	ldr	r3, [r7, #32]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2208      	movs	r2, #8
 800aec2:	4413      	add	r3, r2
 800aec4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	6a3b      	ldr	r3, [r7, #32]
 800aecc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed0:	685a      	ldr	r2, [r3, #4]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	1ad2      	subs	r2, r2, r3
 800aed6:	2308      	movs	r3, #8
 800aed8:	005b      	lsls	r3, r3, #1
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d922      	bls.n	800af24 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	4413      	add	r3, r2
 800aee4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aee6:	69bb      	ldr	r3, [r7, #24]
 800aee8:	f003 0307 	and.w	r3, r3, #7
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d00d      	beq.n	800af0c <pvPortMalloc+0x104>
	__asm volatile
 800aef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef4:	b672      	cpsid	i
 800aef6:	f383 8811 	msr	BASEPRI, r3
 800aefa:	f3bf 8f6f 	isb	sy
 800aefe:	f3bf 8f4f 	dsb	sy
 800af02:	b662      	cpsie	i
 800af04:	613b      	str	r3, [r7, #16]
}
 800af06:	bf00      	nop
 800af08:	bf00      	nop
 800af0a:	e7fd      	b.n	800af08 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800af0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af0e:	685a      	ldr	r2, [r3, #4]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	1ad2      	subs	r2, r2, r3
 800af14:	69bb      	ldr	r3, [r7, #24]
 800af16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800af18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800af1e:	69b8      	ldr	r0, [r7, #24]
 800af20:	f000 f902 	bl	800b128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800af24:	4b1c      	ldr	r3, [pc, #112]	@ (800af98 <pvPortMalloc+0x190>)
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	1ad3      	subs	r3, r2, r3
 800af2e:	4a1a      	ldr	r2, [pc, #104]	@ (800af98 <pvPortMalloc+0x190>)
 800af30:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800af32:	4b19      	ldr	r3, [pc, #100]	@ (800af98 <pvPortMalloc+0x190>)
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	4b1a      	ldr	r3, [pc, #104]	@ (800afa0 <pvPortMalloc+0x198>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d203      	bcs.n	800af46 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800af3e:	4b16      	ldr	r3, [pc, #88]	@ (800af98 <pvPortMalloc+0x190>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4a17      	ldr	r2, [pc, #92]	@ (800afa0 <pvPortMalloc+0x198>)
 800af44:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800af46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af48:	685a      	ldr	r2, [r3, #4]
 800af4a:	4b12      	ldr	r3, [pc, #72]	@ (800af94 <pvPortMalloc+0x18c>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	431a      	orrs	r2, r3
 800af50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af52:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800af54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af56:	2200      	movs	r2, #0
 800af58:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800af5a:	f7fe fcd1 	bl	8009900 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af5e:	69fb      	ldr	r3, [r7, #28]
 800af60:	f003 0307 	and.w	r3, r3, #7
 800af64:	2b00      	cmp	r3, #0
 800af66:	d00d      	beq.n	800af84 <pvPortMalloc+0x17c>
	__asm volatile
 800af68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af6c:	b672      	cpsid	i
 800af6e:	f383 8811 	msr	BASEPRI, r3
 800af72:	f3bf 8f6f 	isb	sy
 800af76:	f3bf 8f4f 	dsb	sy
 800af7a:	b662      	cpsie	i
 800af7c:	60fb      	str	r3, [r7, #12]
}
 800af7e:	bf00      	nop
 800af80:	bf00      	nop
 800af82:	e7fd      	b.n	800af80 <pvPortMalloc+0x178>
	return pvReturn;
 800af84:	69fb      	ldr	r3, [r7, #28]
}
 800af86:	4618      	mov	r0, r3
 800af88:	3728      	adds	r7, #40	@ 0x28
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	20004cc8 	.word	0x20004cc8
 800af94:	20004cd4 	.word	0x20004cd4
 800af98:	20004ccc 	.word	0x20004ccc
 800af9c:	20004cc0 	.word	0x20004cc0
 800afa0:	20004cd0 	.word	0x20004cd0

0800afa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b086      	sub	sp, #24
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d04e      	beq.n	800b054 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800afb6:	2308      	movs	r3, #8
 800afb8:	425b      	negs	r3, r3
 800afba:	697a      	ldr	r2, [r7, #20]
 800afbc:	4413      	add	r3, r2
 800afbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	685a      	ldr	r2, [r3, #4]
 800afc8:	4b24      	ldr	r3, [pc, #144]	@ (800b05c <vPortFree+0xb8>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4013      	ands	r3, r2
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d10d      	bne.n	800afee <vPortFree+0x4a>
	__asm volatile
 800afd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd6:	b672      	cpsid	i
 800afd8:	f383 8811 	msr	BASEPRI, r3
 800afdc:	f3bf 8f6f 	isb	sy
 800afe0:	f3bf 8f4f 	dsb	sy
 800afe4:	b662      	cpsie	i
 800afe6:	60fb      	str	r3, [r7, #12]
}
 800afe8:	bf00      	nop
 800afea:	bf00      	nop
 800afec:	e7fd      	b.n	800afea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d00d      	beq.n	800b012 <vPortFree+0x6e>
	__asm volatile
 800aff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800affa:	b672      	cpsid	i
 800affc:	f383 8811 	msr	BASEPRI, r3
 800b000:	f3bf 8f6f 	isb	sy
 800b004:	f3bf 8f4f 	dsb	sy
 800b008:	b662      	cpsie	i
 800b00a:	60bb      	str	r3, [r7, #8]
}
 800b00c:	bf00      	nop
 800b00e:	bf00      	nop
 800b010:	e7fd      	b.n	800b00e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	685a      	ldr	r2, [r3, #4]
 800b016:	4b11      	ldr	r3, [pc, #68]	@ (800b05c <vPortFree+0xb8>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4013      	ands	r3, r2
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d019      	beq.n	800b054 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d115      	bne.n	800b054 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	685a      	ldr	r2, [r3, #4]
 800b02c:	4b0b      	ldr	r3, [pc, #44]	@ (800b05c <vPortFree+0xb8>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	43db      	mvns	r3, r3
 800b032:	401a      	ands	r2, r3
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b038:	f7fe fc54 	bl	80098e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	685a      	ldr	r2, [r3, #4]
 800b040:	4b07      	ldr	r3, [pc, #28]	@ (800b060 <vPortFree+0xbc>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4413      	add	r3, r2
 800b046:	4a06      	ldr	r2, [pc, #24]	@ (800b060 <vPortFree+0xbc>)
 800b048:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b04a:	6938      	ldr	r0, [r7, #16]
 800b04c:	f000 f86c 	bl	800b128 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b050:	f7fe fc56 	bl	8009900 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b054:	bf00      	nop
 800b056:	3718      	adds	r7, #24
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}
 800b05c:	20004cd4 	.word	0x20004cd4
 800b060:	20004ccc 	.word	0x20004ccc

0800b064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b064:	b480      	push	{r7}
 800b066:	b085      	sub	sp, #20
 800b068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b06a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b06e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b070:	4b27      	ldr	r3, [pc, #156]	@ (800b110 <prvHeapInit+0xac>)
 800b072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f003 0307 	and.w	r3, r3, #7
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d00c      	beq.n	800b098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	3307      	adds	r3, #7
 800b082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f023 0307 	bic.w	r3, r3, #7
 800b08a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b08c:	68ba      	ldr	r2, [r7, #8]
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	1ad3      	subs	r3, r2, r3
 800b092:	4a1f      	ldr	r2, [pc, #124]	@ (800b110 <prvHeapInit+0xac>)
 800b094:	4413      	add	r3, r2
 800b096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b09c:	4a1d      	ldr	r2, [pc, #116]	@ (800b114 <prvHeapInit+0xb0>)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b0a2:	4b1c      	ldr	r3, [pc, #112]	@ (800b114 <prvHeapInit+0xb0>)
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	68ba      	ldr	r2, [r7, #8]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b0b0:	2208      	movs	r2, #8
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	1a9b      	subs	r3, r3, r2
 800b0b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f023 0307 	bic.w	r3, r3, #7
 800b0be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	4a15      	ldr	r2, [pc, #84]	@ (800b118 <prvHeapInit+0xb4>)
 800b0c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b0c6:	4b14      	ldr	r3, [pc, #80]	@ (800b118 <prvHeapInit+0xb4>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b0ce:	4b12      	ldr	r3, [pc, #72]	@ (800b118 <prvHeapInit+0xb4>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	1ad2      	subs	r2, r2, r3
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b0e4:	4b0c      	ldr	r3, [pc, #48]	@ (800b118 <prvHeapInit+0xb4>)
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	4a0a      	ldr	r2, [pc, #40]	@ (800b11c <prvHeapInit+0xb8>)
 800b0f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	4a09      	ldr	r2, [pc, #36]	@ (800b120 <prvHeapInit+0xbc>)
 800b0fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b0fc:	4b09      	ldr	r3, [pc, #36]	@ (800b124 <prvHeapInit+0xc0>)
 800b0fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b102:	601a      	str	r2, [r3, #0]
}
 800b104:	bf00      	nop
 800b106:	3714      	adds	r7, #20
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr
 800b110:	200010c0 	.word	0x200010c0
 800b114:	20004cc0 	.word	0x20004cc0
 800b118:	20004cc8 	.word	0x20004cc8
 800b11c:	20004cd0 	.word	0x20004cd0
 800b120:	20004ccc 	.word	0x20004ccc
 800b124:	20004cd4 	.word	0x20004cd4

0800b128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b128:	b480      	push	{r7}
 800b12a:	b085      	sub	sp, #20
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b130:	4b28      	ldr	r3, [pc, #160]	@ (800b1d4 <prvInsertBlockIntoFreeList+0xac>)
 800b132:	60fb      	str	r3, [r7, #12]
 800b134:	e002      	b.n	800b13c <prvInsertBlockIntoFreeList+0x14>
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	60fb      	str	r3, [r7, #12]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	429a      	cmp	r2, r3
 800b144:	d8f7      	bhi.n	800b136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	68ba      	ldr	r2, [r7, #8]
 800b150:	4413      	add	r3, r2
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	429a      	cmp	r2, r3
 800b156:	d108      	bne.n	800b16a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	685a      	ldr	r2, [r3, #4]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	441a      	add	r2, r3
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	68ba      	ldr	r2, [r7, #8]
 800b174:	441a      	add	r2, r3
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d118      	bne.n	800b1b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	4b15      	ldr	r3, [pc, #84]	@ (800b1d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	429a      	cmp	r2, r3
 800b188:	d00d      	beq.n	800b1a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	685a      	ldr	r2, [r3, #4]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	441a      	add	r2, r3
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	601a      	str	r2, [r3, #0]
 800b1a4:	e008      	b.n	800b1b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b1a6:	4b0c      	ldr	r3, [pc, #48]	@ (800b1d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	601a      	str	r2, [r3, #0]
 800b1ae:	e003      	b.n	800b1b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d002      	beq.n	800b1c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1c6:	bf00      	nop
 800b1c8:	3714      	adds	r7, #20
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop
 800b1d4:	20004cc0 	.word	0x20004cc0
 800b1d8:	20004cc8 	.word	0x20004cc8

0800b1dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	4912      	ldr	r1, [pc, #72]	@ (800b22c <MX_USB_DEVICE_Init+0x50>)
 800b1e4:	4812      	ldr	r0, [pc, #72]	@ (800b230 <MX_USB_DEVICE_Init+0x54>)
 800b1e6:	f7fb fea9 	bl	8006f3c <USBD_Init>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d001      	beq.n	800b1f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b1f0:	f7f5 fc08 	bl	8000a04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b1f4:	490f      	ldr	r1, [pc, #60]	@ (800b234 <MX_USB_DEVICE_Init+0x58>)
 800b1f6:	480e      	ldr	r0, [pc, #56]	@ (800b230 <MX_USB_DEVICE_Init+0x54>)
 800b1f8:	f7fb fed0 	bl	8006f9c <USBD_RegisterClass>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d001      	beq.n	800b206 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b202:	f7f5 fbff 	bl	8000a04 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b206:	490c      	ldr	r1, [pc, #48]	@ (800b238 <MX_USB_DEVICE_Init+0x5c>)
 800b208:	4809      	ldr	r0, [pc, #36]	@ (800b230 <MX_USB_DEVICE_Init+0x54>)
 800b20a:	f7fb fdc7 	bl	8006d9c <USBD_CDC_RegisterInterface>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d001      	beq.n	800b218 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b214:	f7f5 fbf6 	bl	8000a04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b218:	4805      	ldr	r0, [pc, #20]	@ (800b230 <MX_USB_DEVICE_Init+0x54>)
 800b21a:	f7fb fef5 	bl	8007008 <USBD_Start>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	d001      	beq.n	800b228 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b224:	f7f5 fbee 	bl	8000a04 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b228:	bf00      	nop
 800b22a:	bd80      	pop	{r7, pc}
 800b22c:	200000b0 	.word	0x200000b0
 800b230:	20004cd8 	.word	0x20004cd8
 800b234:	20000018 	.word	0x20000018
 800b238:	2000009c 	.word	0x2000009c

0800b23c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b240:	2200      	movs	r2, #0
 800b242:	4905      	ldr	r1, [pc, #20]	@ (800b258 <CDC_Init_FS+0x1c>)
 800b244:	4805      	ldr	r0, [pc, #20]	@ (800b25c <CDC_Init_FS+0x20>)
 800b246:	f7fb fdc3 	bl	8006dd0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b24a:	4905      	ldr	r1, [pc, #20]	@ (800b260 <CDC_Init_FS+0x24>)
 800b24c:	4803      	ldr	r0, [pc, #12]	@ (800b25c <CDC_Init_FS+0x20>)
 800b24e:	f7fb fde1 	bl	8006e14 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b252:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b254:	4618      	mov	r0, r3
 800b256:	bd80      	pop	{r7, pc}
 800b258:	200057b4 	.word	0x200057b4
 800b25c:	20004cd8 	.word	0x20004cd8
 800b260:	20004fb4 	.word	0x20004fb4

0800b264 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b264:	b480      	push	{r7}
 800b266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b268:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	4603      	mov	r3, r0
 800b27c:	6039      	str	r1, [r7, #0]
 800b27e:	71fb      	strb	r3, [r7, #7]
 800b280:	4613      	mov	r3, r2
 800b282:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b284:	79fb      	ldrb	r3, [r7, #7]
 800b286:	2b23      	cmp	r3, #35	@ 0x23
 800b288:	d84a      	bhi.n	800b320 <CDC_Control_FS+0xac>
 800b28a:	a201      	add	r2, pc, #4	@ (adr r2, 800b290 <CDC_Control_FS+0x1c>)
 800b28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b290:	0800b321 	.word	0x0800b321
 800b294:	0800b321 	.word	0x0800b321
 800b298:	0800b321 	.word	0x0800b321
 800b29c:	0800b321 	.word	0x0800b321
 800b2a0:	0800b321 	.word	0x0800b321
 800b2a4:	0800b321 	.word	0x0800b321
 800b2a8:	0800b321 	.word	0x0800b321
 800b2ac:	0800b321 	.word	0x0800b321
 800b2b0:	0800b321 	.word	0x0800b321
 800b2b4:	0800b321 	.word	0x0800b321
 800b2b8:	0800b321 	.word	0x0800b321
 800b2bc:	0800b321 	.word	0x0800b321
 800b2c0:	0800b321 	.word	0x0800b321
 800b2c4:	0800b321 	.word	0x0800b321
 800b2c8:	0800b321 	.word	0x0800b321
 800b2cc:	0800b321 	.word	0x0800b321
 800b2d0:	0800b321 	.word	0x0800b321
 800b2d4:	0800b321 	.word	0x0800b321
 800b2d8:	0800b321 	.word	0x0800b321
 800b2dc:	0800b321 	.word	0x0800b321
 800b2e0:	0800b321 	.word	0x0800b321
 800b2e4:	0800b321 	.word	0x0800b321
 800b2e8:	0800b321 	.word	0x0800b321
 800b2ec:	0800b321 	.word	0x0800b321
 800b2f0:	0800b321 	.word	0x0800b321
 800b2f4:	0800b321 	.word	0x0800b321
 800b2f8:	0800b321 	.word	0x0800b321
 800b2fc:	0800b321 	.word	0x0800b321
 800b300:	0800b321 	.word	0x0800b321
 800b304:	0800b321 	.word	0x0800b321
 800b308:	0800b321 	.word	0x0800b321
 800b30c:	0800b321 	.word	0x0800b321
 800b310:	0800b321 	.word	0x0800b321
 800b314:	0800b321 	.word	0x0800b321
 800b318:	0800b321 	.word	0x0800b321
 800b31c:	0800b321 	.word	0x0800b321
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b320:	bf00      	nop
  }

  return (USBD_OK);
 800b322:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b324:	4618      	mov	r0, r3
 800b326:	370c      	adds	r7, #12
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b33a:	6879      	ldr	r1, [r7, #4]
 800b33c:	4805      	ldr	r0, [pc, #20]	@ (800b354 <CDC_Receive_FS+0x24>)
 800b33e:	f7fb fd69 	bl	8006e14 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b342:	4804      	ldr	r0, [pc, #16]	@ (800b354 <CDC_Receive_FS+0x24>)
 800b344:	f7fb fdc4 	bl	8006ed0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b348:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3708      	adds	r7, #8
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	20004cd8 	.word	0x20004cd8

0800b358 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	460b      	mov	r3, r1
 800b362:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b364:	2300      	movs	r3, #0
 800b366:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b368:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a0 <CDC_Transmit_FS+0x48>)
 800b36a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b36e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b376:	2b00      	cmp	r3, #0
 800b378:	d001      	beq.n	800b37e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b37a:	2301      	movs	r3, #1
 800b37c:	e00b      	b.n	800b396 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b37e:	887b      	ldrh	r3, [r7, #2]
 800b380:	461a      	mov	r2, r3
 800b382:	6879      	ldr	r1, [r7, #4]
 800b384:	4806      	ldr	r0, [pc, #24]	@ (800b3a0 <CDC_Transmit_FS+0x48>)
 800b386:	f7fb fd23 	bl	8006dd0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b38a:	4805      	ldr	r0, [pc, #20]	@ (800b3a0 <CDC_Transmit_FS+0x48>)
 800b38c:	f7fb fd60 	bl	8006e50 <USBD_CDC_TransmitPacket>
 800b390:	4603      	mov	r3, r0
 800b392:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b394:	7bfb      	ldrb	r3, [r7, #15]
}
 800b396:	4618      	mov	r0, r3
 800b398:	3710      	adds	r7, #16
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	20004cd8 	.word	0x20004cd8

0800b3a4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b087      	sub	sp, #28
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	60b9      	str	r1, [r7, #8]
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b3b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	371c      	adds	r7, #28
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr
	...

0800b3c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	6039      	str	r1, [r7, #0]
 800b3d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	2212      	movs	r2, #18
 800b3d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b3da:	4b03      	ldr	r3, [pc, #12]	@ (800b3e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr
 800b3e8:	200000d0 	.word	0x200000d0

0800b3ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	6039      	str	r1, [r7, #0]
 800b3f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	2204      	movs	r2, #4
 800b3fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b3fe:	4b03      	ldr	r3, [pc, #12]	@ (800b40c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b400:	4618      	mov	r0, r3
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr
 800b40c:	200000f0 	.word	0x200000f0

0800b410 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
 800b416:	4603      	mov	r3, r0
 800b418:	6039      	str	r1, [r7, #0]
 800b41a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b41c:	79fb      	ldrb	r3, [r7, #7]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d105      	bne.n	800b42e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b422:	683a      	ldr	r2, [r7, #0]
 800b424:	4907      	ldr	r1, [pc, #28]	@ (800b444 <USBD_FS_ProductStrDescriptor+0x34>)
 800b426:	4808      	ldr	r0, [pc, #32]	@ (800b448 <USBD_FS_ProductStrDescriptor+0x38>)
 800b428:	f7fc ffc2 	bl	80083b0 <USBD_GetString>
 800b42c:	e004      	b.n	800b438 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b42e:	683a      	ldr	r2, [r7, #0]
 800b430:	4904      	ldr	r1, [pc, #16]	@ (800b444 <USBD_FS_ProductStrDescriptor+0x34>)
 800b432:	4805      	ldr	r0, [pc, #20]	@ (800b448 <USBD_FS_ProductStrDescriptor+0x38>)
 800b434:	f7fc ffbc 	bl	80083b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b438:	4b02      	ldr	r3, [pc, #8]	@ (800b444 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3708      	adds	r7, #8
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	20005fb4 	.word	0x20005fb4
 800b448:	0800cdb8 	.word	0x0800cdb8

0800b44c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	4603      	mov	r3, r0
 800b454:	6039      	str	r1, [r7, #0]
 800b456:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b458:	683a      	ldr	r2, [r7, #0]
 800b45a:	4904      	ldr	r1, [pc, #16]	@ (800b46c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b45c:	4804      	ldr	r0, [pc, #16]	@ (800b470 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b45e:	f7fc ffa7 	bl	80083b0 <USBD_GetString>
  return USBD_StrDesc;
 800b462:	4b02      	ldr	r3, [pc, #8]	@ (800b46c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b464:	4618      	mov	r0, r3
 800b466:	3708      	adds	r7, #8
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}
 800b46c:	20005fb4 	.word	0x20005fb4
 800b470:	0800cdd0 	.word	0x0800cdd0

0800b474 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	4603      	mov	r3, r0
 800b47c:	6039      	str	r1, [r7, #0]
 800b47e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	221a      	movs	r2, #26
 800b484:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b486:	f000 f855 	bl	800b534 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b48a:	4b02      	ldr	r3, [pc, #8]	@ (800b494 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3708      	adds	r7, #8
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}
 800b494:	200000f4 	.word	0x200000f4

0800b498 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	4603      	mov	r3, r0
 800b4a0:	6039      	str	r1, [r7, #0]
 800b4a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b4a4:	79fb      	ldrb	r3, [r7, #7]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d105      	bne.n	800b4b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b4aa:	683a      	ldr	r2, [r7, #0]
 800b4ac:	4907      	ldr	r1, [pc, #28]	@ (800b4cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b4ae:	4808      	ldr	r0, [pc, #32]	@ (800b4d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b4b0:	f7fc ff7e 	bl	80083b0 <USBD_GetString>
 800b4b4:	e004      	b.n	800b4c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b4b6:	683a      	ldr	r2, [r7, #0]
 800b4b8:	4904      	ldr	r1, [pc, #16]	@ (800b4cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b4ba:	4805      	ldr	r0, [pc, #20]	@ (800b4d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b4bc:	f7fc ff78 	bl	80083b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4c0:	4b02      	ldr	r3, [pc, #8]	@ (800b4cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3708      	adds	r7, #8
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	20005fb4 	.word	0x20005fb4
 800b4d0:	0800cde4 	.word	0x0800cde4

0800b4d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b082      	sub	sp, #8
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	4603      	mov	r3, r0
 800b4dc:	6039      	str	r1, [r7, #0]
 800b4de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b4e0:	79fb      	ldrb	r3, [r7, #7]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d105      	bne.n	800b4f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b4e6:	683a      	ldr	r2, [r7, #0]
 800b4e8:	4907      	ldr	r1, [pc, #28]	@ (800b508 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b4ea:	4808      	ldr	r0, [pc, #32]	@ (800b50c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b4ec:	f7fc ff60 	bl	80083b0 <USBD_GetString>
 800b4f0:	e004      	b.n	800b4fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b4f2:	683a      	ldr	r2, [r7, #0]
 800b4f4:	4904      	ldr	r1, [pc, #16]	@ (800b508 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b4f6:	4805      	ldr	r0, [pc, #20]	@ (800b50c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b4f8:	f7fc ff5a 	bl	80083b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4fc:	4b02      	ldr	r3, [pc, #8]	@ (800b508 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3708      	adds	r7, #8
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	20005fb4 	.word	0x20005fb4
 800b50c:	0800cdf0 	.word	0x0800cdf0

0800b510 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b510:	b480      	push	{r7}
 800b512:	b083      	sub	sp, #12
 800b514:	af00      	add	r7, sp, #0
 800b516:	4603      	mov	r3, r0
 800b518:	6039      	str	r1, [r7, #0]
 800b51a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	220c      	movs	r2, #12
 800b520:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b522:	4b03      	ldr	r3, [pc, #12]	@ (800b530 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b524:	4618      	mov	r0, r3
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr
 800b530:	200000e4 	.word	0x200000e4

0800b534 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b53a:	4b0f      	ldr	r3, [pc, #60]	@ (800b578 <Get_SerialNum+0x44>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b540:	4b0e      	ldr	r3, [pc, #56]	@ (800b57c <Get_SerialNum+0x48>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b546:	4b0e      	ldr	r3, [pc, #56]	@ (800b580 <Get_SerialNum+0x4c>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b54c:	68fa      	ldr	r2, [r7, #12]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	4413      	add	r3, r2
 800b552:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d009      	beq.n	800b56e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b55a:	2208      	movs	r2, #8
 800b55c:	4909      	ldr	r1, [pc, #36]	@ (800b584 <Get_SerialNum+0x50>)
 800b55e:	68f8      	ldr	r0, [r7, #12]
 800b560:	f000 f814 	bl	800b58c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b564:	2204      	movs	r2, #4
 800b566:	4908      	ldr	r1, [pc, #32]	@ (800b588 <Get_SerialNum+0x54>)
 800b568:	68b8      	ldr	r0, [r7, #8]
 800b56a:	f000 f80f 	bl	800b58c <IntToUnicode>
  }
}
 800b56e:	bf00      	nop
 800b570:	3710      	adds	r7, #16
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	1ff0f420 	.word	0x1ff0f420
 800b57c:	1ff0f424 	.word	0x1ff0f424
 800b580:	1ff0f428 	.word	0x1ff0f428
 800b584:	200000f6 	.word	0x200000f6
 800b588:	20000106 	.word	0x20000106

0800b58c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b087      	sub	sp, #28
 800b590:	af00      	add	r7, sp, #0
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	60b9      	str	r1, [r7, #8]
 800b596:	4613      	mov	r3, r2
 800b598:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b59a:	2300      	movs	r3, #0
 800b59c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b59e:	2300      	movs	r3, #0
 800b5a0:	75fb      	strb	r3, [r7, #23]
 800b5a2:	e027      	b.n	800b5f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	0f1b      	lsrs	r3, r3, #28
 800b5a8:	2b09      	cmp	r3, #9
 800b5aa:	d80b      	bhi.n	800b5c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	0f1b      	lsrs	r3, r3, #28
 800b5b0:	b2da      	uxtb	r2, r3
 800b5b2:	7dfb      	ldrb	r3, [r7, #23]
 800b5b4:	005b      	lsls	r3, r3, #1
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	440b      	add	r3, r1
 800b5bc:	3230      	adds	r2, #48	@ 0x30
 800b5be:	b2d2      	uxtb	r2, r2
 800b5c0:	701a      	strb	r2, [r3, #0]
 800b5c2:	e00a      	b.n	800b5da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	0f1b      	lsrs	r3, r3, #28
 800b5c8:	b2da      	uxtb	r2, r3
 800b5ca:	7dfb      	ldrb	r3, [r7, #23]
 800b5cc:	005b      	lsls	r3, r3, #1
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	440b      	add	r3, r1
 800b5d4:	3237      	adds	r2, #55	@ 0x37
 800b5d6:	b2d2      	uxtb	r2, r2
 800b5d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	011b      	lsls	r3, r3, #4
 800b5de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b5e0:	7dfb      	ldrb	r3, [r7, #23]
 800b5e2:	005b      	lsls	r3, r3, #1
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	68ba      	ldr	r2, [r7, #8]
 800b5e8:	4413      	add	r3, r2
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b5ee:	7dfb      	ldrb	r3, [r7, #23]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	75fb      	strb	r3, [r7, #23]
 800b5f4:	7dfa      	ldrb	r2, [r7, #23]
 800b5f6:	79fb      	ldrb	r3, [r7, #7]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d3d3      	bcc.n	800b5a4 <IntToUnicode+0x18>
  }
}
 800b5fc:	bf00      	nop
 800b5fe:	bf00      	nop
 800b600:	371c      	adds	r7, #28
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr
	...

0800b60c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b0ac      	sub	sp, #176	@ 0xb0
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b614:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800b618:	2200      	movs	r2, #0
 800b61a:	601a      	str	r2, [r3, #0]
 800b61c:	605a      	str	r2, [r3, #4]
 800b61e:	609a      	str	r2, [r3, #8]
 800b620:	60da      	str	r2, [r3, #12]
 800b622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b624:	f107 0318 	add.w	r3, r7, #24
 800b628:	2284      	movs	r2, #132	@ 0x84
 800b62a:	2100      	movs	r1, #0
 800b62c:	4618      	mov	r0, r3
 800b62e:	f000 fe33 	bl	800c298 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b63a:	d160      	bne.n	800b6fe <HAL_PCD_MspInit+0xf2>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800b63c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b640:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800b642:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800b646:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800b648:	2305      	movs	r3, #5
 800b64a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800b64c:	2302      	movs	r3, #2
 800b64e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800b650:	2303      	movs	r3, #3
 800b652:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800b654:	2301      	movs	r3, #1
 800b656:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800b658:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b65c:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800b65e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b662:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b666:	f107 0318 	add.w	r3, r7, #24
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7f7 ffa4 	bl	80035b8 <HAL_RCCEx_PeriphCLKConfig>
 800b670:	4603      	mov	r3, r0
 800b672:	2b00      	cmp	r3, #0
 800b674:	d001      	beq.n	800b67a <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 800b676:	f7f5 f9c5 	bl	8000a04 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b67a:	4b23      	ldr	r3, [pc, #140]	@ (800b708 <HAL_PCD_MspInit+0xfc>)
 800b67c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b67e:	4a22      	ldr	r2, [pc, #136]	@ (800b708 <HAL_PCD_MspInit+0xfc>)
 800b680:	f043 0301 	orr.w	r3, r3, #1
 800b684:	6313      	str	r3, [r2, #48]	@ 0x30
 800b686:	4b20      	ldr	r3, [pc, #128]	@ (800b708 <HAL_PCD_MspInit+0xfc>)
 800b688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b68a:	f003 0301 	and.w	r3, r3, #1
 800b68e:	617b      	str	r3, [r7, #20]
 800b690:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800b692:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b696:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b69a:	2302      	movs	r3, #2
 800b69c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6a6:	2303      	movs	r3, #3
 800b6a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b6ac:	230a      	movs	r3, #10
 800b6ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b6b2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	4814      	ldr	r0, [pc, #80]	@ (800b70c <HAL_PCD_MspInit+0x100>)
 800b6ba:	f7f5 fdd9 	bl	8001270 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b6be:	4b12      	ldr	r3, [pc, #72]	@ (800b708 <HAL_PCD_MspInit+0xfc>)
 800b6c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6c2:	4a11      	ldr	r2, [pc, #68]	@ (800b708 <HAL_PCD_MspInit+0xfc>)
 800b6c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6c8:	6353      	str	r3, [r2, #52]	@ 0x34
 800b6ca:	4b0f      	ldr	r3, [pc, #60]	@ (800b708 <HAL_PCD_MspInit+0xfc>)
 800b6cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6d2:	613b      	str	r3, [r7, #16]
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	4b0c      	ldr	r3, [pc, #48]	@ (800b708 <HAL_PCD_MspInit+0xfc>)
 800b6d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6da:	4a0b      	ldr	r2, [pc, #44]	@ (800b708 <HAL_PCD_MspInit+0xfc>)
 800b6dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b6e0:	6453      	str	r3, [r2, #68]	@ 0x44
 800b6e2:	4b09      	ldr	r3, [pc, #36]	@ (800b708 <HAL_PCD_MspInit+0xfc>)
 800b6e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b6ea:	60fb      	str	r3, [r7, #12]
 800b6ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	2105      	movs	r1, #5
 800b6f2:	2043      	movs	r0, #67	@ 0x43
 800b6f4:	f7f5 fd92 	bl	800121c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b6f8:	2043      	movs	r0, #67	@ 0x43
 800b6fa:	f7f5 fdab 	bl	8001254 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b6fe:	bf00      	nop
 800b700:	37b0      	adds	r7, #176	@ 0xb0
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	40023800 	.word	0x40023800
 800b70c:	40020000 	.word	0x40020000

0800b710 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	@ 0x504
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800b724:	4619      	mov	r1, r3
 800b726:	4610      	mov	r0, r2
 800b728:	f7fb fcbb 	bl	80070a2 <USBD_LL_SetupStage>
}
 800b72c:	bf00      	nop
 800b72e:	3708      	adds	r7, #8
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	460b      	mov	r3, r1
 800b73e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8d3 0504 	ldr.w	r0, [r3, #1284]	@ 0x504
 800b746:	78fa      	ldrb	r2, [r7, #3]
 800b748:	6879      	ldr	r1, [r7, #4]
 800b74a:	4613      	mov	r3, r2
 800b74c:	00db      	lsls	r3, r3, #3
 800b74e:	4413      	add	r3, r2
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	440b      	add	r3, r1
 800b754:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	78fb      	ldrb	r3, [r7, #3]
 800b75c:	4619      	mov	r1, r3
 800b75e:	f7fb fcf5 	bl	800714c <USBD_LL_DataOutStage>
}
 800b762:	bf00      	nop
 800b764:	3708      	adds	r7, #8
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}

0800b76a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b76a:	b580      	push	{r7, lr}
 800b76c:	b082      	sub	sp, #8
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
 800b772:	460b      	mov	r3, r1
 800b774:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f8d3 0504 	ldr.w	r0, [r3, #1284]	@ 0x504
 800b77c:	78fa      	ldrb	r2, [r7, #3]
 800b77e:	6879      	ldr	r1, [r7, #4]
 800b780:	4613      	mov	r3, r2
 800b782:	00db      	lsls	r3, r3, #3
 800b784:	4413      	add	r3, r2
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	440b      	add	r3, r1
 800b78a:	334c      	adds	r3, #76	@ 0x4c
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	78fb      	ldrb	r3, [r7, #3]
 800b790:	4619      	mov	r1, r3
 800b792:	f7fb fd8e 	bl	80072b2 <USBD_LL_DataInStage>
}
 800b796:	bf00      	nop
 800b798:	3708      	adds	r7, #8
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}

0800b79e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b79e:	b580      	push	{r7, lr}
 800b7a0:	b082      	sub	sp, #8
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7fb fec2 	bl	8007536 <USBD_LL_SOF>
}
 800b7b2:	bf00      	nop
 800b7b4:	3708      	adds	r7, #8
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}

0800b7ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b084      	sub	sp, #16
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	68db      	ldr	r3, [r3, #12]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d102      	bne.n	800b7d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	73fb      	strb	r3, [r7, #15]
 800b7d2:	e008      	b.n	800b7e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	d102      	bne.n	800b7e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	73fb      	strb	r3, [r7, #15]
 800b7e0:	e001      	b.n	800b7e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b7e2:	f7f5 f90f 	bl	8000a04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800b7ec:	7bfa      	ldrb	r2, [r7, #15]
 800b7ee:	4611      	mov	r1, r2
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7fb fe62 	bl	80074ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7fb fe0a 	bl	8007416 <USBD_LL_Reset>
}
 800b802:	bf00      	nop
 800b804:	3710      	adds	r7, #16
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
	...

0800b80c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7fb fe5d 	bl	80074da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	6812      	ldr	r2, [r2, #0]
 800b82e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b832:	f043 0301 	orr.w	r3, r3, #1
 800b836:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6a1b      	ldr	r3, [r3, #32]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d005      	beq.n	800b84c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b840:	4b04      	ldr	r3, [pc, #16]	@ (800b854 <HAL_PCD_SuspendCallback+0x48>)
 800b842:	691b      	ldr	r3, [r3, #16]
 800b844:	4a03      	ldr	r2, [pc, #12]	@ (800b854 <HAL_PCD_SuspendCallback+0x48>)
 800b846:	f043 0306 	orr.w	r3, r3, #6
 800b84a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b84c:	bf00      	nop
 800b84e:	3708      	adds	r7, #8
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}
 800b854:	e000ed00 	.word	0xe000ed00

0800b858 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800b866:	4618      	mov	r0, r3
 800b868:	f7fb fe4d 	bl	8007506 <USBD_LL_Resume>
}
 800b86c:	bf00      	nop
 800b86e:	3708      	adds	r7, #8
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	460b      	mov	r3, r1
 800b87e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800b886:	78fa      	ldrb	r2, [r7, #3]
 800b888:	4611      	mov	r1, r2
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7fb fea5 	bl	80075da <USBD_LL_IsoOUTIncomplete>
}
 800b890:	bf00      	nop
 800b892:	3708      	adds	r7, #8
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800b8aa:	78fa      	ldrb	r2, [r7, #3]
 800b8ac:	4611      	mov	r1, r2
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7fb fe61 	bl	8007576 <USBD_LL_IsoINIncomplete>
}
 800b8b4:	bf00      	nop
 800b8b6:	3708      	adds	r7, #8
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7fb feb7 	bl	800763e <USBD_LL_DevConnected>
}
 800b8d0:	bf00      	nop
 800b8d2:	3708      	adds	r7, #8
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b082      	sub	sp, #8
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7fb feb4 	bl	8007654 <USBD_LL_DevDisconnected>
}
 800b8ec:	bf00      	nop
 800b8ee:	3708      	adds	r7, #8
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d13c      	bne.n	800b97e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b904:	4a20      	ldr	r2, [pc, #128]	@ (800b988 <USBD_LL_Init+0x94>)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	4a1e      	ldr	r2, [pc, #120]	@ (800b988 <USBD_LL_Init+0x94>)
 800b910:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b914:	4b1c      	ldr	r3, [pc, #112]	@ (800b988 <USBD_LL_Init+0x94>)
 800b916:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b91a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b91c:	4b1a      	ldr	r3, [pc, #104]	@ (800b988 <USBD_LL_Init+0x94>)
 800b91e:	2206      	movs	r2, #6
 800b920:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b922:	4b19      	ldr	r3, [pc, #100]	@ (800b988 <USBD_LL_Init+0x94>)
 800b924:	2202      	movs	r2, #2
 800b926:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b928:	4b17      	ldr	r3, [pc, #92]	@ (800b988 <USBD_LL_Init+0x94>)
 800b92a:	2200      	movs	r2, #0
 800b92c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b92e:	4b16      	ldr	r3, [pc, #88]	@ (800b988 <USBD_LL_Init+0x94>)
 800b930:	2202      	movs	r2, #2
 800b932:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b934:	4b14      	ldr	r3, [pc, #80]	@ (800b988 <USBD_LL_Init+0x94>)
 800b936:	2200      	movs	r2, #0
 800b938:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b93a:	4b13      	ldr	r3, [pc, #76]	@ (800b988 <USBD_LL_Init+0x94>)
 800b93c:	2200      	movs	r2, #0
 800b93e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b940:	4b11      	ldr	r3, [pc, #68]	@ (800b988 <USBD_LL_Init+0x94>)
 800b942:	2200      	movs	r2, #0
 800b944:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b946:	4b10      	ldr	r3, [pc, #64]	@ (800b988 <USBD_LL_Init+0x94>)
 800b948:	2200      	movs	r2, #0
 800b94a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b94c:	4b0e      	ldr	r3, [pc, #56]	@ (800b988 <USBD_LL_Init+0x94>)
 800b94e:	2200      	movs	r2, #0
 800b950:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b952:	480d      	ldr	r0, [pc, #52]	@ (800b988 <USBD_LL_Init+0x94>)
 800b954:	f7f5 fe6b 	bl	800162e <HAL_PCD_Init>
 800b958:	4603      	mov	r3, r0
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d001      	beq.n	800b962 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b95e:	f7f5 f851 	bl	8000a04 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b962:	2180      	movs	r1, #128	@ 0x80
 800b964:	4808      	ldr	r0, [pc, #32]	@ (800b988 <USBD_LL_Init+0x94>)
 800b966:	f7f7 f8e6 	bl	8002b36 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b96a:	2240      	movs	r2, #64	@ 0x40
 800b96c:	2100      	movs	r1, #0
 800b96e:	4806      	ldr	r0, [pc, #24]	@ (800b988 <USBD_LL_Init+0x94>)
 800b970:	f7f7 f89a 	bl	8002aa8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b974:	2280      	movs	r2, #128	@ 0x80
 800b976:	2101      	movs	r1, #1
 800b978:	4803      	ldr	r0, [pc, #12]	@ (800b988 <USBD_LL_Init+0x94>)
 800b97a:	f7f7 f895 	bl	8002aa8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b97e:	2300      	movs	r3, #0
}
 800b980:	4618      	mov	r0, r3
 800b982:	3708      	adds	r7, #8
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}
 800b988:	200061b4 	.word	0x200061b4

0800b98c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b994:	2300      	movs	r3, #0
 800b996:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b998:	2300      	movs	r3, #0
 800b99a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7f5 ff67 	bl	8001876 <HAL_PCD_Start>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9ac:	7bfb      	ldrb	r3, [r7, #15]
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f000 f97e 	bl	800bcb0 <USBD_Get_USB_Status>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}

0800b9c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b9c2:	b580      	push	{r7, lr}
 800b9c4:	b084      	sub	sp, #16
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
 800b9ca:	4608      	mov	r0, r1
 800b9cc:	4611      	mov	r1, r2
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	70fb      	strb	r3, [r7, #3]
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	70bb      	strb	r3, [r7, #2]
 800b9d8:	4613      	mov	r3, r2
 800b9da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b9ea:	78bb      	ldrb	r3, [r7, #2]
 800b9ec:	883a      	ldrh	r2, [r7, #0]
 800b9ee:	78f9      	ldrb	r1, [r7, #3]
 800b9f0:	f7f6 fc54 	bl	800229c <HAL_PCD_EP_Open>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9f8:	7bfb      	ldrb	r3, [r7, #15]
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f000 f958 	bl	800bcb0 <USBD_Get_USB_Status>
 800ba00:	4603      	mov	r3, r0
 800ba02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba04:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3710      	adds	r7, #16
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b084      	sub	sp, #16
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
 800ba16:	460b      	mov	r3, r1
 800ba18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba28:	78fa      	ldrb	r2, [r7, #3]
 800ba2a:	4611      	mov	r1, r2
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f7f6 fc9d 	bl	800236c <HAL_PCD_EP_Close>
 800ba32:	4603      	mov	r3, r0
 800ba34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba36:	7bfb      	ldrb	r3, [r7, #15]
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f000 f939 	bl	800bcb0 <USBD_Get_USB_Status>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba42:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3710      	adds	r7, #16
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	460b      	mov	r3, r1
 800ba56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba66:	78fa      	ldrb	r2, [r7, #3]
 800ba68:	4611      	mov	r1, r2
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7f6 fd75 	bl	800255a <HAL_PCD_EP_SetStall>
 800ba70:	4603      	mov	r3, r0
 800ba72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba74:	7bfb      	ldrb	r3, [r7, #15]
 800ba76:	4618      	mov	r0, r3
 800ba78:	f000 f91a 	bl	800bcb0 <USBD_Get_USB_Status>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba80:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b084      	sub	sp, #16
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
 800ba92:	460b      	mov	r3, r1
 800ba94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba96:	2300      	movs	r3, #0
 800ba98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800baa4:	78fa      	ldrb	r2, [r7, #3]
 800baa6:	4611      	mov	r1, r2
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7f6 fdba 	bl	8002622 <HAL_PCD_EP_ClrStall>
 800baae:	4603      	mov	r3, r0
 800bab0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bab2:	7bfb      	ldrb	r3, [r7, #15]
 800bab4:	4618      	mov	r0, r3
 800bab6:	f000 f8fb 	bl	800bcb0 <USBD_Get_USB_Status>
 800baba:	4603      	mov	r3, r0
 800babc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800babe:	7bbb      	ldrb	r3, [r7, #14]
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3710      	adds	r7, #16
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bac8:	b480      	push	{r7}
 800baca:	b085      	sub	sp, #20
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	460b      	mov	r3, r1
 800bad2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bada:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800badc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	da0b      	bge.n	800bafc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bae4:	78fb      	ldrb	r3, [r7, #3]
 800bae6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800baea:	68f9      	ldr	r1, [r7, #12]
 800baec:	4613      	mov	r3, r2
 800baee:	00db      	lsls	r3, r3, #3
 800baf0:	4413      	add	r3, r2
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	440b      	add	r3, r1
 800baf6:	333e      	adds	r3, #62	@ 0x3e
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	e00b      	b.n	800bb14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bafc:	78fb      	ldrb	r3, [r7, #3]
 800bafe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb02:	68f9      	ldr	r1, [r7, #12]
 800bb04:	4613      	mov	r3, r2
 800bb06:	00db      	lsls	r3, r3, #3
 800bb08:	4413      	add	r3, r2
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	440b      	add	r3, r1
 800bb0e:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800bb12:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3714      	adds	r7, #20
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b084      	sub	sp, #16
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	460b      	mov	r3, r1
 800bb2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb30:	2300      	movs	r3, #0
 800bb32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bb3a:	78fa      	ldrb	r2, [r7, #3]
 800bb3c:	4611      	mov	r1, r2
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7f6 fb87 	bl	8002252 <HAL_PCD_SetAddress>
 800bb44:	4603      	mov	r3, r0
 800bb46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb48:	7bfb      	ldrb	r3, [r7, #15]
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f000 f8b0 	bl	800bcb0 <USBD_Get_USB_Status>
 800bb50:	4603      	mov	r3, r0
 800bb52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb54:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3710      	adds	r7, #16
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}

0800bb5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b086      	sub	sp, #24
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	60f8      	str	r0, [r7, #12]
 800bb66:	607a      	str	r2, [r7, #4]
 800bb68:	603b      	str	r3, [r7, #0]
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb72:	2300      	movs	r3, #0
 800bb74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bb7c:	7af9      	ldrb	r1, [r7, #11]
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	687a      	ldr	r2, [r7, #4]
 800bb82:	f7f6 fca0 	bl	80024c6 <HAL_PCD_EP_Transmit>
 800bb86:	4603      	mov	r3, r0
 800bb88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb8a:	7dfb      	ldrb	r3, [r7, #23]
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f000 f88f 	bl	800bcb0 <USBD_Get_USB_Status>
 800bb92:	4603      	mov	r3, r0
 800bb94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb96:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3718      	adds	r7, #24
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b086      	sub	sp, #24
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	607a      	str	r2, [r7, #4]
 800bbaa:	603b      	str	r3, [r7, #0]
 800bbac:	460b      	mov	r3, r1
 800bbae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bbbe:	7af9      	ldrb	r1, [r7, #11]
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	f7f6 fc1c 	bl	8002400 <HAL_PCD_EP_Receive>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbcc:	7dfb      	ldrb	r3, [r7, #23]
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f000 f86e 	bl	800bcb0 <USBD_Get_USB_Status>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bbd8:	7dbb      	ldrb	r3, [r7, #22]
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3718      	adds	r7, #24
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b082      	sub	sp, #8
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
 800bbea:	460b      	mov	r3, r1
 800bbec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bbf4:	78fa      	ldrb	r2, [r7, #3]
 800bbf6:	4611      	mov	r1, r2
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f7f6 fc4c 	bl	8002496 <HAL_PCD_EP_GetRxCount>
 800bbfe:	4603      	mov	r3, r0
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3708      	adds	r7, #8
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	460b      	mov	r3, r1
 800bc12:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800bc14:	78fb      	ldrb	r3, [r7, #3]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d002      	beq.n	800bc20 <HAL_PCDEx_LPM_Callback+0x18>
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d01f      	beq.n	800bc5e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800bc1e:	e03b      	b.n	800bc98 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6a1b      	ldr	r3, [r3, #32]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d007      	beq.n	800bc38 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bc28:	f000 f83c 	bl	800bca4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc2c:	4b1c      	ldr	r3, [pc, #112]	@ (800bca0 <HAL_PCDEx_LPM_Callback+0x98>)
 800bc2e:	691b      	ldr	r3, [r3, #16]
 800bc30:	4a1b      	ldr	r2, [pc, #108]	@ (800bca0 <HAL_PCDEx_LPM_Callback+0x98>)
 800bc32:	f023 0306 	bic.w	r3, r3, #6
 800bc36:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	6812      	ldr	r2, [r2, #0]
 800bc46:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bc4a:	f023 0301 	bic.w	r3, r3, #1
 800bc4e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7fb fc55 	bl	8007506 <USBD_LL_Resume>
    break;
 800bc5c:	e01c      	b.n	800bc98 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	687a      	ldr	r2, [r7, #4]
 800bc6a:	6812      	ldr	r2, [r2, #0]
 800bc6c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bc70:	f043 0301 	orr.w	r3, r3, #1
 800bc74:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7fb fc2c 	bl	80074da <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6a1b      	ldr	r3, [r3, #32]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d005      	beq.n	800bc96 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc8a:	4b05      	ldr	r3, [pc, #20]	@ (800bca0 <HAL_PCDEx_LPM_Callback+0x98>)
 800bc8c:	691b      	ldr	r3, [r3, #16]
 800bc8e:	4a04      	ldr	r2, [pc, #16]	@ (800bca0 <HAL_PCDEx_LPM_Callback+0x98>)
 800bc90:	f043 0306 	orr.w	r3, r3, #6
 800bc94:	6113      	str	r3, [r2, #16]
    break;
 800bc96:	bf00      	nop
}
 800bc98:	bf00      	nop
 800bc9a:	3708      	adds	r7, #8
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}
 800bca0:	e000ed00 	.word	0xe000ed00

0800bca4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bca8:	f7f4 fd52 	bl	8000750 <SystemClock_Config>
}
 800bcac:	bf00      	nop
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b085      	sub	sp, #20
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bcbe:	79fb      	ldrb	r3, [r7, #7]
 800bcc0:	2b03      	cmp	r3, #3
 800bcc2:	d817      	bhi.n	800bcf4 <USBD_Get_USB_Status+0x44>
 800bcc4:	a201      	add	r2, pc, #4	@ (adr r2, 800bccc <USBD_Get_USB_Status+0x1c>)
 800bcc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcca:	bf00      	nop
 800bccc:	0800bcdd 	.word	0x0800bcdd
 800bcd0:	0800bce3 	.word	0x0800bce3
 800bcd4:	0800bce9 	.word	0x0800bce9
 800bcd8:	0800bcef 	.word	0x0800bcef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	73fb      	strb	r3, [r7, #15]
    break;
 800bce0:	e00b      	b.n	800bcfa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bce2:	2303      	movs	r3, #3
 800bce4:	73fb      	strb	r3, [r7, #15]
    break;
 800bce6:	e008      	b.n	800bcfa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bce8:	2301      	movs	r3, #1
 800bcea:	73fb      	strb	r3, [r7, #15]
    break;
 800bcec:	e005      	b.n	800bcfa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bcee:	2303      	movs	r3, #3
 800bcf0:	73fb      	strb	r3, [r7, #15]
    break;
 800bcf2:	e002      	b.n	800bcfa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bcf4:	2303      	movs	r3, #3
 800bcf6:	73fb      	strb	r3, [r7, #15]
    break;
 800bcf8:	bf00      	nop
  }
  return usb_status;
 800bcfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3714      	adds	r7, #20
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr

0800bd08 <malloc>:
 800bd08:	4b02      	ldr	r3, [pc, #8]	@ (800bd14 <malloc+0xc>)
 800bd0a:	4601      	mov	r1, r0
 800bd0c:	6818      	ldr	r0, [r3, #0]
 800bd0e:	f000 b82d 	b.w	800bd6c <_malloc_r>
 800bd12:	bf00      	nop
 800bd14:	2000011c 	.word	0x2000011c

0800bd18 <free>:
 800bd18:	4b02      	ldr	r3, [pc, #8]	@ (800bd24 <free+0xc>)
 800bd1a:	4601      	mov	r1, r0
 800bd1c:	6818      	ldr	r0, [r3, #0]
 800bd1e:	f000 bbab 	b.w	800c478 <_free_r>
 800bd22:	bf00      	nop
 800bd24:	2000011c 	.word	0x2000011c

0800bd28 <sbrk_aligned>:
 800bd28:	b570      	push	{r4, r5, r6, lr}
 800bd2a:	4e0f      	ldr	r6, [pc, #60]	@ (800bd68 <sbrk_aligned+0x40>)
 800bd2c:	460c      	mov	r4, r1
 800bd2e:	6831      	ldr	r1, [r6, #0]
 800bd30:	4605      	mov	r5, r0
 800bd32:	b911      	cbnz	r1, 800bd3a <sbrk_aligned+0x12>
 800bd34:	f000 fb42 	bl	800c3bc <_sbrk_r>
 800bd38:	6030      	str	r0, [r6, #0]
 800bd3a:	4621      	mov	r1, r4
 800bd3c:	4628      	mov	r0, r5
 800bd3e:	f000 fb3d 	bl	800c3bc <_sbrk_r>
 800bd42:	1c43      	adds	r3, r0, #1
 800bd44:	d103      	bne.n	800bd4e <sbrk_aligned+0x26>
 800bd46:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	bd70      	pop	{r4, r5, r6, pc}
 800bd4e:	1cc4      	adds	r4, r0, #3
 800bd50:	f024 0403 	bic.w	r4, r4, #3
 800bd54:	42a0      	cmp	r0, r4
 800bd56:	d0f8      	beq.n	800bd4a <sbrk_aligned+0x22>
 800bd58:	1a21      	subs	r1, r4, r0
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	f000 fb2e 	bl	800c3bc <_sbrk_r>
 800bd60:	3001      	adds	r0, #1
 800bd62:	d1f2      	bne.n	800bd4a <sbrk_aligned+0x22>
 800bd64:	e7ef      	b.n	800bd46 <sbrk_aligned+0x1e>
 800bd66:	bf00      	nop
 800bd68:	200066bc 	.word	0x200066bc

0800bd6c <_malloc_r>:
 800bd6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd70:	1ccd      	adds	r5, r1, #3
 800bd72:	f025 0503 	bic.w	r5, r5, #3
 800bd76:	3508      	adds	r5, #8
 800bd78:	2d0c      	cmp	r5, #12
 800bd7a:	bf38      	it	cc
 800bd7c:	250c      	movcc	r5, #12
 800bd7e:	2d00      	cmp	r5, #0
 800bd80:	4606      	mov	r6, r0
 800bd82:	db01      	blt.n	800bd88 <_malloc_r+0x1c>
 800bd84:	42a9      	cmp	r1, r5
 800bd86:	d904      	bls.n	800bd92 <_malloc_r+0x26>
 800bd88:	230c      	movs	r3, #12
 800bd8a:	6033      	str	r3, [r6, #0]
 800bd8c:	2000      	movs	r0, #0
 800bd8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800be68 <_malloc_r+0xfc>
 800bd96:	f000 f869 	bl	800be6c <__malloc_lock>
 800bd9a:	f8d8 3000 	ldr.w	r3, [r8]
 800bd9e:	461c      	mov	r4, r3
 800bda0:	bb44      	cbnz	r4, 800bdf4 <_malloc_r+0x88>
 800bda2:	4629      	mov	r1, r5
 800bda4:	4630      	mov	r0, r6
 800bda6:	f7ff ffbf 	bl	800bd28 <sbrk_aligned>
 800bdaa:	1c43      	adds	r3, r0, #1
 800bdac:	4604      	mov	r4, r0
 800bdae:	d158      	bne.n	800be62 <_malloc_r+0xf6>
 800bdb0:	f8d8 4000 	ldr.w	r4, [r8]
 800bdb4:	4627      	mov	r7, r4
 800bdb6:	2f00      	cmp	r7, #0
 800bdb8:	d143      	bne.n	800be42 <_malloc_r+0xd6>
 800bdba:	2c00      	cmp	r4, #0
 800bdbc:	d04b      	beq.n	800be56 <_malloc_r+0xea>
 800bdbe:	6823      	ldr	r3, [r4, #0]
 800bdc0:	4639      	mov	r1, r7
 800bdc2:	4630      	mov	r0, r6
 800bdc4:	eb04 0903 	add.w	r9, r4, r3
 800bdc8:	f000 faf8 	bl	800c3bc <_sbrk_r>
 800bdcc:	4581      	cmp	r9, r0
 800bdce:	d142      	bne.n	800be56 <_malloc_r+0xea>
 800bdd0:	6821      	ldr	r1, [r4, #0]
 800bdd2:	1a6d      	subs	r5, r5, r1
 800bdd4:	4629      	mov	r1, r5
 800bdd6:	4630      	mov	r0, r6
 800bdd8:	f7ff ffa6 	bl	800bd28 <sbrk_aligned>
 800bddc:	3001      	adds	r0, #1
 800bdde:	d03a      	beq.n	800be56 <_malloc_r+0xea>
 800bde0:	6823      	ldr	r3, [r4, #0]
 800bde2:	442b      	add	r3, r5
 800bde4:	6023      	str	r3, [r4, #0]
 800bde6:	f8d8 3000 	ldr.w	r3, [r8]
 800bdea:	685a      	ldr	r2, [r3, #4]
 800bdec:	bb62      	cbnz	r2, 800be48 <_malloc_r+0xdc>
 800bdee:	f8c8 7000 	str.w	r7, [r8]
 800bdf2:	e00f      	b.n	800be14 <_malloc_r+0xa8>
 800bdf4:	6822      	ldr	r2, [r4, #0]
 800bdf6:	1b52      	subs	r2, r2, r5
 800bdf8:	d420      	bmi.n	800be3c <_malloc_r+0xd0>
 800bdfa:	2a0b      	cmp	r2, #11
 800bdfc:	d917      	bls.n	800be2e <_malloc_r+0xc2>
 800bdfe:	1961      	adds	r1, r4, r5
 800be00:	42a3      	cmp	r3, r4
 800be02:	6025      	str	r5, [r4, #0]
 800be04:	bf18      	it	ne
 800be06:	6059      	strne	r1, [r3, #4]
 800be08:	6863      	ldr	r3, [r4, #4]
 800be0a:	bf08      	it	eq
 800be0c:	f8c8 1000 	streq.w	r1, [r8]
 800be10:	5162      	str	r2, [r4, r5]
 800be12:	604b      	str	r3, [r1, #4]
 800be14:	4630      	mov	r0, r6
 800be16:	f000 f82f 	bl	800be78 <__malloc_unlock>
 800be1a:	f104 000b 	add.w	r0, r4, #11
 800be1e:	1d23      	adds	r3, r4, #4
 800be20:	f020 0007 	bic.w	r0, r0, #7
 800be24:	1ac2      	subs	r2, r0, r3
 800be26:	bf1c      	itt	ne
 800be28:	1a1b      	subne	r3, r3, r0
 800be2a:	50a3      	strne	r3, [r4, r2]
 800be2c:	e7af      	b.n	800bd8e <_malloc_r+0x22>
 800be2e:	6862      	ldr	r2, [r4, #4]
 800be30:	42a3      	cmp	r3, r4
 800be32:	bf0c      	ite	eq
 800be34:	f8c8 2000 	streq.w	r2, [r8]
 800be38:	605a      	strne	r2, [r3, #4]
 800be3a:	e7eb      	b.n	800be14 <_malloc_r+0xa8>
 800be3c:	4623      	mov	r3, r4
 800be3e:	6864      	ldr	r4, [r4, #4]
 800be40:	e7ae      	b.n	800bda0 <_malloc_r+0x34>
 800be42:	463c      	mov	r4, r7
 800be44:	687f      	ldr	r7, [r7, #4]
 800be46:	e7b6      	b.n	800bdb6 <_malloc_r+0x4a>
 800be48:	461a      	mov	r2, r3
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	42a3      	cmp	r3, r4
 800be4e:	d1fb      	bne.n	800be48 <_malloc_r+0xdc>
 800be50:	2300      	movs	r3, #0
 800be52:	6053      	str	r3, [r2, #4]
 800be54:	e7de      	b.n	800be14 <_malloc_r+0xa8>
 800be56:	230c      	movs	r3, #12
 800be58:	6033      	str	r3, [r6, #0]
 800be5a:	4630      	mov	r0, r6
 800be5c:	f000 f80c 	bl	800be78 <__malloc_unlock>
 800be60:	e794      	b.n	800bd8c <_malloc_r+0x20>
 800be62:	6005      	str	r5, [r0, #0]
 800be64:	e7d6      	b.n	800be14 <_malloc_r+0xa8>
 800be66:	bf00      	nop
 800be68:	200066c0 	.word	0x200066c0

0800be6c <__malloc_lock>:
 800be6c:	4801      	ldr	r0, [pc, #4]	@ (800be74 <__malloc_lock+0x8>)
 800be6e:	f000 baf2 	b.w	800c456 <__retarget_lock_acquire_recursive>
 800be72:	bf00      	nop
 800be74:	20006804 	.word	0x20006804

0800be78 <__malloc_unlock>:
 800be78:	4801      	ldr	r0, [pc, #4]	@ (800be80 <__malloc_unlock+0x8>)
 800be7a:	f000 baed 	b.w	800c458 <__retarget_lock_release_recursive>
 800be7e:	bf00      	nop
 800be80:	20006804 	.word	0x20006804

0800be84 <std>:
 800be84:	2300      	movs	r3, #0
 800be86:	b510      	push	{r4, lr}
 800be88:	4604      	mov	r4, r0
 800be8a:	e9c0 3300 	strd	r3, r3, [r0]
 800be8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be92:	6083      	str	r3, [r0, #8]
 800be94:	8181      	strh	r1, [r0, #12]
 800be96:	6643      	str	r3, [r0, #100]	@ 0x64
 800be98:	81c2      	strh	r2, [r0, #14]
 800be9a:	6183      	str	r3, [r0, #24]
 800be9c:	4619      	mov	r1, r3
 800be9e:	2208      	movs	r2, #8
 800bea0:	305c      	adds	r0, #92	@ 0x5c
 800bea2:	f000 f9f9 	bl	800c298 <memset>
 800bea6:	4b0d      	ldr	r3, [pc, #52]	@ (800bedc <std+0x58>)
 800bea8:	6263      	str	r3, [r4, #36]	@ 0x24
 800beaa:	4b0d      	ldr	r3, [pc, #52]	@ (800bee0 <std+0x5c>)
 800beac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800beae:	4b0d      	ldr	r3, [pc, #52]	@ (800bee4 <std+0x60>)
 800beb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800beb2:	4b0d      	ldr	r3, [pc, #52]	@ (800bee8 <std+0x64>)
 800beb4:	6323      	str	r3, [r4, #48]	@ 0x30
 800beb6:	4b0d      	ldr	r3, [pc, #52]	@ (800beec <std+0x68>)
 800beb8:	6224      	str	r4, [r4, #32]
 800beba:	429c      	cmp	r4, r3
 800bebc:	d006      	beq.n	800becc <std+0x48>
 800bebe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bec2:	4294      	cmp	r4, r2
 800bec4:	d002      	beq.n	800becc <std+0x48>
 800bec6:	33d0      	adds	r3, #208	@ 0xd0
 800bec8:	429c      	cmp	r4, r3
 800beca:	d105      	bne.n	800bed8 <std+0x54>
 800becc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bed4:	f000 babe 	b.w	800c454 <__retarget_lock_init_recursive>
 800bed8:	bd10      	pop	{r4, pc}
 800beda:	bf00      	nop
 800bedc:	0800c0e9 	.word	0x0800c0e9
 800bee0:	0800c10b 	.word	0x0800c10b
 800bee4:	0800c143 	.word	0x0800c143
 800bee8:	0800c167 	.word	0x0800c167
 800beec:	200066c4 	.word	0x200066c4

0800bef0 <stdio_exit_handler>:
 800bef0:	4a02      	ldr	r2, [pc, #8]	@ (800befc <stdio_exit_handler+0xc>)
 800bef2:	4903      	ldr	r1, [pc, #12]	@ (800bf00 <stdio_exit_handler+0x10>)
 800bef4:	4803      	ldr	r0, [pc, #12]	@ (800bf04 <stdio_exit_handler+0x14>)
 800bef6:	f000 b869 	b.w	800bfcc <_fwalk_sglue>
 800befa:	bf00      	nop
 800befc:	20000110 	.word	0x20000110
 800bf00:	0800cbb5 	.word	0x0800cbb5
 800bf04:	20000120 	.word	0x20000120

0800bf08 <cleanup_stdio>:
 800bf08:	6841      	ldr	r1, [r0, #4]
 800bf0a:	4b0c      	ldr	r3, [pc, #48]	@ (800bf3c <cleanup_stdio+0x34>)
 800bf0c:	4299      	cmp	r1, r3
 800bf0e:	b510      	push	{r4, lr}
 800bf10:	4604      	mov	r4, r0
 800bf12:	d001      	beq.n	800bf18 <cleanup_stdio+0x10>
 800bf14:	f000 fe4e 	bl	800cbb4 <_fflush_r>
 800bf18:	68a1      	ldr	r1, [r4, #8]
 800bf1a:	4b09      	ldr	r3, [pc, #36]	@ (800bf40 <cleanup_stdio+0x38>)
 800bf1c:	4299      	cmp	r1, r3
 800bf1e:	d002      	beq.n	800bf26 <cleanup_stdio+0x1e>
 800bf20:	4620      	mov	r0, r4
 800bf22:	f000 fe47 	bl	800cbb4 <_fflush_r>
 800bf26:	68e1      	ldr	r1, [r4, #12]
 800bf28:	4b06      	ldr	r3, [pc, #24]	@ (800bf44 <cleanup_stdio+0x3c>)
 800bf2a:	4299      	cmp	r1, r3
 800bf2c:	d004      	beq.n	800bf38 <cleanup_stdio+0x30>
 800bf2e:	4620      	mov	r0, r4
 800bf30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf34:	f000 be3e 	b.w	800cbb4 <_fflush_r>
 800bf38:	bd10      	pop	{r4, pc}
 800bf3a:	bf00      	nop
 800bf3c:	200066c4 	.word	0x200066c4
 800bf40:	2000672c 	.word	0x2000672c
 800bf44:	20006794 	.word	0x20006794

0800bf48 <global_stdio_init.part.0>:
 800bf48:	b510      	push	{r4, lr}
 800bf4a:	4b0b      	ldr	r3, [pc, #44]	@ (800bf78 <global_stdio_init.part.0+0x30>)
 800bf4c:	4c0b      	ldr	r4, [pc, #44]	@ (800bf7c <global_stdio_init.part.0+0x34>)
 800bf4e:	4a0c      	ldr	r2, [pc, #48]	@ (800bf80 <global_stdio_init.part.0+0x38>)
 800bf50:	601a      	str	r2, [r3, #0]
 800bf52:	4620      	mov	r0, r4
 800bf54:	2200      	movs	r2, #0
 800bf56:	2104      	movs	r1, #4
 800bf58:	f7ff ff94 	bl	800be84 <std>
 800bf5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bf60:	2201      	movs	r2, #1
 800bf62:	2109      	movs	r1, #9
 800bf64:	f7ff ff8e 	bl	800be84 <std>
 800bf68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bf6c:	2202      	movs	r2, #2
 800bf6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf72:	2112      	movs	r1, #18
 800bf74:	f7ff bf86 	b.w	800be84 <std>
 800bf78:	200067fc 	.word	0x200067fc
 800bf7c:	200066c4 	.word	0x200066c4
 800bf80:	0800bef1 	.word	0x0800bef1

0800bf84 <__sfp_lock_acquire>:
 800bf84:	4801      	ldr	r0, [pc, #4]	@ (800bf8c <__sfp_lock_acquire+0x8>)
 800bf86:	f000 ba66 	b.w	800c456 <__retarget_lock_acquire_recursive>
 800bf8a:	bf00      	nop
 800bf8c:	20006805 	.word	0x20006805

0800bf90 <__sfp_lock_release>:
 800bf90:	4801      	ldr	r0, [pc, #4]	@ (800bf98 <__sfp_lock_release+0x8>)
 800bf92:	f000 ba61 	b.w	800c458 <__retarget_lock_release_recursive>
 800bf96:	bf00      	nop
 800bf98:	20006805 	.word	0x20006805

0800bf9c <__sinit>:
 800bf9c:	b510      	push	{r4, lr}
 800bf9e:	4604      	mov	r4, r0
 800bfa0:	f7ff fff0 	bl	800bf84 <__sfp_lock_acquire>
 800bfa4:	6a23      	ldr	r3, [r4, #32]
 800bfa6:	b11b      	cbz	r3, 800bfb0 <__sinit+0x14>
 800bfa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfac:	f7ff bff0 	b.w	800bf90 <__sfp_lock_release>
 800bfb0:	4b04      	ldr	r3, [pc, #16]	@ (800bfc4 <__sinit+0x28>)
 800bfb2:	6223      	str	r3, [r4, #32]
 800bfb4:	4b04      	ldr	r3, [pc, #16]	@ (800bfc8 <__sinit+0x2c>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d1f5      	bne.n	800bfa8 <__sinit+0xc>
 800bfbc:	f7ff ffc4 	bl	800bf48 <global_stdio_init.part.0>
 800bfc0:	e7f2      	b.n	800bfa8 <__sinit+0xc>
 800bfc2:	bf00      	nop
 800bfc4:	0800bf09 	.word	0x0800bf09
 800bfc8:	200067fc 	.word	0x200067fc

0800bfcc <_fwalk_sglue>:
 800bfcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfd0:	4607      	mov	r7, r0
 800bfd2:	4688      	mov	r8, r1
 800bfd4:	4614      	mov	r4, r2
 800bfd6:	2600      	movs	r6, #0
 800bfd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bfdc:	f1b9 0901 	subs.w	r9, r9, #1
 800bfe0:	d505      	bpl.n	800bfee <_fwalk_sglue+0x22>
 800bfe2:	6824      	ldr	r4, [r4, #0]
 800bfe4:	2c00      	cmp	r4, #0
 800bfe6:	d1f7      	bne.n	800bfd8 <_fwalk_sglue+0xc>
 800bfe8:	4630      	mov	r0, r6
 800bfea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfee:	89ab      	ldrh	r3, [r5, #12]
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d907      	bls.n	800c004 <_fwalk_sglue+0x38>
 800bff4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bff8:	3301      	adds	r3, #1
 800bffa:	d003      	beq.n	800c004 <_fwalk_sglue+0x38>
 800bffc:	4629      	mov	r1, r5
 800bffe:	4638      	mov	r0, r7
 800c000:	47c0      	blx	r8
 800c002:	4306      	orrs	r6, r0
 800c004:	3568      	adds	r5, #104	@ 0x68
 800c006:	e7e9      	b.n	800bfdc <_fwalk_sglue+0x10>

0800c008 <iprintf>:
 800c008:	b40f      	push	{r0, r1, r2, r3}
 800c00a:	b507      	push	{r0, r1, r2, lr}
 800c00c:	4906      	ldr	r1, [pc, #24]	@ (800c028 <iprintf+0x20>)
 800c00e:	ab04      	add	r3, sp, #16
 800c010:	6808      	ldr	r0, [r1, #0]
 800c012:	f853 2b04 	ldr.w	r2, [r3], #4
 800c016:	6881      	ldr	r1, [r0, #8]
 800c018:	9301      	str	r3, [sp, #4]
 800c01a:	f000 faa1 	bl	800c560 <_vfiprintf_r>
 800c01e:	b003      	add	sp, #12
 800c020:	f85d eb04 	ldr.w	lr, [sp], #4
 800c024:	b004      	add	sp, #16
 800c026:	4770      	bx	lr
 800c028:	2000011c 	.word	0x2000011c

0800c02c <_puts_r>:
 800c02c:	6a03      	ldr	r3, [r0, #32]
 800c02e:	b570      	push	{r4, r5, r6, lr}
 800c030:	6884      	ldr	r4, [r0, #8]
 800c032:	4605      	mov	r5, r0
 800c034:	460e      	mov	r6, r1
 800c036:	b90b      	cbnz	r3, 800c03c <_puts_r+0x10>
 800c038:	f7ff ffb0 	bl	800bf9c <__sinit>
 800c03c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c03e:	07db      	lsls	r3, r3, #31
 800c040:	d405      	bmi.n	800c04e <_puts_r+0x22>
 800c042:	89a3      	ldrh	r3, [r4, #12]
 800c044:	0598      	lsls	r0, r3, #22
 800c046:	d402      	bmi.n	800c04e <_puts_r+0x22>
 800c048:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c04a:	f000 fa04 	bl	800c456 <__retarget_lock_acquire_recursive>
 800c04e:	89a3      	ldrh	r3, [r4, #12]
 800c050:	0719      	lsls	r1, r3, #28
 800c052:	d502      	bpl.n	800c05a <_puts_r+0x2e>
 800c054:	6923      	ldr	r3, [r4, #16]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d135      	bne.n	800c0c6 <_puts_r+0x9a>
 800c05a:	4621      	mov	r1, r4
 800c05c:	4628      	mov	r0, r5
 800c05e:	f000 f8c5 	bl	800c1ec <__swsetup_r>
 800c062:	b380      	cbz	r0, 800c0c6 <_puts_r+0x9a>
 800c064:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800c068:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c06a:	07da      	lsls	r2, r3, #31
 800c06c:	d405      	bmi.n	800c07a <_puts_r+0x4e>
 800c06e:	89a3      	ldrh	r3, [r4, #12]
 800c070:	059b      	lsls	r3, r3, #22
 800c072:	d402      	bmi.n	800c07a <_puts_r+0x4e>
 800c074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c076:	f000 f9ef 	bl	800c458 <__retarget_lock_release_recursive>
 800c07a:	4628      	mov	r0, r5
 800c07c:	bd70      	pop	{r4, r5, r6, pc}
 800c07e:	2b00      	cmp	r3, #0
 800c080:	da04      	bge.n	800c08c <_puts_r+0x60>
 800c082:	69a2      	ldr	r2, [r4, #24]
 800c084:	429a      	cmp	r2, r3
 800c086:	dc17      	bgt.n	800c0b8 <_puts_r+0x8c>
 800c088:	290a      	cmp	r1, #10
 800c08a:	d015      	beq.n	800c0b8 <_puts_r+0x8c>
 800c08c:	6823      	ldr	r3, [r4, #0]
 800c08e:	1c5a      	adds	r2, r3, #1
 800c090:	6022      	str	r2, [r4, #0]
 800c092:	7019      	strb	r1, [r3, #0]
 800c094:	68a3      	ldr	r3, [r4, #8]
 800c096:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c09a:	3b01      	subs	r3, #1
 800c09c:	60a3      	str	r3, [r4, #8]
 800c09e:	2900      	cmp	r1, #0
 800c0a0:	d1ed      	bne.n	800c07e <_puts_r+0x52>
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	da11      	bge.n	800c0ca <_puts_r+0x9e>
 800c0a6:	4622      	mov	r2, r4
 800c0a8:	210a      	movs	r1, #10
 800c0aa:	4628      	mov	r0, r5
 800c0ac:	f000 f85f 	bl	800c16e <__swbuf_r>
 800c0b0:	3001      	adds	r0, #1
 800c0b2:	d0d7      	beq.n	800c064 <_puts_r+0x38>
 800c0b4:	250a      	movs	r5, #10
 800c0b6:	e7d7      	b.n	800c068 <_puts_r+0x3c>
 800c0b8:	4622      	mov	r2, r4
 800c0ba:	4628      	mov	r0, r5
 800c0bc:	f000 f857 	bl	800c16e <__swbuf_r>
 800c0c0:	3001      	adds	r0, #1
 800c0c2:	d1e7      	bne.n	800c094 <_puts_r+0x68>
 800c0c4:	e7ce      	b.n	800c064 <_puts_r+0x38>
 800c0c6:	3e01      	subs	r6, #1
 800c0c8:	e7e4      	b.n	800c094 <_puts_r+0x68>
 800c0ca:	6823      	ldr	r3, [r4, #0]
 800c0cc:	1c5a      	adds	r2, r3, #1
 800c0ce:	6022      	str	r2, [r4, #0]
 800c0d0:	220a      	movs	r2, #10
 800c0d2:	701a      	strb	r2, [r3, #0]
 800c0d4:	e7ee      	b.n	800c0b4 <_puts_r+0x88>
	...

0800c0d8 <puts>:
 800c0d8:	4b02      	ldr	r3, [pc, #8]	@ (800c0e4 <puts+0xc>)
 800c0da:	4601      	mov	r1, r0
 800c0dc:	6818      	ldr	r0, [r3, #0]
 800c0de:	f7ff bfa5 	b.w	800c02c <_puts_r>
 800c0e2:	bf00      	nop
 800c0e4:	2000011c 	.word	0x2000011c

0800c0e8 <__sread>:
 800c0e8:	b510      	push	{r4, lr}
 800c0ea:	460c      	mov	r4, r1
 800c0ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0f0:	f000 f952 	bl	800c398 <_read_r>
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	bfab      	itete	ge
 800c0f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c0fa:	89a3      	ldrhlt	r3, [r4, #12]
 800c0fc:	181b      	addge	r3, r3, r0
 800c0fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c102:	bfac      	ite	ge
 800c104:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c106:	81a3      	strhlt	r3, [r4, #12]
 800c108:	bd10      	pop	{r4, pc}

0800c10a <__swrite>:
 800c10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c10e:	461f      	mov	r7, r3
 800c110:	898b      	ldrh	r3, [r1, #12]
 800c112:	05db      	lsls	r3, r3, #23
 800c114:	4605      	mov	r5, r0
 800c116:	460c      	mov	r4, r1
 800c118:	4616      	mov	r6, r2
 800c11a:	d505      	bpl.n	800c128 <__swrite+0x1e>
 800c11c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c120:	2302      	movs	r3, #2
 800c122:	2200      	movs	r2, #0
 800c124:	f000 f926 	bl	800c374 <_lseek_r>
 800c128:	89a3      	ldrh	r3, [r4, #12]
 800c12a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c12e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c132:	81a3      	strh	r3, [r4, #12]
 800c134:	4632      	mov	r2, r6
 800c136:	463b      	mov	r3, r7
 800c138:	4628      	mov	r0, r5
 800c13a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c13e:	f000 b94d 	b.w	800c3dc <_write_r>

0800c142 <__sseek>:
 800c142:	b510      	push	{r4, lr}
 800c144:	460c      	mov	r4, r1
 800c146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c14a:	f000 f913 	bl	800c374 <_lseek_r>
 800c14e:	1c43      	adds	r3, r0, #1
 800c150:	89a3      	ldrh	r3, [r4, #12]
 800c152:	bf15      	itete	ne
 800c154:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c156:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c15a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c15e:	81a3      	strheq	r3, [r4, #12]
 800c160:	bf18      	it	ne
 800c162:	81a3      	strhne	r3, [r4, #12]
 800c164:	bd10      	pop	{r4, pc}

0800c166 <__sclose>:
 800c166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c16a:	f000 b89d 	b.w	800c2a8 <_close_r>

0800c16e <__swbuf_r>:
 800c16e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c170:	460e      	mov	r6, r1
 800c172:	4614      	mov	r4, r2
 800c174:	4605      	mov	r5, r0
 800c176:	b118      	cbz	r0, 800c180 <__swbuf_r+0x12>
 800c178:	6a03      	ldr	r3, [r0, #32]
 800c17a:	b90b      	cbnz	r3, 800c180 <__swbuf_r+0x12>
 800c17c:	f7ff ff0e 	bl	800bf9c <__sinit>
 800c180:	69a3      	ldr	r3, [r4, #24]
 800c182:	60a3      	str	r3, [r4, #8]
 800c184:	89a3      	ldrh	r3, [r4, #12]
 800c186:	071a      	lsls	r2, r3, #28
 800c188:	d501      	bpl.n	800c18e <__swbuf_r+0x20>
 800c18a:	6923      	ldr	r3, [r4, #16]
 800c18c:	b943      	cbnz	r3, 800c1a0 <__swbuf_r+0x32>
 800c18e:	4621      	mov	r1, r4
 800c190:	4628      	mov	r0, r5
 800c192:	f000 f82b 	bl	800c1ec <__swsetup_r>
 800c196:	b118      	cbz	r0, 800c1a0 <__swbuf_r+0x32>
 800c198:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c19c:	4638      	mov	r0, r7
 800c19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1a0:	6823      	ldr	r3, [r4, #0]
 800c1a2:	6922      	ldr	r2, [r4, #16]
 800c1a4:	1a98      	subs	r0, r3, r2
 800c1a6:	6963      	ldr	r3, [r4, #20]
 800c1a8:	b2f6      	uxtb	r6, r6
 800c1aa:	4283      	cmp	r3, r0
 800c1ac:	4637      	mov	r7, r6
 800c1ae:	dc05      	bgt.n	800c1bc <__swbuf_r+0x4e>
 800c1b0:	4621      	mov	r1, r4
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	f000 fcfe 	bl	800cbb4 <_fflush_r>
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d1ed      	bne.n	800c198 <__swbuf_r+0x2a>
 800c1bc:	68a3      	ldr	r3, [r4, #8]
 800c1be:	3b01      	subs	r3, #1
 800c1c0:	60a3      	str	r3, [r4, #8]
 800c1c2:	6823      	ldr	r3, [r4, #0]
 800c1c4:	1c5a      	adds	r2, r3, #1
 800c1c6:	6022      	str	r2, [r4, #0]
 800c1c8:	701e      	strb	r6, [r3, #0]
 800c1ca:	6962      	ldr	r2, [r4, #20]
 800c1cc:	1c43      	adds	r3, r0, #1
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d004      	beq.n	800c1dc <__swbuf_r+0x6e>
 800c1d2:	89a3      	ldrh	r3, [r4, #12]
 800c1d4:	07db      	lsls	r3, r3, #31
 800c1d6:	d5e1      	bpl.n	800c19c <__swbuf_r+0x2e>
 800c1d8:	2e0a      	cmp	r6, #10
 800c1da:	d1df      	bne.n	800c19c <__swbuf_r+0x2e>
 800c1dc:	4621      	mov	r1, r4
 800c1de:	4628      	mov	r0, r5
 800c1e0:	f000 fce8 	bl	800cbb4 <_fflush_r>
 800c1e4:	2800      	cmp	r0, #0
 800c1e6:	d0d9      	beq.n	800c19c <__swbuf_r+0x2e>
 800c1e8:	e7d6      	b.n	800c198 <__swbuf_r+0x2a>
	...

0800c1ec <__swsetup_r>:
 800c1ec:	b538      	push	{r3, r4, r5, lr}
 800c1ee:	4b29      	ldr	r3, [pc, #164]	@ (800c294 <__swsetup_r+0xa8>)
 800c1f0:	4605      	mov	r5, r0
 800c1f2:	6818      	ldr	r0, [r3, #0]
 800c1f4:	460c      	mov	r4, r1
 800c1f6:	b118      	cbz	r0, 800c200 <__swsetup_r+0x14>
 800c1f8:	6a03      	ldr	r3, [r0, #32]
 800c1fa:	b90b      	cbnz	r3, 800c200 <__swsetup_r+0x14>
 800c1fc:	f7ff fece 	bl	800bf9c <__sinit>
 800c200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c204:	0719      	lsls	r1, r3, #28
 800c206:	d422      	bmi.n	800c24e <__swsetup_r+0x62>
 800c208:	06da      	lsls	r2, r3, #27
 800c20a:	d407      	bmi.n	800c21c <__swsetup_r+0x30>
 800c20c:	2209      	movs	r2, #9
 800c20e:	602a      	str	r2, [r5, #0]
 800c210:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c214:	81a3      	strh	r3, [r4, #12]
 800c216:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c21a:	e033      	b.n	800c284 <__swsetup_r+0x98>
 800c21c:	0758      	lsls	r0, r3, #29
 800c21e:	d512      	bpl.n	800c246 <__swsetup_r+0x5a>
 800c220:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c222:	b141      	cbz	r1, 800c236 <__swsetup_r+0x4a>
 800c224:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c228:	4299      	cmp	r1, r3
 800c22a:	d002      	beq.n	800c232 <__swsetup_r+0x46>
 800c22c:	4628      	mov	r0, r5
 800c22e:	f000 f923 	bl	800c478 <_free_r>
 800c232:	2300      	movs	r3, #0
 800c234:	6363      	str	r3, [r4, #52]	@ 0x34
 800c236:	89a3      	ldrh	r3, [r4, #12]
 800c238:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c23c:	81a3      	strh	r3, [r4, #12]
 800c23e:	2300      	movs	r3, #0
 800c240:	6063      	str	r3, [r4, #4]
 800c242:	6923      	ldr	r3, [r4, #16]
 800c244:	6023      	str	r3, [r4, #0]
 800c246:	89a3      	ldrh	r3, [r4, #12]
 800c248:	f043 0308 	orr.w	r3, r3, #8
 800c24c:	81a3      	strh	r3, [r4, #12]
 800c24e:	6923      	ldr	r3, [r4, #16]
 800c250:	b94b      	cbnz	r3, 800c266 <__swsetup_r+0x7a>
 800c252:	89a3      	ldrh	r3, [r4, #12]
 800c254:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c25c:	d003      	beq.n	800c266 <__swsetup_r+0x7a>
 800c25e:	4621      	mov	r1, r4
 800c260:	4628      	mov	r0, r5
 800c262:	f000 fcf5 	bl	800cc50 <__smakebuf_r>
 800c266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c26a:	f013 0201 	ands.w	r2, r3, #1
 800c26e:	d00a      	beq.n	800c286 <__swsetup_r+0x9a>
 800c270:	2200      	movs	r2, #0
 800c272:	60a2      	str	r2, [r4, #8]
 800c274:	6962      	ldr	r2, [r4, #20]
 800c276:	4252      	negs	r2, r2
 800c278:	61a2      	str	r2, [r4, #24]
 800c27a:	6922      	ldr	r2, [r4, #16]
 800c27c:	b942      	cbnz	r2, 800c290 <__swsetup_r+0xa4>
 800c27e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c282:	d1c5      	bne.n	800c210 <__swsetup_r+0x24>
 800c284:	bd38      	pop	{r3, r4, r5, pc}
 800c286:	0799      	lsls	r1, r3, #30
 800c288:	bf58      	it	pl
 800c28a:	6962      	ldrpl	r2, [r4, #20]
 800c28c:	60a2      	str	r2, [r4, #8]
 800c28e:	e7f4      	b.n	800c27a <__swsetup_r+0x8e>
 800c290:	2000      	movs	r0, #0
 800c292:	e7f7      	b.n	800c284 <__swsetup_r+0x98>
 800c294:	2000011c 	.word	0x2000011c

0800c298 <memset>:
 800c298:	4402      	add	r2, r0
 800c29a:	4603      	mov	r3, r0
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d100      	bne.n	800c2a2 <memset+0xa>
 800c2a0:	4770      	bx	lr
 800c2a2:	f803 1b01 	strb.w	r1, [r3], #1
 800c2a6:	e7f9      	b.n	800c29c <memset+0x4>

0800c2a8 <_close_r>:
 800c2a8:	b538      	push	{r3, r4, r5, lr}
 800c2aa:	4d06      	ldr	r5, [pc, #24]	@ (800c2c4 <_close_r+0x1c>)
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	4604      	mov	r4, r0
 800c2b0:	4608      	mov	r0, r1
 800c2b2:	602b      	str	r3, [r5, #0]
 800c2b4:	f7f4 fdf3 	bl	8000e9e <_close>
 800c2b8:	1c43      	adds	r3, r0, #1
 800c2ba:	d102      	bne.n	800c2c2 <_close_r+0x1a>
 800c2bc:	682b      	ldr	r3, [r5, #0]
 800c2be:	b103      	cbz	r3, 800c2c2 <_close_r+0x1a>
 800c2c0:	6023      	str	r3, [r4, #0]
 800c2c2:	bd38      	pop	{r3, r4, r5, pc}
 800c2c4:	20006800 	.word	0x20006800

0800c2c8 <_reclaim_reent>:
 800c2c8:	4b29      	ldr	r3, [pc, #164]	@ (800c370 <_reclaim_reent+0xa8>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4283      	cmp	r3, r0
 800c2ce:	b570      	push	{r4, r5, r6, lr}
 800c2d0:	4604      	mov	r4, r0
 800c2d2:	d04b      	beq.n	800c36c <_reclaim_reent+0xa4>
 800c2d4:	69c3      	ldr	r3, [r0, #28]
 800c2d6:	b1ab      	cbz	r3, 800c304 <_reclaim_reent+0x3c>
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	b16b      	cbz	r3, 800c2f8 <_reclaim_reent+0x30>
 800c2dc:	2500      	movs	r5, #0
 800c2de:	69e3      	ldr	r3, [r4, #28]
 800c2e0:	68db      	ldr	r3, [r3, #12]
 800c2e2:	5959      	ldr	r1, [r3, r5]
 800c2e4:	2900      	cmp	r1, #0
 800c2e6:	d13b      	bne.n	800c360 <_reclaim_reent+0x98>
 800c2e8:	3504      	adds	r5, #4
 800c2ea:	2d80      	cmp	r5, #128	@ 0x80
 800c2ec:	d1f7      	bne.n	800c2de <_reclaim_reent+0x16>
 800c2ee:	69e3      	ldr	r3, [r4, #28]
 800c2f0:	4620      	mov	r0, r4
 800c2f2:	68d9      	ldr	r1, [r3, #12]
 800c2f4:	f000 f8c0 	bl	800c478 <_free_r>
 800c2f8:	69e3      	ldr	r3, [r4, #28]
 800c2fa:	6819      	ldr	r1, [r3, #0]
 800c2fc:	b111      	cbz	r1, 800c304 <_reclaim_reent+0x3c>
 800c2fe:	4620      	mov	r0, r4
 800c300:	f000 f8ba 	bl	800c478 <_free_r>
 800c304:	6961      	ldr	r1, [r4, #20]
 800c306:	b111      	cbz	r1, 800c30e <_reclaim_reent+0x46>
 800c308:	4620      	mov	r0, r4
 800c30a:	f000 f8b5 	bl	800c478 <_free_r>
 800c30e:	69e1      	ldr	r1, [r4, #28]
 800c310:	b111      	cbz	r1, 800c318 <_reclaim_reent+0x50>
 800c312:	4620      	mov	r0, r4
 800c314:	f000 f8b0 	bl	800c478 <_free_r>
 800c318:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c31a:	b111      	cbz	r1, 800c322 <_reclaim_reent+0x5a>
 800c31c:	4620      	mov	r0, r4
 800c31e:	f000 f8ab 	bl	800c478 <_free_r>
 800c322:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c324:	b111      	cbz	r1, 800c32c <_reclaim_reent+0x64>
 800c326:	4620      	mov	r0, r4
 800c328:	f000 f8a6 	bl	800c478 <_free_r>
 800c32c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c32e:	b111      	cbz	r1, 800c336 <_reclaim_reent+0x6e>
 800c330:	4620      	mov	r0, r4
 800c332:	f000 f8a1 	bl	800c478 <_free_r>
 800c336:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c338:	b111      	cbz	r1, 800c340 <_reclaim_reent+0x78>
 800c33a:	4620      	mov	r0, r4
 800c33c:	f000 f89c 	bl	800c478 <_free_r>
 800c340:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c342:	b111      	cbz	r1, 800c34a <_reclaim_reent+0x82>
 800c344:	4620      	mov	r0, r4
 800c346:	f000 f897 	bl	800c478 <_free_r>
 800c34a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c34c:	b111      	cbz	r1, 800c354 <_reclaim_reent+0x8c>
 800c34e:	4620      	mov	r0, r4
 800c350:	f000 f892 	bl	800c478 <_free_r>
 800c354:	6a23      	ldr	r3, [r4, #32]
 800c356:	b14b      	cbz	r3, 800c36c <_reclaim_reent+0xa4>
 800c358:	4620      	mov	r0, r4
 800c35a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c35e:	4718      	bx	r3
 800c360:	680e      	ldr	r6, [r1, #0]
 800c362:	4620      	mov	r0, r4
 800c364:	f000 f888 	bl	800c478 <_free_r>
 800c368:	4631      	mov	r1, r6
 800c36a:	e7bb      	b.n	800c2e4 <_reclaim_reent+0x1c>
 800c36c:	bd70      	pop	{r4, r5, r6, pc}
 800c36e:	bf00      	nop
 800c370:	2000011c 	.word	0x2000011c

0800c374 <_lseek_r>:
 800c374:	b538      	push	{r3, r4, r5, lr}
 800c376:	4d07      	ldr	r5, [pc, #28]	@ (800c394 <_lseek_r+0x20>)
 800c378:	4604      	mov	r4, r0
 800c37a:	4608      	mov	r0, r1
 800c37c:	4611      	mov	r1, r2
 800c37e:	2200      	movs	r2, #0
 800c380:	602a      	str	r2, [r5, #0]
 800c382:	461a      	mov	r2, r3
 800c384:	f7f4 fdb2 	bl	8000eec <_lseek>
 800c388:	1c43      	adds	r3, r0, #1
 800c38a:	d102      	bne.n	800c392 <_lseek_r+0x1e>
 800c38c:	682b      	ldr	r3, [r5, #0]
 800c38e:	b103      	cbz	r3, 800c392 <_lseek_r+0x1e>
 800c390:	6023      	str	r3, [r4, #0]
 800c392:	bd38      	pop	{r3, r4, r5, pc}
 800c394:	20006800 	.word	0x20006800

0800c398 <_read_r>:
 800c398:	b538      	push	{r3, r4, r5, lr}
 800c39a:	4d07      	ldr	r5, [pc, #28]	@ (800c3b8 <_read_r+0x20>)
 800c39c:	4604      	mov	r4, r0
 800c39e:	4608      	mov	r0, r1
 800c3a0:	4611      	mov	r1, r2
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	602a      	str	r2, [r5, #0]
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	f7f4 fd40 	bl	8000e2c <_read>
 800c3ac:	1c43      	adds	r3, r0, #1
 800c3ae:	d102      	bne.n	800c3b6 <_read_r+0x1e>
 800c3b0:	682b      	ldr	r3, [r5, #0]
 800c3b2:	b103      	cbz	r3, 800c3b6 <_read_r+0x1e>
 800c3b4:	6023      	str	r3, [r4, #0]
 800c3b6:	bd38      	pop	{r3, r4, r5, pc}
 800c3b8:	20006800 	.word	0x20006800

0800c3bc <_sbrk_r>:
 800c3bc:	b538      	push	{r3, r4, r5, lr}
 800c3be:	4d06      	ldr	r5, [pc, #24]	@ (800c3d8 <_sbrk_r+0x1c>)
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	4604      	mov	r4, r0
 800c3c4:	4608      	mov	r0, r1
 800c3c6:	602b      	str	r3, [r5, #0]
 800c3c8:	f7f4 fd9e 	bl	8000f08 <_sbrk>
 800c3cc:	1c43      	adds	r3, r0, #1
 800c3ce:	d102      	bne.n	800c3d6 <_sbrk_r+0x1a>
 800c3d0:	682b      	ldr	r3, [r5, #0]
 800c3d2:	b103      	cbz	r3, 800c3d6 <_sbrk_r+0x1a>
 800c3d4:	6023      	str	r3, [r4, #0]
 800c3d6:	bd38      	pop	{r3, r4, r5, pc}
 800c3d8:	20006800 	.word	0x20006800

0800c3dc <_write_r>:
 800c3dc:	b538      	push	{r3, r4, r5, lr}
 800c3de:	4d07      	ldr	r5, [pc, #28]	@ (800c3fc <_write_r+0x20>)
 800c3e0:	4604      	mov	r4, r0
 800c3e2:	4608      	mov	r0, r1
 800c3e4:	4611      	mov	r1, r2
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	602a      	str	r2, [r5, #0]
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	f7f4 fd3b 	bl	8000e66 <_write>
 800c3f0:	1c43      	adds	r3, r0, #1
 800c3f2:	d102      	bne.n	800c3fa <_write_r+0x1e>
 800c3f4:	682b      	ldr	r3, [r5, #0]
 800c3f6:	b103      	cbz	r3, 800c3fa <_write_r+0x1e>
 800c3f8:	6023      	str	r3, [r4, #0]
 800c3fa:	bd38      	pop	{r3, r4, r5, pc}
 800c3fc:	20006800 	.word	0x20006800

0800c400 <__errno>:
 800c400:	4b01      	ldr	r3, [pc, #4]	@ (800c408 <__errno+0x8>)
 800c402:	6818      	ldr	r0, [r3, #0]
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop
 800c408:	2000011c 	.word	0x2000011c

0800c40c <__libc_init_array>:
 800c40c:	b570      	push	{r4, r5, r6, lr}
 800c40e:	4d0d      	ldr	r5, [pc, #52]	@ (800c444 <__libc_init_array+0x38>)
 800c410:	4c0d      	ldr	r4, [pc, #52]	@ (800c448 <__libc_init_array+0x3c>)
 800c412:	1b64      	subs	r4, r4, r5
 800c414:	10a4      	asrs	r4, r4, #2
 800c416:	2600      	movs	r6, #0
 800c418:	42a6      	cmp	r6, r4
 800c41a:	d109      	bne.n	800c430 <__libc_init_array+0x24>
 800c41c:	4d0b      	ldr	r5, [pc, #44]	@ (800c44c <__libc_init_array+0x40>)
 800c41e:	4c0c      	ldr	r4, [pc, #48]	@ (800c450 <__libc_init_array+0x44>)
 800c420:	f000 fc74 	bl	800cd0c <_init>
 800c424:	1b64      	subs	r4, r4, r5
 800c426:	10a4      	asrs	r4, r4, #2
 800c428:	2600      	movs	r6, #0
 800c42a:	42a6      	cmp	r6, r4
 800c42c:	d105      	bne.n	800c43a <__libc_init_array+0x2e>
 800c42e:	bd70      	pop	{r4, r5, r6, pc}
 800c430:	f855 3b04 	ldr.w	r3, [r5], #4
 800c434:	4798      	blx	r3
 800c436:	3601      	adds	r6, #1
 800c438:	e7ee      	b.n	800c418 <__libc_init_array+0xc>
 800c43a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c43e:	4798      	blx	r3
 800c440:	3601      	adds	r6, #1
 800c442:	e7f2      	b.n	800c42a <__libc_init_array+0x1e>
 800c444:	0800ce78 	.word	0x0800ce78
 800c448:	0800ce78 	.word	0x0800ce78
 800c44c:	0800ce78 	.word	0x0800ce78
 800c450:	0800ce7c 	.word	0x0800ce7c

0800c454 <__retarget_lock_init_recursive>:
 800c454:	4770      	bx	lr

0800c456 <__retarget_lock_acquire_recursive>:
 800c456:	4770      	bx	lr

0800c458 <__retarget_lock_release_recursive>:
 800c458:	4770      	bx	lr

0800c45a <memcpy>:
 800c45a:	440a      	add	r2, r1
 800c45c:	4291      	cmp	r1, r2
 800c45e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c462:	d100      	bne.n	800c466 <memcpy+0xc>
 800c464:	4770      	bx	lr
 800c466:	b510      	push	{r4, lr}
 800c468:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c46c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c470:	4291      	cmp	r1, r2
 800c472:	d1f9      	bne.n	800c468 <memcpy+0xe>
 800c474:	bd10      	pop	{r4, pc}
	...

0800c478 <_free_r>:
 800c478:	b538      	push	{r3, r4, r5, lr}
 800c47a:	4605      	mov	r5, r0
 800c47c:	2900      	cmp	r1, #0
 800c47e:	d041      	beq.n	800c504 <_free_r+0x8c>
 800c480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c484:	1f0c      	subs	r4, r1, #4
 800c486:	2b00      	cmp	r3, #0
 800c488:	bfb8      	it	lt
 800c48a:	18e4      	addlt	r4, r4, r3
 800c48c:	f7ff fcee 	bl	800be6c <__malloc_lock>
 800c490:	4a1d      	ldr	r2, [pc, #116]	@ (800c508 <_free_r+0x90>)
 800c492:	6813      	ldr	r3, [r2, #0]
 800c494:	b933      	cbnz	r3, 800c4a4 <_free_r+0x2c>
 800c496:	6063      	str	r3, [r4, #4]
 800c498:	6014      	str	r4, [r2, #0]
 800c49a:	4628      	mov	r0, r5
 800c49c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4a0:	f7ff bcea 	b.w	800be78 <__malloc_unlock>
 800c4a4:	42a3      	cmp	r3, r4
 800c4a6:	d908      	bls.n	800c4ba <_free_r+0x42>
 800c4a8:	6820      	ldr	r0, [r4, #0]
 800c4aa:	1821      	adds	r1, r4, r0
 800c4ac:	428b      	cmp	r3, r1
 800c4ae:	bf01      	itttt	eq
 800c4b0:	6819      	ldreq	r1, [r3, #0]
 800c4b2:	685b      	ldreq	r3, [r3, #4]
 800c4b4:	1809      	addeq	r1, r1, r0
 800c4b6:	6021      	streq	r1, [r4, #0]
 800c4b8:	e7ed      	b.n	800c496 <_free_r+0x1e>
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	b10b      	cbz	r3, 800c4c4 <_free_r+0x4c>
 800c4c0:	42a3      	cmp	r3, r4
 800c4c2:	d9fa      	bls.n	800c4ba <_free_r+0x42>
 800c4c4:	6811      	ldr	r1, [r2, #0]
 800c4c6:	1850      	adds	r0, r2, r1
 800c4c8:	42a0      	cmp	r0, r4
 800c4ca:	d10b      	bne.n	800c4e4 <_free_r+0x6c>
 800c4cc:	6820      	ldr	r0, [r4, #0]
 800c4ce:	4401      	add	r1, r0
 800c4d0:	1850      	adds	r0, r2, r1
 800c4d2:	4283      	cmp	r3, r0
 800c4d4:	6011      	str	r1, [r2, #0]
 800c4d6:	d1e0      	bne.n	800c49a <_free_r+0x22>
 800c4d8:	6818      	ldr	r0, [r3, #0]
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	6053      	str	r3, [r2, #4]
 800c4de:	4408      	add	r0, r1
 800c4e0:	6010      	str	r0, [r2, #0]
 800c4e2:	e7da      	b.n	800c49a <_free_r+0x22>
 800c4e4:	d902      	bls.n	800c4ec <_free_r+0x74>
 800c4e6:	230c      	movs	r3, #12
 800c4e8:	602b      	str	r3, [r5, #0]
 800c4ea:	e7d6      	b.n	800c49a <_free_r+0x22>
 800c4ec:	6820      	ldr	r0, [r4, #0]
 800c4ee:	1821      	adds	r1, r4, r0
 800c4f0:	428b      	cmp	r3, r1
 800c4f2:	bf04      	itt	eq
 800c4f4:	6819      	ldreq	r1, [r3, #0]
 800c4f6:	685b      	ldreq	r3, [r3, #4]
 800c4f8:	6063      	str	r3, [r4, #4]
 800c4fa:	bf04      	itt	eq
 800c4fc:	1809      	addeq	r1, r1, r0
 800c4fe:	6021      	streq	r1, [r4, #0]
 800c500:	6054      	str	r4, [r2, #4]
 800c502:	e7ca      	b.n	800c49a <_free_r+0x22>
 800c504:	bd38      	pop	{r3, r4, r5, pc}
 800c506:	bf00      	nop
 800c508:	200066c0 	.word	0x200066c0

0800c50c <__sfputc_r>:
 800c50c:	6893      	ldr	r3, [r2, #8]
 800c50e:	3b01      	subs	r3, #1
 800c510:	2b00      	cmp	r3, #0
 800c512:	b410      	push	{r4}
 800c514:	6093      	str	r3, [r2, #8]
 800c516:	da08      	bge.n	800c52a <__sfputc_r+0x1e>
 800c518:	6994      	ldr	r4, [r2, #24]
 800c51a:	42a3      	cmp	r3, r4
 800c51c:	db01      	blt.n	800c522 <__sfputc_r+0x16>
 800c51e:	290a      	cmp	r1, #10
 800c520:	d103      	bne.n	800c52a <__sfputc_r+0x1e>
 800c522:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c526:	f7ff be22 	b.w	800c16e <__swbuf_r>
 800c52a:	6813      	ldr	r3, [r2, #0]
 800c52c:	1c58      	adds	r0, r3, #1
 800c52e:	6010      	str	r0, [r2, #0]
 800c530:	7019      	strb	r1, [r3, #0]
 800c532:	4608      	mov	r0, r1
 800c534:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c538:	4770      	bx	lr

0800c53a <__sfputs_r>:
 800c53a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c53c:	4606      	mov	r6, r0
 800c53e:	460f      	mov	r7, r1
 800c540:	4614      	mov	r4, r2
 800c542:	18d5      	adds	r5, r2, r3
 800c544:	42ac      	cmp	r4, r5
 800c546:	d101      	bne.n	800c54c <__sfputs_r+0x12>
 800c548:	2000      	movs	r0, #0
 800c54a:	e007      	b.n	800c55c <__sfputs_r+0x22>
 800c54c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c550:	463a      	mov	r2, r7
 800c552:	4630      	mov	r0, r6
 800c554:	f7ff ffda 	bl	800c50c <__sfputc_r>
 800c558:	1c43      	adds	r3, r0, #1
 800c55a:	d1f3      	bne.n	800c544 <__sfputs_r+0xa>
 800c55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c560 <_vfiprintf_r>:
 800c560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c564:	460d      	mov	r5, r1
 800c566:	b09d      	sub	sp, #116	@ 0x74
 800c568:	4614      	mov	r4, r2
 800c56a:	4698      	mov	r8, r3
 800c56c:	4606      	mov	r6, r0
 800c56e:	b118      	cbz	r0, 800c578 <_vfiprintf_r+0x18>
 800c570:	6a03      	ldr	r3, [r0, #32]
 800c572:	b90b      	cbnz	r3, 800c578 <_vfiprintf_r+0x18>
 800c574:	f7ff fd12 	bl	800bf9c <__sinit>
 800c578:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c57a:	07d9      	lsls	r1, r3, #31
 800c57c:	d405      	bmi.n	800c58a <_vfiprintf_r+0x2a>
 800c57e:	89ab      	ldrh	r3, [r5, #12]
 800c580:	059a      	lsls	r2, r3, #22
 800c582:	d402      	bmi.n	800c58a <_vfiprintf_r+0x2a>
 800c584:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c586:	f7ff ff66 	bl	800c456 <__retarget_lock_acquire_recursive>
 800c58a:	89ab      	ldrh	r3, [r5, #12]
 800c58c:	071b      	lsls	r3, r3, #28
 800c58e:	d501      	bpl.n	800c594 <_vfiprintf_r+0x34>
 800c590:	692b      	ldr	r3, [r5, #16]
 800c592:	b99b      	cbnz	r3, 800c5bc <_vfiprintf_r+0x5c>
 800c594:	4629      	mov	r1, r5
 800c596:	4630      	mov	r0, r6
 800c598:	f7ff fe28 	bl	800c1ec <__swsetup_r>
 800c59c:	b170      	cbz	r0, 800c5bc <_vfiprintf_r+0x5c>
 800c59e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5a0:	07dc      	lsls	r4, r3, #31
 800c5a2:	d504      	bpl.n	800c5ae <_vfiprintf_r+0x4e>
 800c5a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c5a8:	b01d      	add	sp, #116	@ 0x74
 800c5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5ae:	89ab      	ldrh	r3, [r5, #12]
 800c5b0:	0598      	lsls	r0, r3, #22
 800c5b2:	d4f7      	bmi.n	800c5a4 <_vfiprintf_r+0x44>
 800c5b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5b6:	f7ff ff4f 	bl	800c458 <__retarget_lock_release_recursive>
 800c5ba:	e7f3      	b.n	800c5a4 <_vfiprintf_r+0x44>
 800c5bc:	2300      	movs	r3, #0
 800c5be:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5c0:	2320      	movs	r3, #32
 800c5c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c5c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5ca:	2330      	movs	r3, #48	@ 0x30
 800c5cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c77c <_vfiprintf_r+0x21c>
 800c5d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c5d4:	f04f 0901 	mov.w	r9, #1
 800c5d8:	4623      	mov	r3, r4
 800c5da:	469a      	mov	sl, r3
 800c5dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5e0:	b10a      	cbz	r2, 800c5e6 <_vfiprintf_r+0x86>
 800c5e2:	2a25      	cmp	r2, #37	@ 0x25
 800c5e4:	d1f9      	bne.n	800c5da <_vfiprintf_r+0x7a>
 800c5e6:	ebba 0b04 	subs.w	fp, sl, r4
 800c5ea:	d00b      	beq.n	800c604 <_vfiprintf_r+0xa4>
 800c5ec:	465b      	mov	r3, fp
 800c5ee:	4622      	mov	r2, r4
 800c5f0:	4629      	mov	r1, r5
 800c5f2:	4630      	mov	r0, r6
 800c5f4:	f7ff ffa1 	bl	800c53a <__sfputs_r>
 800c5f8:	3001      	adds	r0, #1
 800c5fa:	f000 80a7 	beq.w	800c74c <_vfiprintf_r+0x1ec>
 800c5fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c600:	445a      	add	r2, fp
 800c602:	9209      	str	r2, [sp, #36]	@ 0x24
 800c604:	f89a 3000 	ldrb.w	r3, [sl]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	f000 809f 	beq.w	800c74c <_vfiprintf_r+0x1ec>
 800c60e:	2300      	movs	r3, #0
 800c610:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c614:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c618:	f10a 0a01 	add.w	sl, sl, #1
 800c61c:	9304      	str	r3, [sp, #16]
 800c61e:	9307      	str	r3, [sp, #28]
 800c620:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c624:	931a      	str	r3, [sp, #104]	@ 0x68
 800c626:	4654      	mov	r4, sl
 800c628:	2205      	movs	r2, #5
 800c62a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c62e:	4853      	ldr	r0, [pc, #332]	@ (800c77c <_vfiprintf_r+0x21c>)
 800c630:	f7f3 fdf6 	bl	8000220 <memchr>
 800c634:	9a04      	ldr	r2, [sp, #16]
 800c636:	b9d8      	cbnz	r0, 800c670 <_vfiprintf_r+0x110>
 800c638:	06d1      	lsls	r1, r2, #27
 800c63a:	bf44      	itt	mi
 800c63c:	2320      	movmi	r3, #32
 800c63e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c642:	0713      	lsls	r3, r2, #28
 800c644:	bf44      	itt	mi
 800c646:	232b      	movmi	r3, #43	@ 0x2b
 800c648:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c64c:	f89a 3000 	ldrb.w	r3, [sl]
 800c650:	2b2a      	cmp	r3, #42	@ 0x2a
 800c652:	d015      	beq.n	800c680 <_vfiprintf_r+0x120>
 800c654:	9a07      	ldr	r2, [sp, #28]
 800c656:	4654      	mov	r4, sl
 800c658:	2000      	movs	r0, #0
 800c65a:	f04f 0c0a 	mov.w	ip, #10
 800c65e:	4621      	mov	r1, r4
 800c660:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c664:	3b30      	subs	r3, #48	@ 0x30
 800c666:	2b09      	cmp	r3, #9
 800c668:	d94b      	bls.n	800c702 <_vfiprintf_r+0x1a2>
 800c66a:	b1b0      	cbz	r0, 800c69a <_vfiprintf_r+0x13a>
 800c66c:	9207      	str	r2, [sp, #28]
 800c66e:	e014      	b.n	800c69a <_vfiprintf_r+0x13a>
 800c670:	eba0 0308 	sub.w	r3, r0, r8
 800c674:	fa09 f303 	lsl.w	r3, r9, r3
 800c678:	4313      	orrs	r3, r2
 800c67a:	9304      	str	r3, [sp, #16]
 800c67c:	46a2      	mov	sl, r4
 800c67e:	e7d2      	b.n	800c626 <_vfiprintf_r+0xc6>
 800c680:	9b03      	ldr	r3, [sp, #12]
 800c682:	1d19      	adds	r1, r3, #4
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	9103      	str	r1, [sp, #12]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	bfbb      	ittet	lt
 800c68c:	425b      	neglt	r3, r3
 800c68e:	f042 0202 	orrlt.w	r2, r2, #2
 800c692:	9307      	strge	r3, [sp, #28]
 800c694:	9307      	strlt	r3, [sp, #28]
 800c696:	bfb8      	it	lt
 800c698:	9204      	strlt	r2, [sp, #16]
 800c69a:	7823      	ldrb	r3, [r4, #0]
 800c69c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c69e:	d10a      	bne.n	800c6b6 <_vfiprintf_r+0x156>
 800c6a0:	7863      	ldrb	r3, [r4, #1]
 800c6a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6a4:	d132      	bne.n	800c70c <_vfiprintf_r+0x1ac>
 800c6a6:	9b03      	ldr	r3, [sp, #12]
 800c6a8:	1d1a      	adds	r2, r3, #4
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	9203      	str	r2, [sp, #12]
 800c6ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c6b2:	3402      	adds	r4, #2
 800c6b4:	9305      	str	r3, [sp, #20]
 800c6b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c78c <_vfiprintf_r+0x22c>
 800c6ba:	7821      	ldrb	r1, [r4, #0]
 800c6bc:	2203      	movs	r2, #3
 800c6be:	4650      	mov	r0, sl
 800c6c0:	f7f3 fdae 	bl	8000220 <memchr>
 800c6c4:	b138      	cbz	r0, 800c6d6 <_vfiprintf_r+0x176>
 800c6c6:	9b04      	ldr	r3, [sp, #16]
 800c6c8:	eba0 000a 	sub.w	r0, r0, sl
 800c6cc:	2240      	movs	r2, #64	@ 0x40
 800c6ce:	4082      	lsls	r2, r0
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	3401      	adds	r4, #1
 800c6d4:	9304      	str	r3, [sp, #16]
 800c6d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6da:	4829      	ldr	r0, [pc, #164]	@ (800c780 <_vfiprintf_r+0x220>)
 800c6dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c6e0:	2206      	movs	r2, #6
 800c6e2:	f7f3 fd9d 	bl	8000220 <memchr>
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	d03f      	beq.n	800c76a <_vfiprintf_r+0x20a>
 800c6ea:	4b26      	ldr	r3, [pc, #152]	@ (800c784 <_vfiprintf_r+0x224>)
 800c6ec:	bb1b      	cbnz	r3, 800c736 <_vfiprintf_r+0x1d6>
 800c6ee:	9b03      	ldr	r3, [sp, #12]
 800c6f0:	3307      	adds	r3, #7
 800c6f2:	f023 0307 	bic.w	r3, r3, #7
 800c6f6:	3308      	adds	r3, #8
 800c6f8:	9303      	str	r3, [sp, #12]
 800c6fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6fc:	443b      	add	r3, r7
 800c6fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800c700:	e76a      	b.n	800c5d8 <_vfiprintf_r+0x78>
 800c702:	fb0c 3202 	mla	r2, ip, r2, r3
 800c706:	460c      	mov	r4, r1
 800c708:	2001      	movs	r0, #1
 800c70a:	e7a8      	b.n	800c65e <_vfiprintf_r+0xfe>
 800c70c:	2300      	movs	r3, #0
 800c70e:	3401      	adds	r4, #1
 800c710:	9305      	str	r3, [sp, #20]
 800c712:	4619      	mov	r1, r3
 800c714:	f04f 0c0a 	mov.w	ip, #10
 800c718:	4620      	mov	r0, r4
 800c71a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c71e:	3a30      	subs	r2, #48	@ 0x30
 800c720:	2a09      	cmp	r2, #9
 800c722:	d903      	bls.n	800c72c <_vfiprintf_r+0x1cc>
 800c724:	2b00      	cmp	r3, #0
 800c726:	d0c6      	beq.n	800c6b6 <_vfiprintf_r+0x156>
 800c728:	9105      	str	r1, [sp, #20]
 800c72a:	e7c4      	b.n	800c6b6 <_vfiprintf_r+0x156>
 800c72c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c730:	4604      	mov	r4, r0
 800c732:	2301      	movs	r3, #1
 800c734:	e7f0      	b.n	800c718 <_vfiprintf_r+0x1b8>
 800c736:	ab03      	add	r3, sp, #12
 800c738:	9300      	str	r3, [sp, #0]
 800c73a:	462a      	mov	r2, r5
 800c73c:	4b12      	ldr	r3, [pc, #72]	@ (800c788 <_vfiprintf_r+0x228>)
 800c73e:	a904      	add	r1, sp, #16
 800c740:	4630      	mov	r0, r6
 800c742:	f3af 8000 	nop.w
 800c746:	4607      	mov	r7, r0
 800c748:	1c78      	adds	r0, r7, #1
 800c74a:	d1d6      	bne.n	800c6fa <_vfiprintf_r+0x19a>
 800c74c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c74e:	07d9      	lsls	r1, r3, #31
 800c750:	d405      	bmi.n	800c75e <_vfiprintf_r+0x1fe>
 800c752:	89ab      	ldrh	r3, [r5, #12]
 800c754:	059a      	lsls	r2, r3, #22
 800c756:	d402      	bmi.n	800c75e <_vfiprintf_r+0x1fe>
 800c758:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c75a:	f7ff fe7d 	bl	800c458 <__retarget_lock_release_recursive>
 800c75e:	89ab      	ldrh	r3, [r5, #12]
 800c760:	065b      	lsls	r3, r3, #25
 800c762:	f53f af1f 	bmi.w	800c5a4 <_vfiprintf_r+0x44>
 800c766:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c768:	e71e      	b.n	800c5a8 <_vfiprintf_r+0x48>
 800c76a:	ab03      	add	r3, sp, #12
 800c76c:	9300      	str	r3, [sp, #0]
 800c76e:	462a      	mov	r2, r5
 800c770:	4b05      	ldr	r3, [pc, #20]	@ (800c788 <_vfiprintf_r+0x228>)
 800c772:	a904      	add	r1, sp, #16
 800c774:	4630      	mov	r0, r6
 800c776:	f000 f879 	bl	800c86c <_printf_i>
 800c77a:	e7e4      	b.n	800c746 <_vfiprintf_r+0x1e6>
 800c77c:	0800ce3c 	.word	0x0800ce3c
 800c780:	0800ce46 	.word	0x0800ce46
 800c784:	00000000 	.word	0x00000000
 800c788:	0800c53b 	.word	0x0800c53b
 800c78c:	0800ce42 	.word	0x0800ce42

0800c790 <_printf_common>:
 800c790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c794:	4616      	mov	r6, r2
 800c796:	4698      	mov	r8, r3
 800c798:	688a      	ldr	r2, [r1, #8]
 800c79a:	690b      	ldr	r3, [r1, #16]
 800c79c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	bfb8      	it	lt
 800c7a4:	4613      	movlt	r3, r2
 800c7a6:	6033      	str	r3, [r6, #0]
 800c7a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c7ac:	4607      	mov	r7, r0
 800c7ae:	460c      	mov	r4, r1
 800c7b0:	b10a      	cbz	r2, 800c7b6 <_printf_common+0x26>
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	6033      	str	r3, [r6, #0]
 800c7b6:	6823      	ldr	r3, [r4, #0]
 800c7b8:	0699      	lsls	r1, r3, #26
 800c7ba:	bf42      	ittt	mi
 800c7bc:	6833      	ldrmi	r3, [r6, #0]
 800c7be:	3302      	addmi	r3, #2
 800c7c0:	6033      	strmi	r3, [r6, #0]
 800c7c2:	6825      	ldr	r5, [r4, #0]
 800c7c4:	f015 0506 	ands.w	r5, r5, #6
 800c7c8:	d106      	bne.n	800c7d8 <_printf_common+0x48>
 800c7ca:	f104 0a19 	add.w	sl, r4, #25
 800c7ce:	68e3      	ldr	r3, [r4, #12]
 800c7d0:	6832      	ldr	r2, [r6, #0]
 800c7d2:	1a9b      	subs	r3, r3, r2
 800c7d4:	42ab      	cmp	r3, r5
 800c7d6:	dc26      	bgt.n	800c826 <_printf_common+0x96>
 800c7d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c7dc:	6822      	ldr	r2, [r4, #0]
 800c7de:	3b00      	subs	r3, #0
 800c7e0:	bf18      	it	ne
 800c7e2:	2301      	movne	r3, #1
 800c7e4:	0692      	lsls	r2, r2, #26
 800c7e6:	d42b      	bmi.n	800c840 <_printf_common+0xb0>
 800c7e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c7ec:	4641      	mov	r1, r8
 800c7ee:	4638      	mov	r0, r7
 800c7f0:	47c8      	blx	r9
 800c7f2:	3001      	adds	r0, #1
 800c7f4:	d01e      	beq.n	800c834 <_printf_common+0xa4>
 800c7f6:	6823      	ldr	r3, [r4, #0]
 800c7f8:	6922      	ldr	r2, [r4, #16]
 800c7fa:	f003 0306 	and.w	r3, r3, #6
 800c7fe:	2b04      	cmp	r3, #4
 800c800:	bf02      	ittt	eq
 800c802:	68e5      	ldreq	r5, [r4, #12]
 800c804:	6833      	ldreq	r3, [r6, #0]
 800c806:	1aed      	subeq	r5, r5, r3
 800c808:	68a3      	ldr	r3, [r4, #8]
 800c80a:	bf0c      	ite	eq
 800c80c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c810:	2500      	movne	r5, #0
 800c812:	4293      	cmp	r3, r2
 800c814:	bfc4      	itt	gt
 800c816:	1a9b      	subgt	r3, r3, r2
 800c818:	18ed      	addgt	r5, r5, r3
 800c81a:	2600      	movs	r6, #0
 800c81c:	341a      	adds	r4, #26
 800c81e:	42b5      	cmp	r5, r6
 800c820:	d11a      	bne.n	800c858 <_printf_common+0xc8>
 800c822:	2000      	movs	r0, #0
 800c824:	e008      	b.n	800c838 <_printf_common+0xa8>
 800c826:	2301      	movs	r3, #1
 800c828:	4652      	mov	r2, sl
 800c82a:	4641      	mov	r1, r8
 800c82c:	4638      	mov	r0, r7
 800c82e:	47c8      	blx	r9
 800c830:	3001      	adds	r0, #1
 800c832:	d103      	bne.n	800c83c <_printf_common+0xac>
 800c834:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c83c:	3501      	adds	r5, #1
 800c83e:	e7c6      	b.n	800c7ce <_printf_common+0x3e>
 800c840:	18e1      	adds	r1, r4, r3
 800c842:	1c5a      	adds	r2, r3, #1
 800c844:	2030      	movs	r0, #48	@ 0x30
 800c846:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c84a:	4422      	add	r2, r4
 800c84c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c850:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c854:	3302      	adds	r3, #2
 800c856:	e7c7      	b.n	800c7e8 <_printf_common+0x58>
 800c858:	2301      	movs	r3, #1
 800c85a:	4622      	mov	r2, r4
 800c85c:	4641      	mov	r1, r8
 800c85e:	4638      	mov	r0, r7
 800c860:	47c8      	blx	r9
 800c862:	3001      	adds	r0, #1
 800c864:	d0e6      	beq.n	800c834 <_printf_common+0xa4>
 800c866:	3601      	adds	r6, #1
 800c868:	e7d9      	b.n	800c81e <_printf_common+0x8e>
	...

0800c86c <_printf_i>:
 800c86c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c870:	7e0f      	ldrb	r7, [r1, #24]
 800c872:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c874:	2f78      	cmp	r7, #120	@ 0x78
 800c876:	4691      	mov	r9, r2
 800c878:	4680      	mov	r8, r0
 800c87a:	460c      	mov	r4, r1
 800c87c:	469a      	mov	sl, r3
 800c87e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c882:	d807      	bhi.n	800c894 <_printf_i+0x28>
 800c884:	2f62      	cmp	r7, #98	@ 0x62
 800c886:	d80a      	bhi.n	800c89e <_printf_i+0x32>
 800c888:	2f00      	cmp	r7, #0
 800c88a:	f000 80d2 	beq.w	800ca32 <_printf_i+0x1c6>
 800c88e:	2f58      	cmp	r7, #88	@ 0x58
 800c890:	f000 80b9 	beq.w	800ca06 <_printf_i+0x19a>
 800c894:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c898:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c89c:	e03a      	b.n	800c914 <_printf_i+0xa8>
 800c89e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c8a2:	2b15      	cmp	r3, #21
 800c8a4:	d8f6      	bhi.n	800c894 <_printf_i+0x28>
 800c8a6:	a101      	add	r1, pc, #4	@ (adr r1, 800c8ac <_printf_i+0x40>)
 800c8a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c8ac:	0800c905 	.word	0x0800c905
 800c8b0:	0800c919 	.word	0x0800c919
 800c8b4:	0800c895 	.word	0x0800c895
 800c8b8:	0800c895 	.word	0x0800c895
 800c8bc:	0800c895 	.word	0x0800c895
 800c8c0:	0800c895 	.word	0x0800c895
 800c8c4:	0800c919 	.word	0x0800c919
 800c8c8:	0800c895 	.word	0x0800c895
 800c8cc:	0800c895 	.word	0x0800c895
 800c8d0:	0800c895 	.word	0x0800c895
 800c8d4:	0800c895 	.word	0x0800c895
 800c8d8:	0800ca19 	.word	0x0800ca19
 800c8dc:	0800c943 	.word	0x0800c943
 800c8e0:	0800c9d3 	.word	0x0800c9d3
 800c8e4:	0800c895 	.word	0x0800c895
 800c8e8:	0800c895 	.word	0x0800c895
 800c8ec:	0800ca3b 	.word	0x0800ca3b
 800c8f0:	0800c895 	.word	0x0800c895
 800c8f4:	0800c943 	.word	0x0800c943
 800c8f8:	0800c895 	.word	0x0800c895
 800c8fc:	0800c895 	.word	0x0800c895
 800c900:	0800c9db 	.word	0x0800c9db
 800c904:	6833      	ldr	r3, [r6, #0]
 800c906:	1d1a      	adds	r2, r3, #4
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	6032      	str	r2, [r6, #0]
 800c90c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c910:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c914:	2301      	movs	r3, #1
 800c916:	e09d      	b.n	800ca54 <_printf_i+0x1e8>
 800c918:	6833      	ldr	r3, [r6, #0]
 800c91a:	6820      	ldr	r0, [r4, #0]
 800c91c:	1d19      	adds	r1, r3, #4
 800c91e:	6031      	str	r1, [r6, #0]
 800c920:	0606      	lsls	r6, r0, #24
 800c922:	d501      	bpl.n	800c928 <_printf_i+0xbc>
 800c924:	681d      	ldr	r5, [r3, #0]
 800c926:	e003      	b.n	800c930 <_printf_i+0xc4>
 800c928:	0645      	lsls	r5, r0, #25
 800c92a:	d5fb      	bpl.n	800c924 <_printf_i+0xb8>
 800c92c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c930:	2d00      	cmp	r5, #0
 800c932:	da03      	bge.n	800c93c <_printf_i+0xd0>
 800c934:	232d      	movs	r3, #45	@ 0x2d
 800c936:	426d      	negs	r5, r5
 800c938:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c93c:	4859      	ldr	r0, [pc, #356]	@ (800caa4 <_printf_i+0x238>)
 800c93e:	230a      	movs	r3, #10
 800c940:	e011      	b.n	800c966 <_printf_i+0xfa>
 800c942:	6821      	ldr	r1, [r4, #0]
 800c944:	6833      	ldr	r3, [r6, #0]
 800c946:	0608      	lsls	r0, r1, #24
 800c948:	f853 5b04 	ldr.w	r5, [r3], #4
 800c94c:	d402      	bmi.n	800c954 <_printf_i+0xe8>
 800c94e:	0649      	lsls	r1, r1, #25
 800c950:	bf48      	it	mi
 800c952:	b2ad      	uxthmi	r5, r5
 800c954:	2f6f      	cmp	r7, #111	@ 0x6f
 800c956:	4853      	ldr	r0, [pc, #332]	@ (800caa4 <_printf_i+0x238>)
 800c958:	6033      	str	r3, [r6, #0]
 800c95a:	bf14      	ite	ne
 800c95c:	230a      	movne	r3, #10
 800c95e:	2308      	moveq	r3, #8
 800c960:	2100      	movs	r1, #0
 800c962:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c966:	6866      	ldr	r6, [r4, #4]
 800c968:	60a6      	str	r6, [r4, #8]
 800c96a:	2e00      	cmp	r6, #0
 800c96c:	bfa2      	ittt	ge
 800c96e:	6821      	ldrge	r1, [r4, #0]
 800c970:	f021 0104 	bicge.w	r1, r1, #4
 800c974:	6021      	strge	r1, [r4, #0]
 800c976:	b90d      	cbnz	r5, 800c97c <_printf_i+0x110>
 800c978:	2e00      	cmp	r6, #0
 800c97a:	d04b      	beq.n	800ca14 <_printf_i+0x1a8>
 800c97c:	4616      	mov	r6, r2
 800c97e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c982:	fb03 5711 	mls	r7, r3, r1, r5
 800c986:	5dc7      	ldrb	r7, [r0, r7]
 800c988:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c98c:	462f      	mov	r7, r5
 800c98e:	42bb      	cmp	r3, r7
 800c990:	460d      	mov	r5, r1
 800c992:	d9f4      	bls.n	800c97e <_printf_i+0x112>
 800c994:	2b08      	cmp	r3, #8
 800c996:	d10b      	bne.n	800c9b0 <_printf_i+0x144>
 800c998:	6823      	ldr	r3, [r4, #0]
 800c99a:	07df      	lsls	r7, r3, #31
 800c99c:	d508      	bpl.n	800c9b0 <_printf_i+0x144>
 800c99e:	6923      	ldr	r3, [r4, #16]
 800c9a0:	6861      	ldr	r1, [r4, #4]
 800c9a2:	4299      	cmp	r1, r3
 800c9a4:	bfde      	ittt	le
 800c9a6:	2330      	movle	r3, #48	@ 0x30
 800c9a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c9ac:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c9b0:	1b92      	subs	r2, r2, r6
 800c9b2:	6122      	str	r2, [r4, #16]
 800c9b4:	f8cd a000 	str.w	sl, [sp]
 800c9b8:	464b      	mov	r3, r9
 800c9ba:	aa03      	add	r2, sp, #12
 800c9bc:	4621      	mov	r1, r4
 800c9be:	4640      	mov	r0, r8
 800c9c0:	f7ff fee6 	bl	800c790 <_printf_common>
 800c9c4:	3001      	adds	r0, #1
 800c9c6:	d14a      	bne.n	800ca5e <_printf_i+0x1f2>
 800c9c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c9cc:	b004      	add	sp, #16
 800c9ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9d2:	6823      	ldr	r3, [r4, #0]
 800c9d4:	f043 0320 	orr.w	r3, r3, #32
 800c9d8:	6023      	str	r3, [r4, #0]
 800c9da:	4833      	ldr	r0, [pc, #204]	@ (800caa8 <_printf_i+0x23c>)
 800c9dc:	2778      	movs	r7, #120	@ 0x78
 800c9de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c9e2:	6823      	ldr	r3, [r4, #0]
 800c9e4:	6831      	ldr	r1, [r6, #0]
 800c9e6:	061f      	lsls	r7, r3, #24
 800c9e8:	f851 5b04 	ldr.w	r5, [r1], #4
 800c9ec:	d402      	bmi.n	800c9f4 <_printf_i+0x188>
 800c9ee:	065f      	lsls	r7, r3, #25
 800c9f0:	bf48      	it	mi
 800c9f2:	b2ad      	uxthmi	r5, r5
 800c9f4:	6031      	str	r1, [r6, #0]
 800c9f6:	07d9      	lsls	r1, r3, #31
 800c9f8:	bf44      	itt	mi
 800c9fa:	f043 0320 	orrmi.w	r3, r3, #32
 800c9fe:	6023      	strmi	r3, [r4, #0]
 800ca00:	b11d      	cbz	r5, 800ca0a <_printf_i+0x19e>
 800ca02:	2310      	movs	r3, #16
 800ca04:	e7ac      	b.n	800c960 <_printf_i+0xf4>
 800ca06:	4827      	ldr	r0, [pc, #156]	@ (800caa4 <_printf_i+0x238>)
 800ca08:	e7e9      	b.n	800c9de <_printf_i+0x172>
 800ca0a:	6823      	ldr	r3, [r4, #0]
 800ca0c:	f023 0320 	bic.w	r3, r3, #32
 800ca10:	6023      	str	r3, [r4, #0]
 800ca12:	e7f6      	b.n	800ca02 <_printf_i+0x196>
 800ca14:	4616      	mov	r6, r2
 800ca16:	e7bd      	b.n	800c994 <_printf_i+0x128>
 800ca18:	6833      	ldr	r3, [r6, #0]
 800ca1a:	6825      	ldr	r5, [r4, #0]
 800ca1c:	6961      	ldr	r1, [r4, #20]
 800ca1e:	1d18      	adds	r0, r3, #4
 800ca20:	6030      	str	r0, [r6, #0]
 800ca22:	062e      	lsls	r6, r5, #24
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	d501      	bpl.n	800ca2c <_printf_i+0x1c0>
 800ca28:	6019      	str	r1, [r3, #0]
 800ca2a:	e002      	b.n	800ca32 <_printf_i+0x1c6>
 800ca2c:	0668      	lsls	r0, r5, #25
 800ca2e:	d5fb      	bpl.n	800ca28 <_printf_i+0x1bc>
 800ca30:	8019      	strh	r1, [r3, #0]
 800ca32:	2300      	movs	r3, #0
 800ca34:	6123      	str	r3, [r4, #16]
 800ca36:	4616      	mov	r6, r2
 800ca38:	e7bc      	b.n	800c9b4 <_printf_i+0x148>
 800ca3a:	6833      	ldr	r3, [r6, #0]
 800ca3c:	1d1a      	adds	r2, r3, #4
 800ca3e:	6032      	str	r2, [r6, #0]
 800ca40:	681e      	ldr	r6, [r3, #0]
 800ca42:	6862      	ldr	r2, [r4, #4]
 800ca44:	2100      	movs	r1, #0
 800ca46:	4630      	mov	r0, r6
 800ca48:	f7f3 fbea 	bl	8000220 <memchr>
 800ca4c:	b108      	cbz	r0, 800ca52 <_printf_i+0x1e6>
 800ca4e:	1b80      	subs	r0, r0, r6
 800ca50:	6060      	str	r0, [r4, #4]
 800ca52:	6863      	ldr	r3, [r4, #4]
 800ca54:	6123      	str	r3, [r4, #16]
 800ca56:	2300      	movs	r3, #0
 800ca58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca5c:	e7aa      	b.n	800c9b4 <_printf_i+0x148>
 800ca5e:	6923      	ldr	r3, [r4, #16]
 800ca60:	4632      	mov	r2, r6
 800ca62:	4649      	mov	r1, r9
 800ca64:	4640      	mov	r0, r8
 800ca66:	47d0      	blx	sl
 800ca68:	3001      	adds	r0, #1
 800ca6a:	d0ad      	beq.n	800c9c8 <_printf_i+0x15c>
 800ca6c:	6823      	ldr	r3, [r4, #0]
 800ca6e:	079b      	lsls	r3, r3, #30
 800ca70:	d413      	bmi.n	800ca9a <_printf_i+0x22e>
 800ca72:	68e0      	ldr	r0, [r4, #12]
 800ca74:	9b03      	ldr	r3, [sp, #12]
 800ca76:	4298      	cmp	r0, r3
 800ca78:	bfb8      	it	lt
 800ca7a:	4618      	movlt	r0, r3
 800ca7c:	e7a6      	b.n	800c9cc <_printf_i+0x160>
 800ca7e:	2301      	movs	r3, #1
 800ca80:	4632      	mov	r2, r6
 800ca82:	4649      	mov	r1, r9
 800ca84:	4640      	mov	r0, r8
 800ca86:	47d0      	blx	sl
 800ca88:	3001      	adds	r0, #1
 800ca8a:	d09d      	beq.n	800c9c8 <_printf_i+0x15c>
 800ca8c:	3501      	adds	r5, #1
 800ca8e:	68e3      	ldr	r3, [r4, #12]
 800ca90:	9903      	ldr	r1, [sp, #12]
 800ca92:	1a5b      	subs	r3, r3, r1
 800ca94:	42ab      	cmp	r3, r5
 800ca96:	dcf2      	bgt.n	800ca7e <_printf_i+0x212>
 800ca98:	e7eb      	b.n	800ca72 <_printf_i+0x206>
 800ca9a:	2500      	movs	r5, #0
 800ca9c:	f104 0619 	add.w	r6, r4, #25
 800caa0:	e7f5      	b.n	800ca8e <_printf_i+0x222>
 800caa2:	bf00      	nop
 800caa4:	0800ce4d 	.word	0x0800ce4d
 800caa8:	0800ce5e 	.word	0x0800ce5e

0800caac <__sflush_r>:
 800caac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cab4:	0716      	lsls	r6, r2, #28
 800cab6:	4605      	mov	r5, r0
 800cab8:	460c      	mov	r4, r1
 800caba:	d454      	bmi.n	800cb66 <__sflush_r+0xba>
 800cabc:	684b      	ldr	r3, [r1, #4]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	dc02      	bgt.n	800cac8 <__sflush_r+0x1c>
 800cac2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	dd48      	ble.n	800cb5a <__sflush_r+0xae>
 800cac8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800caca:	2e00      	cmp	r6, #0
 800cacc:	d045      	beq.n	800cb5a <__sflush_r+0xae>
 800cace:	2300      	movs	r3, #0
 800cad0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cad4:	682f      	ldr	r7, [r5, #0]
 800cad6:	6a21      	ldr	r1, [r4, #32]
 800cad8:	602b      	str	r3, [r5, #0]
 800cada:	d030      	beq.n	800cb3e <__sflush_r+0x92>
 800cadc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cade:	89a3      	ldrh	r3, [r4, #12]
 800cae0:	0759      	lsls	r1, r3, #29
 800cae2:	d505      	bpl.n	800caf0 <__sflush_r+0x44>
 800cae4:	6863      	ldr	r3, [r4, #4]
 800cae6:	1ad2      	subs	r2, r2, r3
 800cae8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800caea:	b10b      	cbz	r3, 800caf0 <__sflush_r+0x44>
 800caec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800caee:	1ad2      	subs	r2, r2, r3
 800caf0:	2300      	movs	r3, #0
 800caf2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800caf4:	6a21      	ldr	r1, [r4, #32]
 800caf6:	4628      	mov	r0, r5
 800caf8:	47b0      	blx	r6
 800cafa:	1c43      	adds	r3, r0, #1
 800cafc:	89a3      	ldrh	r3, [r4, #12]
 800cafe:	d106      	bne.n	800cb0e <__sflush_r+0x62>
 800cb00:	6829      	ldr	r1, [r5, #0]
 800cb02:	291d      	cmp	r1, #29
 800cb04:	d82b      	bhi.n	800cb5e <__sflush_r+0xb2>
 800cb06:	4a2a      	ldr	r2, [pc, #168]	@ (800cbb0 <__sflush_r+0x104>)
 800cb08:	410a      	asrs	r2, r1
 800cb0a:	07d6      	lsls	r6, r2, #31
 800cb0c:	d427      	bmi.n	800cb5e <__sflush_r+0xb2>
 800cb0e:	2200      	movs	r2, #0
 800cb10:	6062      	str	r2, [r4, #4]
 800cb12:	04d9      	lsls	r1, r3, #19
 800cb14:	6922      	ldr	r2, [r4, #16]
 800cb16:	6022      	str	r2, [r4, #0]
 800cb18:	d504      	bpl.n	800cb24 <__sflush_r+0x78>
 800cb1a:	1c42      	adds	r2, r0, #1
 800cb1c:	d101      	bne.n	800cb22 <__sflush_r+0x76>
 800cb1e:	682b      	ldr	r3, [r5, #0]
 800cb20:	b903      	cbnz	r3, 800cb24 <__sflush_r+0x78>
 800cb22:	6560      	str	r0, [r4, #84]	@ 0x54
 800cb24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb26:	602f      	str	r7, [r5, #0]
 800cb28:	b1b9      	cbz	r1, 800cb5a <__sflush_r+0xae>
 800cb2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb2e:	4299      	cmp	r1, r3
 800cb30:	d002      	beq.n	800cb38 <__sflush_r+0x8c>
 800cb32:	4628      	mov	r0, r5
 800cb34:	f7ff fca0 	bl	800c478 <_free_r>
 800cb38:	2300      	movs	r3, #0
 800cb3a:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb3c:	e00d      	b.n	800cb5a <__sflush_r+0xae>
 800cb3e:	2301      	movs	r3, #1
 800cb40:	4628      	mov	r0, r5
 800cb42:	47b0      	blx	r6
 800cb44:	4602      	mov	r2, r0
 800cb46:	1c50      	adds	r0, r2, #1
 800cb48:	d1c9      	bne.n	800cade <__sflush_r+0x32>
 800cb4a:	682b      	ldr	r3, [r5, #0]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d0c6      	beq.n	800cade <__sflush_r+0x32>
 800cb50:	2b1d      	cmp	r3, #29
 800cb52:	d001      	beq.n	800cb58 <__sflush_r+0xac>
 800cb54:	2b16      	cmp	r3, #22
 800cb56:	d11e      	bne.n	800cb96 <__sflush_r+0xea>
 800cb58:	602f      	str	r7, [r5, #0]
 800cb5a:	2000      	movs	r0, #0
 800cb5c:	e022      	b.n	800cba4 <__sflush_r+0xf8>
 800cb5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb62:	b21b      	sxth	r3, r3
 800cb64:	e01b      	b.n	800cb9e <__sflush_r+0xf2>
 800cb66:	690f      	ldr	r7, [r1, #16]
 800cb68:	2f00      	cmp	r7, #0
 800cb6a:	d0f6      	beq.n	800cb5a <__sflush_r+0xae>
 800cb6c:	0793      	lsls	r3, r2, #30
 800cb6e:	680e      	ldr	r6, [r1, #0]
 800cb70:	bf08      	it	eq
 800cb72:	694b      	ldreq	r3, [r1, #20]
 800cb74:	600f      	str	r7, [r1, #0]
 800cb76:	bf18      	it	ne
 800cb78:	2300      	movne	r3, #0
 800cb7a:	eba6 0807 	sub.w	r8, r6, r7
 800cb7e:	608b      	str	r3, [r1, #8]
 800cb80:	f1b8 0f00 	cmp.w	r8, #0
 800cb84:	dde9      	ble.n	800cb5a <__sflush_r+0xae>
 800cb86:	6a21      	ldr	r1, [r4, #32]
 800cb88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cb8a:	4643      	mov	r3, r8
 800cb8c:	463a      	mov	r2, r7
 800cb8e:	4628      	mov	r0, r5
 800cb90:	47b0      	blx	r6
 800cb92:	2800      	cmp	r0, #0
 800cb94:	dc08      	bgt.n	800cba8 <__sflush_r+0xfc>
 800cb96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb9e:	81a3      	strh	r3, [r4, #12]
 800cba0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cba8:	4407      	add	r7, r0
 800cbaa:	eba8 0800 	sub.w	r8, r8, r0
 800cbae:	e7e7      	b.n	800cb80 <__sflush_r+0xd4>
 800cbb0:	dfbffffe 	.word	0xdfbffffe

0800cbb4 <_fflush_r>:
 800cbb4:	b538      	push	{r3, r4, r5, lr}
 800cbb6:	690b      	ldr	r3, [r1, #16]
 800cbb8:	4605      	mov	r5, r0
 800cbba:	460c      	mov	r4, r1
 800cbbc:	b913      	cbnz	r3, 800cbc4 <_fflush_r+0x10>
 800cbbe:	2500      	movs	r5, #0
 800cbc0:	4628      	mov	r0, r5
 800cbc2:	bd38      	pop	{r3, r4, r5, pc}
 800cbc4:	b118      	cbz	r0, 800cbce <_fflush_r+0x1a>
 800cbc6:	6a03      	ldr	r3, [r0, #32]
 800cbc8:	b90b      	cbnz	r3, 800cbce <_fflush_r+0x1a>
 800cbca:	f7ff f9e7 	bl	800bf9c <__sinit>
 800cbce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d0f3      	beq.n	800cbbe <_fflush_r+0xa>
 800cbd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cbd8:	07d0      	lsls	r0, r2, #31
 800cbda:	d404      	bmi.n	800cbe6 <_fflush_r+0x32>
 800cbdc:	0599      	lsls	r1, r3, #22
 800cbde:	d402      	bmi.n	800cbe6 <_fflush_r+0x32>
 800cbe0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbe2:	f7ff fc38 	bl	800c456 <__retarget_lock_acquire_recursive>
 800cbe6:	4628      	mov	r0, r5
 800cbe8:	4621      	mov	r1, r4
 800cbea:	f7ff ff5f 	bl	800caac <__sflush_r>
 800cbee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cbf0:	07da      	lsls	r2, r3, #31
 800cbf2:	4605      	mov	r5, r0
 800cbf4:	d4e4      	bmi.n	800cbc0 <_fflush_r+0xc>
 800cbf6:	89a3      	ldrh	r3, [r4, #12]
 800cbf8:	059b      	lsls	r3, r3, #22
 800cbfa:	d4e1      	bmi.n	800cbc0 <_fflush_r+0xc>
 800cbfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbfe:	f7ff fc2b 	bl	800c458 <__retarget_lock_release_recursive>
 800cc02:	e7dd      	b.n	800cbc0 <_fflush_r+0xc>

0800cc04 <__swhatbuf_r>:
 800cc04:	b570      	push	{r4, r5, r6, lr}
 800cc06:	460c      	mov	r4, r1
 800cc08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc0c:	2900      	cmp	r1, #0
 800cc0e:	b096      	sub	sp, #88	@ 0x58
 800cc10:	4615      	mov	r5, r2
 800cc12:	461e      	mov	r6, r3
 800cc14:	da0d      	bge.n	800cc32 <__swhatbuf_r+0x2e>
 800cc16:	89a3      	ldrh	r3, [r4, #12]
 800cc18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cc1c:	f04f 0100 	mov.w	r1, #0
 800cc20:	bf14      	ite	ne
 800cc22:	2340      	movne	r3, #64	@ 0x40
 800cc24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cc28:	2000      	movs	r0, #0
 800cc2a:	6031      	str	r1, [r6, #0]
 800cc2c:	602b      	str	r3, [r5, #0]
 800cc2e:	b016      	add	sp, #88	@ 0x58
 800cc30:	bd70      	pop	{r4, r5, r6, pc}
 800cc32:	466a      	mov	r2, sp
 800cc34:	f000 f848 	bl	800ccc8 <_fstat_r>
 800cc38:	2800      	cmp	r0, #0
 800cc3a:	dbec      	blt.n	800cc16 <__swhatbuf_r+0x12>
 800cc3c:	9901      	ldr	r1, [sp, #4]
 800cc3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cc42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cc46:	4259      	negs	r1, r3
 800cc48:	4159      	adcs	r1, r3
 800cc4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc4e:	e7eb      	b.n	800cc28 <__swhatbuf_r+0x24>

0800cc50 <__smakebuf_r>:
 800cc50:	898b      	ldrh	r3, [r1, #12]
 800cc52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc54:	079d      	lsls	r5, r3, #30
 800cc56:	4606      	mov	r6, r0
 800cc58:	460c      	mov	r4, r1
 800cc5a:	d507      	bpl.n	800cc6c <__smakebuf_r+0x1c>
 800cc5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cc60:	6023      	str	r3, [r4, #0]
 800cc62:	6123      	str	r3, [r4, #16]
 800cc64:	2301      	movs	r3, #1
 800cc66:	6163      	str	r3, [r4, #20]
 800cc68:	b003      	add	sp, #12
 800cc6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc6c:	ab01      	add	r3, sp, #4
 800cc6e:	466a      	mov	r2, sp
 800cc70:	f7ff ffc8 	bl	800cc04 <__swhatbuf_r>
 800cc74:	9f00      	ldr	r7, [sp, #0]
 800cc76:	4605      	mov	r5, r0
 800cc78:	4639      	mov	r1, r7
 800cc7a:	4630      	mov	r0, r6
 800cc7c:	f7ff f876 	bl	800bd6c <_malloc_r>
 800cc80:	b948      	cbnz	r0, 800cc96 <__smakebuf_r+0x46>
 800cc82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc86:	059a      	lsls	r2, r3, #22
 800cc88:	d4ee      	bmi.n	800cc68 <__smakebuf_r+0x18>
 800cc8a:	f023 0303 	bic.w	r3, r3, #3
 800cc8e:	f043 0302 	orr.w	r3, r3, #2
 800cc92:	81a3      	strh	r3, [r4, #12]
 800cc94:	e7e2      	b.n	800cc5c <__smakebuf_r+0xc>
 800cc96:	89a3      	ldrh	r3, [r4, #12]
 800cc98:	6020      	str	r0, [r4, #0]
 800cc9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc9e:	81a3      	strh	r3, [r4, #12]
 800cca0:	9b01      	ldr	r3, [sp, #4]
 800cca2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cca6:	b15b      	cbz	r3, 800ccc0 <__smakebuf_r+0x70>
 800cca8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ccac:	4630      	mov	r0, r6
 800ccae:	f000 f81d 	bl	800ccec <_isatty_r>
 800ccb2:	b128      	cbz	r0, 800ccc0 <__smakebuf_r+0x70>
 800ccb4:	89a3      	ldrh	r3, [r4, #12]
 800ccb6:	f023 0303 	bic.w	r3, r3, #3
 800ccba:	f043 0301 	orr.w	r3, r3, #1
 800ccbe:	81a3      	strh	r3, [r4, #12]
 800ccc0:	89a3      	ldrh	r3, [r4, #12]
 800ccc2:	431d      	orrs	r5, r3
 800ccc4:	81a5      	strh	r5, [r4, #12]
 800ccc6:	e7cf      	b.n	800cc68 <__smakebuf_r+0x18>

0800ccc8 <_fstat_r>:
 800ccc8:	b538      	push	{r3, r4, r5, lr}
 800ccca:	4d07      	ldr	r5, [pc, #28]	@ (800cce8 <_fstat_r+0x20>)
 800cccc:	2300      	movs	r3, #0
 800ccce:	4604      	mov	r4, r0
 800ccd0:	4608      	mov	r0, r1
 800ccd2:	4611      	mov	r1, r2
 800ccd4:	602b      	str	r3, [r5, #0]
 800ccd6:	f7f4 f8ee 	bl	8000eb6 <_fstat>
 800ccda:	1c43      	adds	r3, r0, #1
 800ccdc:	d102      	bne.n	800cce4 <_fstat_r+0x1c>
 800ccde:	682b      	ldr	r3, [r5, #0]
 800cce0:	b103      	cbz	r3, 800cce4 <_fstat_r+0x1c>
 800cce2:	6023      	str	r3, [r4, #0]
 800cce4:	bd38      	pop	{r3, r4, r5, pc}
 800cce6:	bf00      	nop
 800cce8:	20006800 	.word	0x20006800

0800ccec <_isatty_r>:
 800ccec:	b538      	push	{r3, r4, r5, lr}
 800ccee:	4d06      	ldr	r5, [pc, #24]	@ (800cd08 <_isatty_r+0x1c>)
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	4604      	mov	r4, r0
 800ccf4:	4608      	mov	r0, r1
 800ccf6:	602b      	str	r3, [r5, #0]
 800ccf8:	f7f4 f8ed 	bl	8000ed6 <_isatty>
 800ccfc:	1c43      	adds	r3, r0, #1
 800ccfe:	d102      	bne.n	800cd06 <_isatty_r+0x1a>
 800cd00:	682b      	ldr	r3, [r5, #0]
 800cd02:	b103      	cbz	r3, 800cd06 <_isatty_r+0x1a>
 800cd04:	6023      	str	r3, [r4, #0]
 800cd06:	bd38      	pop	{r3, r4, r5, pc}
 800cd08:	20006800 	.word	0x20006800

0800cd0c <_init>:
 800cd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd0e:	bf00      	nop
 800cd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd12:	bc08      	pop	{r3}
 800cd14:	469e      	mov	lr, r3
 800cd16:	4770      	bx	lr

0800cd18 <_fini>:
 800cd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd1a:	bf00      	nop
 800cd1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd1e:	bc08      	pop	{r3}
 800cd20:	469e      	mov	lr, r3
 800cd22:	4770      	bx	lr
